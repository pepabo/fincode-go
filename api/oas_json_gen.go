// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/validate"
)

// Encode implements json.Marshaler.
func (s *AccountDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetail) encodeFields(e *jx.Encoder) {
	{
		if s.DetailID.Set {
			e.FieldStart("detail_id")
			s.DetailID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.TradeType.Set {
			e.FieldStart("trade_type")
			s.TradeType.Encode(e)
		}
	}
	{
		if s.PaymentMethod.Set {
			e.FieldStart("payment_method")
			s.PaymentMethod.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.FeeTotal.Set {
			e.FieldStart("fee_total")
			s.FeeTotal.Encode(e)
		}
	}
	{
		if s.FeeTotalTaxin.Set {
			e.FieldStart("fee_total_taxin")
			s.FeeTotalTaxin.Encode(e)
		}
	}
	{
		if s.FeeProfitTax.Set {
			e.FieldStart("fee_profit_tax")
			s.FeeProfitTax.Encode(e)
		}
	}
	{
		if s.FeeProfit.Set {
			e.FieldStart("fee_profit")
			s.FeeProfit.Encode(e)
		}
	}
	{
		if s.FeeCost.Set {
			e.FieldStart("fee_cost")
			s.FeeCost.Encode(e)
		}
	}
	{
		if s.FeeRateTotal.Set {
			e.FieldStart("fee_rate_total")
			s.FeeRateTotal.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.ApplyType.Set {
			e.FieldStart("apply_type")
			s.ApplyType.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeTaxin.Set {
			e.FieldStart("web_registration_fee_taxin")
			s.WebRegistrationFeeTaxin.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeTax.Set {
			e.FieldStart("web_registration_fee_tax")
			s.WebRegistrationFeeTax.Encode(e)
		}
	}
	{
		if s.PlatformFee.Set {
			e.FieldStart("platform_fee")
			s.PlatformFee.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxin.Set {
			e.FieldStart("platform_fee_taxin")
			s.PlatformFeeTaxin.Encode(e)
		}
	}
	{
		if s.PlatformFeeRate.Set {
			e.FieldStart("platform_fee_rate")
			s.PlatformFeeRate.Encode(e)
		}
	}
	{
		if s.FixedFeeForPlatformFee.Set {
			e.FieldStart("fixed_fee_for_platform_fee")
			s.FixedFeeForPlatformFee.Encode(e)
		}
	}
	{
		if s.ApplyTypeForPlatformFee.Set {
			e.FieldStart("apply_type_for_platform_fee")
			s.ApplyTypeForPlatformFee.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFee.Set {
			e.FieldStart("platform_web_registration_fee")
			s.PlatformWebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeTaxin.Set {
			e.FieldStart("platform_web_registration_fee_taxin")
			s.PlatformWebRegistrationFeeTaxin.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeTax.Set {
			e.FieldStart("platform_web_registration_fee_tax")
			s.PlatformWebRegistrationFeeTax.Encode(e)
		}
	}
	{
		if s.ProcessedDate.Set {
			e.FieldStart("processed_date")
			s.ProcessedDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountDetail = [34]string{
	0:  "detail_id",
	1:  "shop_id",
	2:  "trade_type",
	3:  "payment_method",
	4:  "account_id",
	5:  "order_id",
	6:  "access_id",
	7:  "deposit_amount",
	8:  "amount",
	9:  "tax",
	10: "fee_total",
	11: "fee_total_taxin",
	12: "fee_profit_tax",
	13: "fee_profit",
	14: "fee_cost",
	15: "fee_rate_total",
	16: "fixed_fee",
	17: "apply_type",
	18: "web_registration_fee",
	19: "web_registration_fee_taxin",
	20: "web_registration_fee_tax",
	21: "platform_fee",
	22: "platform_fee_taxin",
	23: "platform_fee_rate",
	24: "fixed_fee_for_platform_fee",
	25: "apply_type_for_platform_fee",
	26: "platform_web_registration_fee",
	27: "platform_web_registration_fee_taxin",
	28: "platform_web_registration_fee_tax",
	29: "processed_date",
	30: "aggregate_term_start",
	31: "aggregate_term_end",
	32: "created",
	33: "updated",
}

// Decode decodes AccountDetail from json.
func (s *AccountDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "detail_id":
			if err := func() error {
				s.DetailID.Reset()
				if err := s.DetailID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"detail_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "trade_type":
			if err := func() error {
				s.TradeType.Reset()
				if err := s.TradeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trade_type\"")
			}
		case "payment_method":
			if err := func() error {
				s.PaymentMethod.Reset()
				if err := s.PaymentMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "fee_total":
			if err := func() error {
				s.FeeTotal.Reset()
				if err := s.FeeTotal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_total\"")
			}
		case "fee_total_taxin":
			if err := func() error {
				s.FeeTotalTaxin.Reset()
				if err := s.FeeTotalTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_total_taxin\"")
			}
		case "fee_profit_tax":
			if err := func() error {
				s.FeeProfitTax.Reset()
				if err := s.FeeProfitTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_profit_tax\"")
			}
		case "fee_profit":
			if err := func() error {
				s.FeeProfit.Reset()
				if err := s.FeeProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_profit\"")
			}
		case "fee_cost":
			if err := func() error {
				s.FeeCost.Reset()
				if err := s.FeeCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_cost\"")
			}
		case "fee_rate_total":
			if err := func() error {
				s.FeeRateTotal.Reset()
				if err := s.FeeRateTotal.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_rate_total\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "apply_type":
			if err := func() error {
				s.ApplyType.Reset()
				if err := s.ApplyType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apply_type\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "web_registration_fee_taxin":
			if err := func() error {
				s.WebRegistrationFeeTaxin.Reset()
				if err := s.WebRegistrationFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_taxin\"")
			}
		case "web_registration_fee_tax":
			if err := func() error {
				s.WebRegistrationFeeTax.Reset()
				if err := s.WebRegistrationFeeTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_tax\"")
			}
		case "platform_fee":
			if err := func() error {
				s.PlatformFee.Reset()
				if err := s.PlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee\"")
			}
		case "platform_fee_taxin":
			if err := func() error {
				s.PlatformFeeTaxin.Reset()
				if err := s.PlatformFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_taxin\"")
			}
		case "platform_fee_rate":
			if err := func() error {
				s.PlatformFeeRate.Reset()
				if err := s.PlatformFeeRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_rate\"")
			}
		case "fixed_fee_for_platform_fee":
			if err := func() error {
				s.FixedFeeForPlatformFee.Reset()
				if err := s.FixedFeeForPlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee_for_platform_fee\"")
			}
		case "apply_type_for_platform_fee":
			if err := func() error {
				s.ApplyTypeForPlatformFee.Reset()
				if err := s.ApplyTypeForPlatformFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"apply_type_for_platform_fee\"")
			}
		case "platform_web_registration_fee":
			if err := func() error {
				s.PlatformWebRegistrationFee.Reset()
				if err := s.PlatformWebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee\"")
			}
		case "platform_web_registration_fee_taxin":
			if err := func() error {
				s.PlatformWebRegistrationFeeTaxin.Reset()
				if err := s.PlatformWebRegistrationFeeTaxin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_taxin\"")
			}
		case "platform_web_registration_fee_tax":
			if err := func() error {
				s.PlatformWebRegistrationFeeTax.Reset()
				if err := s.PlatformWebRegistrationFeeTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_tax\"")
			}
		case "processed_date":
			if err := func() error {
				s.ProcessedDate.Reset()
				if err := s.ProcessedDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"processed_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyType as json.
func (s AccountDetailApplyType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailApplyType from json.
func (s *AccountDetailApplyType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailApplyType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailApplyType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailApplyType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailApplyType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyTypeForPlatformFee as json.
func (s AccountDetailApplyTypeForPlatformFee) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailApplyTypeForPlatformFee from json.
func (s *AccountDetailApplyTypeForPlatformFee) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailApplyTypeForPlatformFee to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailApplyTypeForPlatformFee(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailApplyTypeForPlatformFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailApplyTypeForPlatformFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountDetailListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountDetailListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountDetailListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes AccountDetailListRetrievingResponse from json.
func (s *AccountDetailListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]AccountDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountDetailListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountDetailListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailTradeType as json.
func (s AccountDetailTradeType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountDetailTradeType from json.
func (s *AccountDetailTradeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountDetailTradeType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountDetailTradeType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountDetailTradeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountDetailTradeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate != nil {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart != nil {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd != nil {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.DepositDate != nil {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.PaymentDeadline != nil {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate != nil {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count != nil {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.BankTransferFee != nil {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount != nil {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount != nil {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount != nil {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.DepositAmount != nil {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount != nil {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount != nil {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountListItem = [20]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "scheduled_deposit_date",
	4:  "aggregate_term_start",
	5:  "aggregate_term_end",
	6:  "deposit_date",
	7:  "payment_deadline",
	8:  "payment_completion_date",
	9:  "status_code",
	10: "count",
	11: "bank_transfer_fee",
	12: "total_amount",
	13: "fee_amount",
	14: "web_registration_fee_amount",
	15: "deposit_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "created",
	19: "updated",
}

// Decode decodes AccountListItem from json.
func (s *AccountListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ScheduledDepositDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermStart = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermEnd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DepositDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentDeadline = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentCompletionDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Count = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BankTransferFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TotalAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.FeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.WebRegistrationFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DepositAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeTaxAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountListItemStatusCode as json.
func (s AccountListItemStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes AccountListItemStatusCode from json.
func (s *AccountListItemStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListItemStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = AccountListItemStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountListItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfAccountListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes AccountListRetrievingResponse from json.
func (s *AccountListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]AccountListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem AccountListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPaymentMethod as json.
func (s AccountPaymentMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AccountPaymentMethod from json.
func (s *AccountPaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountPaymentMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AccountPaymentMethod(v) {
	case AccountPaymentMethodVM:
		*s = AccountPaymentMethodVM
	case AccountPaymentMethodJA:
		*s = AccountPaymentMethodJA
	case AccountPaymentMethodKONBINI:
		*s = AccountPaymentMethodKONBINI
	case AccountPaymentMethodPayPay:
		*s = AccountPaymentMethodPayPay
	case AccountPaymentMethodApplepayVM:
		*s = AccountPaymentMethodApplepayVM
	case AccountPaymentMethodApplepayJA:
		*s = AccountPaymentMethodApplepayJA
	case AccountPaymentMethodDirectdebit:
		*s = AccountPaymentMethodDirectdebit
	default:
		*s = AccountPaymentMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount.Set {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount.Set {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.DepositDestination.Set {
			e.FieldStart("deposit_destination")
			s.DepositDestination.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRetrievingResponse = [24]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "web_registration_fee_amount",
	17: "tax_amount",
	18: "platform_fee_amount",
	19: "platform_fee_tax_amount",
	20: "platform_web_registration_fee_amount",
	21: "created",
	22: "updated",
	23: "deposit_destination",
}

// Decode decodes AccountRetrievingResponse from json.
func (s *AccountRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount.Reset()
				if err := s.SettlementAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount.Reset()
				if err := s.PlatformWebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "deposit_destination":
			if err := func() error {
				s.DepositDestination.Reset()
				if err := s.DepositDestination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_destination\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AccountRetrievingResponseDepositDestination) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AccountRetrievingResponseDepositDestination) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.RecipientCorporateName.Set {
			e.FieldStart("recipient_corporate_name")
			s.RecipientCorporateName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeLastName.Set {
			e.FieldStart("recipient_represntative_last_name")
			s.RecipientRepresntativeLastName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeFirstName.Set {
			e.FieldStart("recipient_represntative_first_name")
			s.RecipientRepresntativeFirstName.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAccountRetrievingResponseDepositDestination = [13]string{
	0:  "corporate",
	1:  "recipient_corporate_name",
	2:  "recipient_represntative_last_name",
	3:  "recipient_represntative_first_name",
	4:  "bank_code",
	5:  "bank_name",
	6:  "bank_name_kana",
	7:  "branch_code",
	8:  "branch_name",
	9:  "branch_name_kana",
	10: "account_kind",
	11: "account_number",
	12: "account_name",
}

// Decode decodes AccountRetrievingResponseDepositDestination from json.
func (s *AccountRetrievingResponseDepositDestination) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRetrievingResponseDepositDestination to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "recipient_corporate_name":
			if err := func() error {
				s.RecipientCorporateName.Reset()
				if err := s.RecipientCorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_corporate_name\"")
			}
		case "recipient_represntative_last_name":
			if err := func() error {
				s.RecipientRepresntativeLastName.Reset()
				if err := s.RecipientRepresntativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_last_name\"")
			}
		case "recipient_represntative_first_name":
			if err := func() error {
				s.RecipientRepresntativeFirstName.Reset()
				if err := s.RecipientRepresntativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_first_name\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AccountRetrievingResponseDepositDestination")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AccountRetrievingResponseDepositDestination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRetrievingResponseDepositDestination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountRetrievingResponseDepositDestinationAccountKind as json.
func (s AccountRetrievingResponseDepositDestinationAccountKind) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AccountRetrievingResponseDepositDestinationAccountKind from json.
func (s *AccountRetrievingResponseDepositDestinationAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AccountRetrievingResponseDepositDestinationAccountKind to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AccountRetrievingResponseDepositDestinationAccountKind(v) {
	case AccountRetrievingResponseDepositDestinationAccountKind0:
		*s = AccountRetrievingResponseDepositDestinationAccountKind0
	case AccountRetrievingResponseDepositDestinationAccountKind1:
		*s = AccountRetrievingResponseDepositDestinationAccountKind1
	default:
		*s = AccountRetrievingResponseDepositDestinationAccountKind(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AccountRetrievingResponseDepositDestinationAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AccountRetrievingResponseDepositDestinationAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthorizePaymentOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthorizePaymentOK) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthorizePaymentOK = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes AuthorizePaymentOK from json.
func (s *AuthorizePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthorizePaymentOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthorizePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKBrand as json.
func (s AuthorizePaymentOKBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKBrand from json.
func (s *AuthorizePaymentOKBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKBrand(v) {
	case AuthorizePaymentOKBrandVISA:
		*s = AuthorizePaymentOKBrandVISA
	case AuthorizePaymentOKBrandMASTER:
		*s = AuthorizePaymentOKBrandMASTER
	case AuthorizePaymentOKBrandJCB:
		*s = AuthorizePaymentOKBrandJCB
	case AuthorizePaymentOKBrandAMEX:
		*s = AuthorizePaymentOKBrandAMEX
	case AuthorizePaymentOKBrandDINERS:
		*s = AuthorizePaymentOKBrandDINERS
	case AuthorizePaymentOKBrandDISCOVER:
		*s = AuthorizePaymentOKBrandDISCOVER
	case AuthorizePaymentOKBrandEmpty:
		*s = AuthorizePaymentOKBrandEmpty
	default:
		*s = AuthorizePaymentOKBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKJobCode as json.
func (s AuthorizePaymentOKJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKJobCode from json.
func (s *AuthorizePaymentOKJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKJobCode(v) {
	case AuthorizePaymentOKJobCodeCHECK:
		*s = AuthorizePaymentOKJobCodeCHECK
	case AuthorizePaymentOKJobCodeAUTH:
		*s = AuthorizePaymentOKJobCodeAUTH
	case AuthorizePaymentOKJobCodeCAPTURE:
		*s = AuthorizePaymentOKJobCodeCAPTURE
	default:
		*s = AuthorizePaymentOKJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKMethod as json.
func (s AuthorizePaymentOKMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKMethod from json.
func (s *AuthorizePaymentOKMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKMethod(v) {
	case AuthorizePaymentOKMethod1:
		*s = AuthorizePaymentOKMethod1
	case AuthorizePaymentOKMethod2:
		*s = AuthorizePaymentOKMethod2
	case AuthorizePaymentOKMethod5:
		*s = AuthorizePaymentOKMethod5
	default:
		*s = AuthorizePaymentOKMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKPayTimes as json.
func (s AuthorizePaymentOKPayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKPayTimes from json.
func (s *AuthorizePaymentOKPayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKPayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKPayTimes(v) {
	case AuthorizePaymentOKPayTimes3:
		*s = AuthorizePaymentOKPayTimes3
	case AuthorizePaymentOKPayTimes5:
		*s = AuthorizePaymentOKPayTimes5
	case AuthorizePaymentOKPayTimes6:
		*s = AuthorizePaymentOKPayTimes6
	case AuthorizePaymentOKPayTimes10:
		*s = AuthorizePaymentOKPayTimes10
	case AuthorizePaymentOKPayTimes12:
		*s = AuthorizePaymentOKPayTimes12
	case AuthorizePaymentOKPayTimes15:
		*s = AuthorizePaymentOKPayTimes15
	case AuthorizePaymentOKPayTimes18:
		*s = AuthorizePaymentOKPayTimes18
	case AuthorizePaymentOKPayTimes20:
		*s = AuthorizePaymentOKPayTimes20
	case AuthorizePaymentOKPayTimes24:
		*s = AuthorizePaymentOKPayTimes24
	default:
		*s = AuthorizePaymentOKPayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKPayType as json.
func (s AuthorizePaymentOKPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKPayType from json.
func (s *AuthorizePaymentOKPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKPayType(v) {
	case AuthorizePaymentOKPayTypeCard:
		*s = AuthorizePaymentOKPayTypeCard
	case AuthorizePaymentOKPayTypeKonbini:
		*s = AuthorizePaymentOKPayTypeKonbini
	case AuthorizePaymentOKPayTypePaypay:
		*s = AuthorizePaymentOKPayTypePaypay
	case AuthorizePaymentOKPayTypeApplepay:
		*s = AuthorizePaymentOKPayTypeApplepay
	case AuthorizePaymentOKPayTypeDirectdebit:
		*s = AuthorizePaymentOKPayTypeDirectdebit
	case AuthorizePaymentOKPayTypeVirtualaccount:
		*s = AuthorizePaymentOKPayTypeVirtualaccount
	default:
		*s = AuthorizePaymentOKPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKStatus as json.
func (s AuthorizePaymentOKStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKStatus from json.
func (s *AuthorizePaymentOKStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKStatus(v) {
	case AuthorizePaymentOKStatusUNPROCESSED:
		*s = AuthorizePaymentOKStatusUNPROCESSED
	case AuthorizePaymentOKStatusCHECKED:
		*s = AuthorizePaymentOKStatusCHECKED
	case AuthorizePaymentOKStatusAUTHORIZED:
		*s = AuthorizePaymentOKStatusAUTHORIZED
	case AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = AuthorizePaymentOKStatusAWAITINGCUSTOMERPAYMENT
	case AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = AuthorizePaymentOKStatusAWAITINGPAYMENTAPPROVAL
	case AuthorizePaymentOKStatusCAPTURED:
		*s = AuthorizePaymentOKStatusCAPTURED
	case AuthorizePaymentOKStatusCANCELED:
		*s = AuthorizePaymentOKStatusCANCELED
	case AuthorizePaymentOKStatusEXPIRED:
		*s = AuthorizePaymentOKStatusEXPIRED
	case AuthorizePaymentOKStatusAUTHENTICATED:
		*s = AuthorizePaymentOKStatusAUTHENTICATED
	case AuthorizePaymentOKStatusFAILED:
		*s = AuthorizePaymentOKStatusFAILED
	default:
		*s = AuthorizePaymentOKStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTds2Status as json.
func (s AuthorizePaymentOKTds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKTds2Status from json.
func (s *AuthorizePaymentOKTds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKTds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKTds2Status(v) {
	case AuthorizePaymentOKTds2StatusAUTHENTICATING:
		*s = AuthorizePaymentOKTds2StatusAUTHENTICATING
	case AuthorizePaymentOKTds2StatusCHALLENGE:
		*s = AuthorizePaymentOKTds2StatusCHALLENGE
	case AuthorizePaymentOKTds2StatusAUTHENTICATED:
		*s = AuthorizePaymentOKTds2StatusAUTHENTICATED
	default:
		*s = AuthorizePaymentOKTds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTds2Type as json.
func (s AuthorizePaymentOKTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKTds2Type from json.
func (s *AuthorizePaymentOKTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKTds2Type(v) {
	case AuthorizePaymentOKTds2Type2:
		*s = AuthorizePaymentOKTds2Type2
	case AuthorizePaymentOKTds2Type3:
		*s = AuthorizePaymentOKTds2Type3
	default:
		*s = AuthorizePaymentOKTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTdsType as json.
func (s AuthorizePaymentOKTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentOKTdsType from json.
func (s *AuthorizePaymentOKTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentOKTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentOKTdsType(v) {
	case AuthorizePaymentOKTdsType0:
		*s = AuthorizePaymentOKTdsType0
	case AuthorizePaymentOKTdsType2:
		*s = AuthorizePaymentOKTdsType2
	default:
		*s = AuthorizePaymentOKTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuthorizePaymentReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuthorizePaymentReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("method")
		s.Method.Encode(e)
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuthorizePaymentReq = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "method",
	3: "pay_times",
}

// Decode decodes AuthorizePaymentReq from json.
func (s *AuthorizePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "method":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuthorizePaymentReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfAuthorizePaymentReq) {
					name = jsonFieldsNameOfAuthorizePaymentReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuthorizePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentReqMethod as json.
func (s AuthorizePaymentReqMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentReqMethod from json.
func (s *AuthorizePaymentReqMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentReqMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentReqMethod(v) {
	case AuthorizePaymentReqMethod1:
		*s = AuthorizePaymentReqMethod1
	case AuthorizePaymentReqMethod2:
		*s = AuthorizePaymentReqMethod2
	case AuthorizePaymentReqMethod5:
		*s = AuthorizePaymentReqMethod5
	default:
		*s = AuthorizePaymentReqMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentReqMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentReqMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentReqPayTimes as json.
func (s AuthorizePaymentReqPayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentReqPayTimes from json.
func (s *AuthorizePaymentReqPayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentReqPayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentReqPayTimes(v) {
	case AuthorizePaymentReqPayTimes3:
		*s = AuthorizePaymentReqPayTimes3
	case AuthorizePaymentReqPayTimes5:
		*s = AuthorizePaymentReqPayTimes5
	case AuthorizePaymentReqPayTimes6:
		*s = AuthorizePaymentReqPayTimes6
	case AuthorizePaymentReqPayTimes10:
		*s = AuthorizePaymentReqPayTimes10
	case AuthorizePaymentReqPayTimes12:
		*s = AuthorizePaymentReqPayTimes12
	case AuthorizePaymentReqPayTimes15:
		*s = AuthorizePaymentReqPayTimes15
	case AuthorizePaymentReqPayTimes18:
		*s = AuthorizePaymentReqPayTimes18
	case AuthorizePaymentReqPayTimes20:
		*s = AuthorizePaymentReqPayTimes20
	case AuthorizePaymentReqPayTimes24:
		*s = AuthorizePaymentReqPayTimes24
	default:
		*s = AuthorizePaymentReqPayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentReqPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentReqPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentReqPayType as json.
func (s AuthorizePaymentReqPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes AuthorizePaymentReqPayType from json.
func (s *AuthorizePaymentReqPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuthorizePaymentReqPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch AuthorizePaymentReqPayType(v) {
	case AuthorizePaymentReqPayTypeCard:
		*s = AuthorizePaymentReqPayTypeCard
	case AuthorizePaymentReqPayTypeKonbini:
		*s = AuthorizePaymentReqPayTypeKonbini
	case AuthorizePaymentReqPayTypePaypay:
		*s = AuthorizePaymentReqPayTypePaypay
	case AuthorizePaymentReqPayTypeApplepay:
		*s = AuthorizePaymentReqPayTypeApplepay
	case AuthorizePaymentReqPayTypeDirectdebit:
		*s = AuthorizePaymentReqPayTypeDirectdebit
	case AuthorizePaymentReqPayTypeVirtualaccount:
		*s = AuthorizePaymentReqPayTypeVirtualaccount
	default:
		*s = AuthorizePaymentReqPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s AuthorizePaymentReqPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuthorizePaymentReqPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK as json.
func (s CapturePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case CapturePaymentOK0CapturePaymentOK:
		s.CapturePaymentOK0.Encode(e)
	case CapturePaymentOK1CapturePaymentOK:
		s.CapturePaymentOK1.Encode(e)
	case CapturePaymentOK2CapturePaymentOK:
		s.CapturePaymentOK2.Encode(e)
	}
}

func (s CapturePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case CapturePaymentOK0CapturePaymentOK:
		s.CapturePaymentOK0.encodeFields(e)
	case CapturePaymentOK1CapturePaymentOK:
		s.CapturePaymentOK1.encodeFields(e)
	case CapturePaymentOK2CapturePaymentOK:
		s.CapturePaymentOK2.encodeFields(e)
	}
}

// Decode decodes CapturePaymentOK from json.
func (s *CapturePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "subscription_id":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := CapturePaymentOK0CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := CapturePaymentOK1CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_date":
				match := CapturePaymentOK2CapturePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case CapturePaymentOK0CapturePaymentOK:
		if err := s.CapturePaymentOK0.Decode(d); err != nil {
			return err
		}
	case CapturePaymentOK1CapturePaymentOK:
		if err := s.CapturePaymentOK1.Decode(d); err != nil {
			return err
		}
	case CapturePaymentOK2CapturePaymentOK:
		if err := s.CapturePaymentOK2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentOK0) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCapturePaymentOK0 = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes CapturePaymentOK0 from json.
func (s *CapturePaymentOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Brand as json.
func (s CapturePaymentOK0Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0Brand from json.
func (s *CapturePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0Brand(v) {
	case CapturePaymentOK0BrandVISA:
		*s = CapturePaymentOK0BrandVISA
	case CapturePaymentOK0BrandMASTER:
		*s = CapturePaymentOK0BrandMASTER
	case CapturePaymentOK0BrandJCB:
		*s = CapturePaymentOK0BrandJCB
	case CapturePaymentOK0BrandAMEX:
		*s = CapturePaymentOK0BrandAMEX
	case CapturePaymentOK0BrandDINERS:
		*s = CapturePaymentOK0BrandDINERS
	case CapturePaymentOK0BrandDISCOVER:
		*s = CapturePaymentOK0BrandDISCOVER
	case CapturePaymentOK0BrandEmpty:
		*s = CapturePaymentOK0BrandEmpty
	default:
		*s = CapturePaymentOK0Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0JobCode as json.
func (s CapturePaymentOK0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0JobCode from json.
func (s *CapturePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0JobCode(v) {
	case CapturePaymentOK0JobCodeCHECK:
		*s = CapturePaymentOK0JobCodeCHECK
	case CapturePaymentOK0JobCodeAUTH:
		*s = CapturePaymentOK0JobCodeAUTH
	case CapturePaymentOK0JobCodeCAPTURE:
		*s = CapturePaymentOK0JobCodeCAPTURE
	default:
		*s = CapturePaymentOK0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Method as json.
func (s CapturePaymentOK0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0Method from json.
func (s *CapturePaymentOK0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0Method(v) {
	case CapturePaymentOK0Method1:
		*s = CapturePaymentOK0Method1
	case CapturePaymentOK0Method2:
		*s = CapturePaymentOK0Method2
	case CapturePaymentOK0Method5:
		*s = CapturePaymentOK0Method5
	default:
		*s = CapturePaymentOK0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0PayTimes as json.
func (s CapturePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0PayTimes from json.
func (s *CapturePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0PayTimes(v) {
	case CapturePaymentOK0PayTimes3:
		*s = CapturePaymentOK0PayTimes3
	case CapturePaymentOK0PayTimes5:
		*s = CapturePaymentOK0PayTimes5
	case CapturePaymentOK0PayTimes6:
		*s = CapturePaymentOK0PayTimes6
	case CapturePaymentOK0PayTimes10:
		*s = CapturePaymentOK0PayTimes10
	case CapturePaymentOK0PayTimes12:
		*s = CapturePaymentOK0PayTimes12
	case CapturePaymentOK0PayTimes15:
		*s = CapturePaymentOK0PayTimes15
	case CapturePaymentOK0PayTimes18:
		*s = CapturePaymentOK0PayTimes18
	case CapturePaymentOK0PayTimes20:
		*s = CapturePaymentOK0PayTimes20
	case CapturePaymentOK0PayTimes24:
		*s = CapturePaymentOK0PayTimes24
	default:
		*s = CapturePaymentOK0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0PayType as json.
func (s CapturePaymentOK0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0PayType from json.
func (s *CapturePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0PayType(v) {
	case CapturePaymentOK0PayTypeCard:
		*s = CapturePaymentOK0PayTypeCard
	case CapturePaymentOK0PayTypeKonbini:
		*s = CapturePaymentOK0PayTypeKonbini
	case CapturePaymentOK0PayTypePaypay:
		*s = CapturePaymentOK0PayTypePaypay
	case CapturePaymentOK0PayTypeApplepay:
		*s = CapturePaymentOK0PayTypeApplepay
	case CapturePaymentOK0PayTypeDirectdebit:
		*s = CapturePaymentOK0PayTypeDirectdebit
	case CapturePaymentOK0PayTypeVirtualaccount:
		*s = CapturePaymentOK0PayTypeVirtualaccount
	default:
		*s = CapturePaymentOK0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Status as json.
func (s CapturePaymentOK0Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0Status from json.
func (s *CapturePaymentOK0Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0Status(v) {
	case CapturePaymentOK0StatusUNPROCESSED:
		*s = CapturePaymentOK0StatusUNPROCESSED
	case CapturePaymentOK0StatusCHECKED:
		*s = CapturePaymentOK0StatusCHECKED
	case CapturePaymentOK0StatusAUTHORIZED:
		*s = CapturePaymentOK0StatusAUTHORIZED
	case CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
	case CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
	case CapturePaymentOK0StatusCAPTURED:
		*s = CapturePaymentOK0StatusCAPTURED
	case CapturePaymentOK0StatusCANCELED:
		*s = CapturePaymentOK0StatusCANCELED
	case CapturePaymentOK0StatusEXPIRED:
		*s = CapturePaymentOK0StatusEXPIRED
	case CapturePaymentOK0StatusAUTHENTICATED:
		*s = CapturePaymentOK0StatusAUTHENTICATED
	case CapturePaymentOK0StatusFAILED:
		*s = CapturePaymentOK0StatusFAILED
	default:
		*s = CapturePaymentOK0Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Tds2Status as json.
func (s CapturePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0Tds2Status from json.
func (s *CapturePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0Tds2Status(v) {
	case CapturePaymentOK0Tds2StatusAUTHENTICATING:
		*s = CapturePaymentOK0Tds2StatusAUTHENTICATING
	case CapturePaymentOK0Tds2StatusCHALLENGE:
		*s = CapturePaymentOK0Tds2StatusCHALLENGE
	case CapturePaymentOK0Tds2StatusAUTHENTICATED:
		*s = CapturePaymentOK0Tds2StatusAUTHENTICATED
	default:
		*s = CapturePaymentOK0Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Tds2Type as json.
func (s CapturePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0Tds2Type from json.
func (s *CapturePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0Tds2Type(v) {
	case CapturePaymentOK0Tds2Type2:
		*s = CapturePaymentOK0Tds2Type2
	case CapturePaymentOK0Tds2Type3:
		*s = CapturePaymentOK0Tds2Type3
	default:
		*s = CapturePaymentOK0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0TdsType as json.
func (s CapturePaymentOK0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK0TdsType from json.
func (s *CapturePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK0TdsType(v) {
	case CapturePaymentOK0TdsType0:
		*s = CapturePaymentOK0TdsType0
	case CapturePaymentOK0TdsType2:
		*s = CapturePaymentOK0TdsType2
	default:
		*s = CapturePaymentOK0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentOK1) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfCapturePaymentOK1 = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes CapturePaymentOK1 from json.
func (s *CapturePaymentOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Brand as json.
func (s CapturePaymentOK1Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1Brand from json.
func (s *CapturePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1Brand(v) {
	case CapturePaymentOK1BrandVISA:
		*s = CapturePaymentOK1BrandVISA
	case CapturePaymentOK1BrandMASTER:
		*s = CapturePaymentOK1BrandMASTER
	case CapturePaymentOK1BrandJCB:
		*s = CapturePaymentOK1BrandJCB
	case CapturePaymentOK1BrandAMEX:
		*s = CapturePaymentOK1BrandAMEX
	case CapturePaymentOK1BrandDINERS:
		*s = CapturePaymentOK1BrandDINERS
	case CapturePaymentOK1BrandDISCOVER:
		*s = CapturePaymentOK1BrandDISCOVER
	case CapturePaymentOK1BrandEmpty:
		*s = CapturePaymentOK1BrandEmpty
	default:
		*s = CapturePaymentOK1Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1JobCode as json.
func (s CapturePaymentOK1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1JobCode from json.
func (s *CapturePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1JobCode(v) {
	case CapturePaymentOK1JobCodeAUTH:
		*s = CapturePaymentOK1JobCodeAUTH
	case CapturePaymentOK1JobCodeCAPTURE:
		*s = CapturePaymentOK1JobCodeCAPTURE
	default:
		*s = CapturePaymentOK1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Method as json.
func (s CapturePaymentOK1Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1Method from json.
func (s *CapturePaymentOK1Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1Method(v) {
	case CapturePaymentOK1Method1:
		*s = CapturePaymentOK1Method1
	case CapturePaymentOK1Method2:
		*s = CapturePaymentOK1Method2
	case CapturePaymentOK1Method5:
		*s = CapturePaymentOK1Method5
	default:
		*s = CapturePaymentOK1Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1PayTimes as json.
func (s CapturePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1PayTimes from json.
func (s *CapturePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1PayTimes(v) {
	case CapturePaymentOK1PayTimes3:
		*s = CapturePaymentOK1PayTimes3
	case CapturePaymentOK1PayTimes5:
		*s = CapturePaymentOK1PayTimes5
	case CapturePaymentOK1PayTimes6:
		*s = CapturePaymentOK1PayTimes6
	case CapturePaymentOK1PayTimes10:
		*s = CapturePaymentOK1PayTimes10
	case CapturePaymentOK1PayTimes12:
		*s = CapturePaymentOK1PayTimes12
	case CapturePaymentOK1PayTimes15:
		*s = CapturePaymentOK1PayTimes15
	case CapturePaymentOK1PayTimes18:
		*s = CapturePaymentOK1PayTimes18
	case CapturePaymentOK1PayTimes20:
		*s = CapturePaymentOK1PayTimes20
	case CapturePaymentOK1PayTimes24:
		*s = CapturePaymentOK1PayTimes24
	default:
		*s = CapturePaymentOK1PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1PayType as json.
func (s CapturePaymentOK1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1PayType from json.
func (s *CapturePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1PayType(v) {
	case CapturePaymentOK1PayTypeCard:
		*s = CapturePaymentOK1PayTypeCard
	case CapturePaymentOK1PayTypeKonbini:
		*s = CapturePaymentOK1PayTypeKonbini
	case CapturePaymentOK1PayTypePaypay:
		*s = CapturePaymentOK1PayTypePaypay
	case CapturePaymentOK1PayTypeApplepay:
		*s = CapturePaymentOK1PayTypeApplepay
	case CapturePaymentOK1PayTypeDirectdebit:
		*s = CapturePaymentOK1PayTypeDirectdebit
	case CapturePaymentOK1PayTypeVirtualaccount:
		*s = CapturePaymentOK1PayTypeVirtualaccount
	default:
		*s = CapturePaymentOK1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Status as json.
func (s CapturePaymentOK1Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK1Status from json.
func (s *CapturePaymentOK1Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK1Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK1Status(v) {
	case CapturePaymentOK1StatusUNPROCESSED:
		*s = CapturePaymentOK1StatusUNPROCESSED
	case CapturePaymentOK1StatusCHECKED:
		*s = CapturePaymentOK1StatusCHECKED
	case CapturePaymentOK1StatusAUTHORIZED:
		*s = CapturePaymentOK1StatusAUTHORIZED
	case CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
	case CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
	case CapturePaymentOK1StatusCAPTURED:
		*s = CapturePaymentOK1StatusCAPTURED
	case CapturePaymentOK1StatusCANCELED:
		*s = CapturePaymentOK1StatusCANCELED
	case CapturePaymentOK1StatusEXPIRED:
		*s = CapturePaymentOK1StatusEXPIRED
	case CapturePaymentOK1StatusAUTHENTICATED:
		*s = CapturePaymentOK1StatusAUTHENTICATED
	case CapturePaymentOK1StatusFAILED:
		*s = CapturePaymentOK1StatusFAILED
	default:
		*s = CapturePaymentOK1Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentOK2) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfCapturePaymentOK2 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes CapturePaymentOK2 from json.
func (s *CapturePaymentOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2JobCode as json.
func (s CapturePaymentOK2JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK2JobCode from json.
func (s *CapturePaymentOK2JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK2JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK2JobCode(v) {
	case CapturePaymentOK2JobCodeAUTH:
		*s = CapturePaymentOK2JobCodeAUTH
	case CapturePaymentOK2JobCodeCAPTURE:
		*s = CapturePaymentOK2JobCodeCAPTURE
	default:
		*s = CapturePaymentOK2JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK2JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK2JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2PayType as json.
func (s CapturePaymentOK2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK2PayType from json.
func (s *CapturePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK2PayType(v) {
	case CapturePaymentOK2PayTypeCard:
		*s = CapturePaymentOK2PayTypeCard
	case CapturePaymentOK2PayTypeKonbini:
		*s = CapturePaymentOK2PayTypeKonbini
	case CapturePaymentOK2PayTypePaypay:
		*s = CapturePaymentOK2PayTypePaypay
	case CapturePaymentOK2PayTypeApplepay:
		*s = CapturePaymentOK2PayTypeApplepay
	case CapturePaymentOK2PayTypeDirectdebit:
		*s = CapturePaymentOK2PayTypeDirectdebit
	case CapturePaymentOK2PayTypeVirtualaccount:
		*s = CapturePaymentOK2PayTypeVirtualaccount
	default:
		*s = CapturePaymentOK2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2RedirectType as json.
func (s CapturePaymentOK2RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK2RedirectType from json.
func (s *CapturePaymentOK2RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK2RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK2RedirectType(v) {
	case CapturePaymentOK2RedirectType1:
		*s = CapturePaymentOK2RedirectType1
	case CapturePaymentOK2RedirectType2:
		*s = CapturePaymentOK2RedirectType2
	default:
		*s = CapturePaymentOK2RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK2RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK2RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2Status as json.
func (s CapturePaymentOK2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentOK2Status from json.
func (s *CapturePaymentOK2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentOK2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentOK2Status(v) {
	case CapturePaymentOK2StatusUNPROCESSED:
		*s = CapturePaymentOK2StatusUNPROCESSED
	case CapturePaymentOK2StatusCHECKED:
		*s = CapturePaymentOK2StatusCHECKED
	case CapturePaymentOK2StatusAUTHORIZED:
		*s = CapturePaymentOK2StatusAUTHORIZED
	case CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = CapturePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
	case CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = CapturePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
	case CapturePaymentOK2StatusCAPTURED:
		*s = CapturePaymentOK2StatusCAPTURED
	case CapturePaymentOK2StatusCANCELED:
		*s = CapturePaymentOK2StatusCANCELED
	case CapturePaymentOK2StatusEXPIRED:
		*s = CapturePaymentOK2StatusEXPIRED
	case CapturePaymentOK2StatusAUTHENTICATED:
		*s = CapturePaymentOK2StatusAUTHENTICATED
	case CapturePaymentOK2StatusFAILED:
		*s = CapturePaymentOK2StatusFAILED
	default:
		*s = CapturePaymentOK2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq as json.
func (s CapturePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case CapturePaymentReq0CapturePaymentReq:
		s.CapturePaymentReq0.Encode(e)
	case CapturePaymentReq1CapturePaymentReq:
		s.CapturePaymentReq1.Encode(e)
	case CapturePaymentReq2CapturePaymentReq:
		s.CapturePaymentReq2.Encode(e)
	}
}

func (s CapturePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case CapturePaymentReq0CapturePaymentReq:
		s.CapturePaymentReq0.encodeFields(e)
	case CapturePaymentReq1CapturePaymentReq:
		s.CapturePaymentReq1.encodeFields(e)
	case CapturePaymentReq2CapturePaymentReq:
		s.CapturePaymentReq2.encodeFields(e)
	}
}

// Decode decodes CapturePaymentReq from json.
func (s *CapturePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "method":
				match := CapturePaymentReq0CapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := CapturePaymentReq0CapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := CapturePaymentReq2CapturePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = CapturePaymentReq1CapturePaymentReq
	}
	switch s.Type {
	case CapturePaymentReq0CapturePaymentReq:
		if err := s.CapturePaymentReq0.Decode(d); err != nil {
			return err
		}
	case CapturePaymentReq1CapturePaymentReq:
		if err := s.CapturePaymentReq1.Decode(d); err != nil {
			return err
		}
	case CapturePaymentReq2CapturePaymentReq:
		if err := s.CapturePaymentReq2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentReq0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
}

var jsonFieldsNameOfCapturePaymentReq0 = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "method",
	3: "pay_times",
}

// Decode decodes CapturePaymentReq0 from json.
func (s *CapturePaymentReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentReq0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCapturePaymentReq0) {
					name = jsonFieldsNameOfCapturePaymentReq0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq0Method as json.
func (s CapturePaymentReq0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentReq0Method from json.
func (s *CapturePaymentReq0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentReq0Method(v) {
	case CapturePaymentReq0Method1:
		*s = CapturePaymentReq0Method1
	case CapturePaymentReq0Method2:
		*s = CapturePaymentReq0Method2
	case CapturePaymentReq0Method5:
		*s = CapturePaymentReq0Method5
	default:
		*s = CapturePaymentReq0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq0PayTimes as json.
func (s CapturePaymentReq0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentReq0PayTimes from json.
func (s *CapturePaymentReq0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentReq0PayTimes(v) {
	case CapturePaymentReq0PayTimes3:
		*s = CapturePaymentReq0PayTimes3
	case CapturePaymentReq0PayTimes5:
		*s = CapturePaymentReq0PayTimes5
	case CapturePaymentReq0PayTimes6:
		*s = CapturePaymentReq0PayTimes6
	case CapturePaymentReq0PayTimes10:
		*s = CapturePaymentReq0PayTimes10
	case CapturePaymentReq0PayTimes12:
		*s = CapturePaymentReq0PayTimes12
	case CapturePaymentReq0PayTimes15:
		*s = CapturePaymentReq0PayTimes15
	case CapturePaymentReq0PayTimes18:
		*s = CapturePaymentReq0PayTimes18
	case CapturePaymentReq0PayTimes20:
		*s = CapturePaymentReq0PayTimes20
	case CapturePaymentReq0PayTimes24:
		*s = CapturePaymentReq0PayTimes24
	default:
		*s = CapturePaymentReq0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq0PayType as json.
func (s CapturePaymentReq0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentReq0PayType from json.
func (s *CapturePaymentReq0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentReq0PayType(v) {
	case CapturePaymentReq0PayTypeCard:
		*s = CapturePaymentReq0PayTypeCard
	case CapturePaymentReq0PayTypeKonbini:
		*s = CapturePaymentReq0PayTypeKonbini
	case CapturePaymentReq0PayTypePaypay:
		*s = CapturePaymentReq0PayTypePaypay
	case CapturePaymentReq0PayTypeApplepay:
		*s = CapturePaymentReq0PayTypeApplepay
	case CapturePaymentReq0PayTypeDirectdebit:
		*s = CapturePaymentReq0PayTypeDirectdebit
	case CapturePaymentReq0PayTypeVirtualaccount:
		*s = CapturePaymentReq0PayTypeVirtualaccount
	default:
		*s = CapturePaymentReq0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentReq1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
}

var jsonFieldsNameOfCapturePaymentReq1 = [2]string{
	0: "pay_type",
	1: "access_id",
}

// Decode decodes CapturePaymentReq1 from json.
func (s *CapturePaymentReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentReq1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCapturePaymentReq1) {
					name = jsonFieldsNameOfCapturePaymentReq1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq1PayType as json.
func (s CapturePaymentReq1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentReq1PayType from json.
func (s *CapturePaymentReq1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentReq1PayType(v) {
	case CapturePaymentReq1PayTypeCard:
		*s = CapturePaymentReq1PayTypeCard
	case CapturePaymentReq1PayTypeKonbini:
		*s = CapturePaymentReq1PayTypeKonbini
	case CapturePaymentReq1PayTypePaypay:
		*s = CapturePaymentReq1PayTypePaypay
	case CapturePaymentReq1PayTypeApplepay:
		*s = CapturePaymentReq1PayTypeApplepay
	case CapturePaymentReq1PayTypeDirectdebit:
		*s = CapturePaymentReq1PayTypeDirectdebit
	case CapturePaymentReq1PayTypeVirtualaccount:
		*s = CapturePaymentReq1PayTypeVirtualaccount
	default:
		*s = CapturePaymentReq1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CapturePaymentReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CapturePaymentReq2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		if s.CaptureDescription != nil {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfCapturePaymentReq2 = [3]string{
	0: "pay_type",
	1: "access_id",
	2: "capture_description",
}

// Decode decodes CapturePaymentReq2 from json.
func (s *CapturePaymentReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CaptureDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CapturePaymentReq2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCapturePaymentReq2) {
					name = jsonFieldsNameOfCapturePaymentReq2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CapturePaymentReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq2PayType as json.
func (s CapturePaymentReq2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CapturePaymentReq2PayType from json.
func (s *CapturePaymentReq2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CapturePaymentReq2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CapturePaymentReq2PayType(v) {
	case CapturePaymentReq2PayTypeCard:
		*s = CapturePaymentReq2PayTypeCard
	case CapturePaymentReq2PayTypeKonbini:
		*s = CapturePaymentReq2PayTypeKonbini
	case CapturePaymentReq2PayTypePaypay:
		*s = CapturePaymentReq2PayTypePaypay
	case CapturePaymentReq2PayTypeApplepay:
		*s = CapturePaymentReq2PayTypeApplepay
	case CapturePaymentReq2PayTypeDirectdebit:
		*s = CapturePaymentReq2PayTypeDirectdebit
	case CapturePaymentReq2PayTypeVirtualaccount:
		*s = CapturePaymentReq2PayTypeVirtualaccount
	default:
		*s = CapturePaymentReq2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CapturePaymentReq2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CapturePaymentReq2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Card) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Card) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire != nil {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName != nil {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCard = [11]string{
	0:  "id",
	1:  "customer_id",
	2:  "default_flag",
	3:  "card_no",
	4:  "expire",
	5:  "holder_name",
	6:  "type",
	7:  "brand",
	8:  "card_no_hash",
	9:  "created",
	10: "updated",
}

// Decode decodes Card from json.
func (s *Card) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Card to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Expire = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.HolderName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Card")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Card) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Card) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardBrand as json.
func (s CardBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardBrand from json.
func (s *CardBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardBrand(v) {
	case CardBrandVISA:
		*s = CardBrandVISA
	case CardBrandMASTER:
		*s = CardBrandMASTER
	case CardBrandJCB:
		*s = CardBrandJCB
	case CardBrandAMEX:
		*s = CardBrandAMEX
	case CardBrandDINERS:
		*s = CardBrandDINERS
	case CardBrandDISCOVER:
		*s = CardBrandDISCOVER
	case CardBrandEmpty:
		*s = CardBrandEmpty
	default:
		*s = CardBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardDefaultFlag as json.
func (s CardDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardDefaultFlag from json.
func (s *CardDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardDefaultFlag(v) {
	case CardDefaultFlag0:
		*s = CardDefaultFlag0
	case CardDefaultFlag1:
		*s = CardDefaultFlag1
	default:
		*s = CardDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentSessionJobCode as json.
func (s CardPaymentSessionJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardPaymentSessionJobCode from json.
func (s *CardPaymentSessionJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardPaymentSessionJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardPaymentSessionJobCode(v) {
	case CardPaymentSessionJobCodeAUTH:
		*s = CardPaymentSessionJobCodeAUTH
	case CardPaymentSessionJobCodeCAPTURE:
		*s = CardPaymentSessionJobCodeCAPTURE
	default:
		*s = CardPaymentSessionJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardPaymentSessionJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardPaymentSessionJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardRegistrationSessionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardRegistrationSessionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.SuccessURL != nil {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL != nil {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName != nil {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.ReceiverMail != nil {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName != nil {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.CompletionMailSendFlag.Set {
			e.FieldStart("completion_mail_send_flag")
			s.CompletionMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID != nil {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerName != nil {
			e.FieldStart("customer_name")
			s.CustomerName.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.TdsType != nil {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type != nil {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange != nil {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate != nil {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange != nil {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount != nil {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge != nil {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay != nil {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage != nil {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd != nil {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity != nil {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay != nil {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear != nil {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData != nil {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod != nil {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch != nil {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry != nil {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState != nil {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity != nil {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1 != nil {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2 != nil {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode != nil {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry != nil {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState != nil {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity != nil {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1 != nil {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2 != nil {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3 != nil {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode != nil {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd != nil {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress != nil {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc != nil {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo != nil {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc != nil {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo != nil {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc != nil {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo != nil {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe != nil {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate != nil {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd != nil {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd != nil {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry != nil {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency != nil {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount != nil {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount != nil {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr != nil {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardRegistrationSessionCreatingRequest = [59]string{
	0:  "success_url",
	1:  "cancel_url",
	2:  "expire",
	3:  "shop_service_name",
	4:  "receiver_mail",
	5:  "mail_customer_name",
	6:  "guide_mail_send_flag",
	7:  "completion_mail_send_flag",
	8:  "shop_mail_template_id",
	9:  "customer_id",
	10: "customer_name",
	11: "td_tenant_name",
	12: "tds_type",
	13: "tds2_type",
	14: "tds2_ch_acc_change",
	15: "tds2_ch_acc_date",
	16: "tds2_ch_acc_pw_change",
	17: "tds2_nb_purchase_account",
	18: "tds2_payment_acc_age",
	19: "tds2_provision_attempts_day",
	20: "tds2_ship_address_usage",
	21: "tds2_ship_name_ind",
	22: "tds2_suspicious_acc_activity",
	23: "tds2_txn_activity_day",
	24: "tds2_txn_activity_year",
	25: "tds2_three_ds_req_auth_data",
	26: "tds2_three_ds_req_auth_method",
	27: "tds2_addr_match",
	28: "tds2_bill_addr_country",
	29: "tds2_bill_addr_state",
	30: "tds2_bill_addr_city",
	31: "tds2_bill_addr_line_1",
	32: "tds2_bill_addr_line_2",
	33: "tds2_bill_addr_line_3",
	34: "tds2_bill_addr_post_code",
	35: "tds2_ship_addr_country",
	36: "tds2_ship_addr_state",
	37: "tds2_ship_addr_city",
	38: "tds2_ship_addr_line_1",
	39: "tds2_ship_addr_line_2",
	40: "tds2_ship_addr_line_3",
	41: "tds2_ship_addr_post_code",
	42: "tds2_ship_ind",
	43: "tds2_delivery_email_address",
	44: "tds2_home_phone_cc",
	45: "tds2_home_phone_no",
	46: "tds2_mobile_phone_cc",
	47: "tds2_mobile_phone_no",
	48: "tds2_work_phone_cc",
	49: "tds2_work_phone_no",
	50: "tds2_delivery_timeframe",
	51: "tds2_pre_order_date",
	52: "tds2_pre_order_purchase_ind",
	53: "tds2_reorder_items_ind",
	54: "tds2_recurring_expiry",
	55: "tds2_recurring_frequency",
	56: "tds2_gift_card_amount",
	57: "tds2_gift_card_count",
	58: "tds2_gift_card_curr",
}

// Decode decodes CardRegistrationSessionCreatingRequest from json.
func (s *CardRegistrationSessionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "success_url":
			if err := func() error {
				s.SuccessURL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SuccessURL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CancelURL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopServiceName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ReceiverMail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.MailCustomerName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "completion_mail_send_flag":
			if err := func() error {
				s.CompletionMailSendFlag.Reset()
				if err := s.CompletionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"completion_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopMailTemplateID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_name":
			if err := func() error {
				s.CustomerName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CustomerName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_name\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType = nil
				var elem NilCardRegistrationSessionCreatingRequestTdsType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TdsType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2Type
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccChange = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccPwChange = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2NbPurchaseAccount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PaymentAccAge = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ProvisionAttemptsDay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddressUsage = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2ShipNameInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipNameInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2SuspiciousAccActivity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2TxnActivityDay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2TxnActivityYear = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ThreeDsReqAuthData = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ThreeDsReqAuthMethod = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2AddrMatch
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2AddrMatch = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrCountry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrState = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrCity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrLine1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrLine2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrPostCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrCountry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrState = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrCity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrPostCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2ShipInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2DeliveryEmailAddress = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2HomePhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2HomePhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2MobilePhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2MobilePhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2WorkPhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2WorkPhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2DeliveryTimeframe = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PreOrderDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PreOrderPurchaseInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd = nil
				var elem NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ReorderItemsInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2RecurringExpiry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2RecurringFrequency = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardCount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardCurr = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardRegistrationSessionCreatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardRegistrationSessionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestCompletionMailSendFlag as json.
func (s CardRegistrationSessionCreatingRequestCompletionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestCompletionMailSendFlag from json.
func (s *CardRegistrationSessionCreatingRequestCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestCompletionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestCompletionMailSendFlag(v) {
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag0:
		*s = CardRegistrationSessionCreatingRequestCompletionMailSendFlag0
	case CardRegistrationSessionCreatingRequestCompletionMailSendFlag1:
		*s = CardRegistrationSessionCreatingRequestCompletionMailSendFlag1
	default:
		*s = CardRegistrationSessionCreatingRequestCompletionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestGuideMailSendFlag as json.
func (s CardRegistrationSessionCreatingRequestGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestGuideMailSendFlag from json.
func (s *CardRegistrationSessionCreatingRequestGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestGuideMailSendFlag(v) {
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag0:
		*s = CardRegistrationSessionCreatingRequestGuideMailSendFlag0
	case CardRegistrationSessionCreatingRequestGuideMailSendFlag1:
		*s = CardRegistrationSessionCreatingRequestGuideMailSendFlag1
	default:
		*s = CardRegistrationSessionCreatingRequestGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2AddrMatch as json.
func (s CardRegistrationSessionCreatingRequestTds2AddrMatch) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2AddrMatch from json.
func (s *CardRegistrationSessionCreatingRequestTds2AddrMatch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2AddrMatch to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2AddrMatch(v) {
	case CardRegistrationSessionCreatingRequestTds2AddrMatchY:
		*s = CardRegistrationSessionCreatingRequestTds2AddrMatchY
	case CardRegistrationSessionCreatingRequestTds2AddrMatchN:
		*s = CardRegistrationSessionCreatingRequestTds2AddrMatchN
	default:
		*s = CardRegistrationSessionCreatingRequestTds2AddrMatch(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe as json.
func (s CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe from json.
func (s *CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe(v) {
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe01
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe02
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe03
	case CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe04
	default:
		*s = CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd as json.
func (s CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd from json.
func (s *CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd(v) {
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01:
		*s = CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd01
	case CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02:
		*s = CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd02
	default:
		*s = CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ReorderItemsInd as json.
func (s CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ReorderItemsInd from json.
func (s *CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2ReorderItemsInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2ReorderItemsInd(v) {
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ReorderItemsInd01
	case CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ReorderItemsInd02
	default:
		*s = CardRegistrationSessionCreatingRequestTds2ReorderItemsInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ShipInd as json.
func (s CardRegistrationSessionCreatingRequestTds2ShipInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ShipInd from json.
func (s *CardRegistrationSessionCreatingRequestTds2ShipInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2ShipInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2ShipInd(v) {
	case CardRegistrationSessionCreatingRequestTds2ShipInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd01
	case CardRegistrationSessionCreatingRequestTds2ShipInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd02
	case CardRegistrationSessionCreatingRequestTds2ShipInd03:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd03
	case CardRegistrationSessionCreatingRequestTds2ShipInd04:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd04
	case CardRegistrationSessionCreatingRequestTds2ShipInd05:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd05
	case CardRegistrationSessionCreatingRequestTds2ShipInd06:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd06
	case CardRegistrationSessionCreatingRequestTds2ShipInd07:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd07
	default:
		*s = CardRegistrationSessionCreatingRequestTds2ShipInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ShipNameInd as json.
func (s CardRegistrationSessionCreatingRequestTds2ShipNameInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ShipNameInd from json.
func (s *CardRegistrationSessionCreatingRequestTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2ShipNameInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2ShipNameInd(v) {
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd01:
		*s = CardRegistrationSessionCreatingRequestTds2ShipNameInd01
	case CardRegistrationSessionCreatingRequestTds2ShipNameInd02:
		*s = CardRegistrationSessionCreatingRequestTds2ShipNameInd02
	default:
		*s = CardRegistrationSessionCreatingRequestTds2ShipNameInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity as json.
func (s CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity from json.
func (s *CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity(v) {
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01:
		*s = CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity01
	case CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02:
		*s = CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity02
	default:
		*s = CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod as json.
func (s CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod from json.
func (s *CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod(v) {
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod01
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod02
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod03
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod04
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod05
	case CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod06
	default:
		*s = CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2Type as json.
func (s CardRegistrationSessionCreatingRequestTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2Type from json.
func (s *CardRegistrationSessionCreatingRequestTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTds2Type(v) {
	case CardRegistrationSessionCreatingRequestTds2Type2:
		*s = CardRegistrationSessionCreatingRequestTds2Type2
	case CardRegistrationSessionCreatingRequestTds2Type3:
		*s = CardRegistrationSessionCreatingRequestTds2Type3
	default:
		*s = CardRegistrationSessionCreatingRequestTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTdsType as json.
func (s CardRegistrationSessionCreatingRequestTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingRequestTdsType from json.
func (s *CardRegistrationSessionCreatingRequestTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingRequestTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingRequestTdsType(v) {
	case CardRegistrationSessionCreatingRequestTdsType0:
		*s = CardRegistrationSessionCreatingRequestTdsType0
	case CardRegistrationSessionCreatingRequestTdsType2:
		*s = CardRegistrationSessionCreatingRequestTdsType2
	default:
		*s = CardRegistrationSessionCreatingRequestTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingRequestTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingRequestTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CardRegistrationSessionCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CardRegistrationSessionCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LinkURL.Set {
			e.FieldStart("link_url")
			s.LinkURL.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.CompletionMailSendFlag.Set {
			e.FieldStart("completion_mail_send_flag")
			s.CompletionMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerName.Set {
			e.FieldStart("customer_name")
			s.CustomerName.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCardRegistrationSessionCreatingResponse = [19]string{
	0:  "id",
	1:  "link_url",
	2:  "success_url",
	3:  "cancel_url",
	4:  "status",
	5:  "expire",
	6:  "shop_service_name",
	7:  "guide_mail_send_flag",
	8:  "receiver_mail",
	9:  "mail_customer_name",
	10: "completion_mail_send_flag",
	11: "shop_mail_template_id",
	12: "customer_id",
	13: "customer_name",
	14: "tds_type",
	15: "td_tenant_name",
	16: "tds2_type",
	17: "created",
	18: "updated",
}

// Decode decodes CardRegistrationSessionCreatingResponse from json.
func (s *CardRegistrationSessionCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "link_url":
			if err := func() error {
				s.LinkURL.Reset()
				if err := s.LinkURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_url\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "completion_mail_send_flag":
			if err := func() error {
				s.CompletionMailSendFlag.Reset()
				if err := s.CompletionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"completion_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_name":
			if err := func() error {
				s.CustomerName.Reset()
				if err := s.CustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_name\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CardRegistrationSessionCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CardRegistrationSessionCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseCompletionMailSendFlag as json.
func (s CardRegistrationSessionCreatingResponseCompletionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingResponseCompletionMailSendFlag from json.
func (s *CardRegistrationSessionCreatingResponseCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingResponseCompletionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingResponseCompletionMailSendFlag(v) {
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag0:
		*s = CardRegistrationSessionCreatingResponseCompletionMailSendFlag0
	case CardRegistrationSessionCreatingResponseCompletionMailSendFlag1:
		*s = CardRegistrationSessionCreatingResponseCompletionMailSendFlag1
	default:
		*s = CardRegistrationSessionCreatingResponseCompletionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingResponseCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingResponseCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseGuideMailSendFlag as json.
func (s CardRegistrationSessionCreatingResponseGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingResponseGuideMailSendFlag from json.
func (s *CardRegistrationSessionCreatingResponseGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingResponseGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingResponseGuideMailSendFlag(v) {
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag0:
		*s = CardRegistrationSessionCreatingResponseGuideMailSendFlag0
	case CardRegistrationSessionCreatingResponseGuideMailSendFlag1:
		*s = CardRegistrationSessionCreatingResponseGuideMailSendFlag1
	default:
		*s = CardRegistrationSessionCreatingResponseGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingResponseGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingResponseGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseStatus as json.
func (s CardRegistrationSessionCreatingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardRegistrationSessionCreatingResponseStatus from json.
func (s *CardRegistrationSessionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardRegistrationSessionCreatingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardRegistrationSessionCreatingResponseStatus(v) {
	case CardRegistrationSessionCreatingResponseStatusCREATE:
		*s = CardRegistrationSessionCreatingResponseStatusCREATE
	default:
		*s = CardRegistrationSessionCreatingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardRegistrationSessionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardRegistrationSessionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardType as json.
func (s CardType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CardType from json.
func (s *CardType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CardType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CardType(v) {
	case CardType0:
		*s = CardType0
	case CardType1:
		*s = CardType1
	case CardType2:
		*s = CardType2
	case CardType3:
		*s = CardType3
	default:
		*s = CardType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK as json.
func (s ChangeAmountOfPaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK0.Encode(e)
	case ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK1.Encode(e)
	case ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK2.Encode(e)
	}
}

func (s ChangeAmountOfPaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK0.encodeFields(e)
	case ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK1.encodeFields(e)
	case ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK:
		s.ChangeAmountOfPaymentOK2.encodeFields(e)
	}
}

// Decode decodes ChangeAmountOfPaymentOK from json.
func (s *ChangeAmountOfPaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "brand":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "card_no":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "expire":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "holder_name":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "card_no_hash":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "method":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "forward":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "issuer":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transaction_id":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "approve":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "item_code":
				match := ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_date":
				match := ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK0.Decode(d); err != nil {
			return err
		}
	case ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK1.Decode(d); err != nil {
			return err
		}
	case ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentOK0) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentOK0 = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes ChangeAmountOfPaymentOK0 from json.
func (s *ChangeAmountOfPaymentOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Brand as json.
func (s ChangeAmountOfPaymentOK0Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0Brand from json.
func (s *ChangeAmountOfPaymentOK0Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0Brand(v) {
	case ChangeAmountOfPaymentOK0BrandVISA:
		*s = ChangeAmountOfPaymentOK0BrandVISA
	case ChangeAmountOfPaymentOK0BrandMASTER:
		*s = ChangeAmountOfPaymentOK0BrandMASTER
	case ChangeAmountOfPaymentOK0BrandJCB:
		*s = ChangeAmountOfPaymentOK0BrandJCB
	case ChangeAmountOfPaymentOK0BrandAMEX:
		*s = ChangeAmountOfPaymentOK0BrandAMEX
	case ChangeAmountOfPaymentOK0BrandDINERS:
		*s = ChangeAmountOfPaymentOK0BrandDINERS
	case ChangeAmountOfPaymentOK0BrandDISCOVER:
		*s = ChangeAmountOfPaymentOK0BrandDISCOVER
	case ChangeAmountOfPaymentOK0BrandEmpty:
		*s = ChangeAmountOfPaymentOK0BrandEmpty
	default:
		*s = ChangeAmountOfPaymentOK0Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0JobCode as json.
func (s ChangeAmountOfPaymentOK0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0JobCode from json.
func (s *ChangeAmountOfPaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0JobCode(v) {
	case ChangeAmountOfPaymentOK0JobCodeCHECK:
		*s = ChangeAmountOfPaymentOK0JobCodeCHECK
	case ChangeAmountOfPaymentOK0JobCodeAUTH:
		*s = ChangeAmountOfPaymentOK0JobCodeAUTH
	case ChangeAmountOfPaymentOK0JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentOK0JobCodeCAPTURE
	default:
		*s = ChangeAmountOfPaymentOK0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Method as json.
func (s ChangeAmountOfPaymentOK0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0Method from json.
func (s *ChangeAmountOfPaymentOK0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0Method(v) {
	case ChangeAmountOfPaymentOK0Method1:
		*s = ChangeAmountOfPaymentOK0Method1
	case ChangeAmountOfPaymentOK0Method2:
		*s = ChangeAmountOfPaymentOK0Method2
	case ChangeAmountOfPaymentOK0Method5:
		*s = ChangeAmountOfPaymentOK0Method5
	default:
		*s = ChangeAmountOfPaymentOK0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0PayTimes as json.
func (s ChangeAmountOfPaymentOK0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0PayTimes from json.
func (s *ChangeAmountOfPaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0PayTimes(v) {
	case ChangeAmountOfPaymentOK0PayTimes3:
		*s = ChangeAmountOfPaymentOK0PayTimes3
	case ChangeAmountOfPaymentOK0PayTimes5:
		*s = ChangeAmountOfPaymentOK0PayTimes5
	case ChangeAmountOfPaymentOK0PayTimes6:
		*s = ChangeAmountOfPaymentOK0PayTimes6
	case ChangeAmountOfPaymentOK0PayTimes10:
		*s = ChangeAmountOfPaymentOK0PayTimes10
	case ChangeAmountOfPaymentOK0PayTimes12:
		*s = ChangeAmountOfPaymentOK0PayTimes12
	case ChangeAmountOfPaymentOK0PayTimes15:
		*s = ChangeAmountOfPaymentOK0PayTimes15
	case ChangeAmountOfPaymentOK0PayTimes18:
		*s = ChangeAmountOfPaymentOK0PayTimes18
	case ChangeAmountOfPaymentOK0PayTimes20:
		*s = ChangeAmountOfPaymentOK0PayTimes20
	case ChangeAmountOfPaymentOK0PayTimes24:
		*s = ChangeAmountOfPaymentOK0PayTimes24
	default:
		*s = ChangeAmountOfPaymentOK0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0PayType as json.
func (s ChangeAmountOfPaymentOK0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0PayType from json.
func (s *ChangeAmountOfPaymentOK0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0PayType(v) {
	case ChangeAmountOfPaymentOK0PayTypeCard:
		*s = ChangeAmountOfPaymentOK0PayTypeCard
	case ChangeAmountOfPaymentOK0PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK0PayTypeKonbini
	case ChangeAmountOfPaymentOK0PayTypePaypay:
		*s = ChangeAmountOfPaymentOK0PayTypePaypay
	case ChangeAmountOfPaymentOK0PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK0PayTypeApplepay
	case ChangeAmountOfPaymentOK0PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK0PayTypeDirectdebit
	case ChangeAmountOfPaymentOK0PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK0PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentOK0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Status as json.
func (s ChangeAmountOfPaymentOK0Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0Status from json.
func (s *ChangeAmountOfPaymentOK0Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0Status(v) {
	case ChangeAmountOfPaymentOK0StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK0StatusUNPROCESSED
	case ChangeAmountOfPaymentOK0StatusCHECKED:
		*s = ChangeAmountOfPaymentOK0StatusCHECKED
	case ChangeAmountOfPaymentOK0StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK0StatusAUTHORIZED
	case ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK0StatusAWAITINGCUSTOMERPAYMENT
	case ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK0StatusAWAITINGPAYMENTAPPROVAL
	case ChangeAmountOfPaymentOK0StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK0StatusCAPTURED
	case ChangeAmountOfPaymentOK0StatusCANCELED:
		*s = ChangeAmountOfPaymentOK0StatusCANCELED
	case ChangeAmountOfPaymentOK0StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK0StatusEXPIRED
	case ChangeAmountOfPaymentOK0StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK0StatusAUTHENTICATED
	case ChangeAmountOfPaymentOK0StatusFAILED:
		*s = ChangeAmountOfPaymentOK0StatusFAILED
	default:
		*s = ChangeAmountOfPaymentOK0Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Tds2Status as json.
func (s ChangeAmountOfPaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0Tds2Status from json.
func (s *ChangeAmountOfPaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0Tds2Status(v) {
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING:
		*s = ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATING
	case ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE:
		*s = ChangeAmountOfPaymentOK0Tds2StatusCHALLENGE
	case ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK0Tds2StatusAUTHENTICATED
	default:
		*s = ChangeAmountOfPaymentOK0Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Tds2Type as json.
func (s ChangeAmountOfPaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0Tds2Type from json.
func (s *ChangeAmountOfPaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0Tds2Type(v) {
	case ChangeAmountOfPaymentOK0Tds2Type2:
		*s = ChangeAmountOfPaymentOK0Tds2Type2
	case ChangeAmountOfPaymentOK0Tds2Type3:
		*s = ChangeAmountOfPaymentOK0Tds2Type3
	default:
		*s = ChangeAmountOfPaymentOK0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0TdsType as json.
func (s ChangeAmountOfPaymentOK0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK0TdsType from json.
func (s *ChangeAmountOfPaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK0TdsType(v) {
	case ChangeAmountOfPaymentOK0TdsType0:
		*s = ChangeAmountOfPaymentOK0TdsType0
	case ChangeAmountOfPaymentOK0TdsType2:
		*s = ChangeAmountOfPaymentOK0TdsType2
	default:
		*s = ChangeAmountOfPaymentOK0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentOK1) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentOK1 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes ChangeAmountOfPaymentOK1 from json.
func (s *ChangeAmountOfPaymentOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1JobCode as json.
func (s ChangeAmountOfPaymentOK1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK1JobCode from json.
func (s *ChangeAmountOfPaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK1JobCode(v) {
	case ChangeAmountOfPaymentOK1JobCodeAUTH:
		*s = ChangeAmountOfPaymentOK1JobCodeAUTH
	case ChangeAmountOfPaymentOK1JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentOK1JobCodeCAPTURE
	default:
		*s = ChangeAmountOfPaymentOK1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1PayType as json.
func (s ChangeAmountOfPaymentOK1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK1PayType from json.
func (s *ChangeAmountOfPaymentOK1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK1PayType(v) {
	case ChangeAmountOfPaymentOK1PayTypeCard:
		*s = ChangeAmountOfPaymentOK1PayTypeCard
	case ChangeAmountOfPaymentOK1PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK1PayTypeKonbini
	case ChangeAmountOfPaymentOK1PayTypePaypay:
		*s = ChangeAmountOfPaymentOK1PayTypePaypay
	case ChangeAmountOfPaymentOK1PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK1PayTypeApplepay
	case ChangeAmountOfPaymentOK1PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK1PayTypeDirectdebit
	case ChangeAmountOfPaymentOK1PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK1PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentOK1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1RedirectType as json.
func (s ChangeAmountOfPaymentOK1RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK1RedirectType from json.
func (s *ChangeAmountOfPaymentOK1RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK1RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK1RedirectType(v) {
	case ChangeAmountOfPaymentOK1RedirectType1:
		*s = ChangeAmountOfPaymentOK1RedirectType1
	case ChangeAmountOfPaymentOK1RedirectType2:
		*s = ChangeAmountOfPaymentOK1RedirectType2
	default:
		*s = ChangeAmountOfPaymentOK1RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK1RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK1RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1Status as json.
func (s ChangeAmountOfPaymentOK1Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK1Status from json.
func (s *ChangeAmountOfPaymentOK1Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK1Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK1Status(v) {
	case ChangeAmountOfPaymentOK1StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK1StatusUNPROCESSED
	case ChangeAmountOfPaymentOK1StatusCHECKED:
		*s = ChangeAmountOfPaymentOK1StatusCHECKED
	case ChangeAmountOfPaymentOK1StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK1StatusAUTHORIZED
	case ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK1StatusAWAITINGCUSTOMERPAYMENT
	case ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK1StatusAWAITINGPAYMENTAPPROVAL
	case ChangeAmountOfPaymentOK1StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK1StatusCAPTURED
	case ChangeAmountOfPaymentOK1StatusCANCELED:
		*s = ChangeAmountOfPaymentOK1StatusCANCELED
	case ChangeAmountOfPaymentOK1StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK1StatusEXPIRED
	case ChangeAmountOfPaymentOK1StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK1StatusAUTHENTICATED
	case ChangeAmountOfPaymentOK1StatusFAILED:
		*s = ChangeAmountOfPaymentOK1StatusFAILED
	default:
		*s = ChangeAmountOfPaymentOK1Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentOK2) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentOK2 = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes ChangeAmountOfPaymentOK2 from json.
func (s *ChangeAmountOfPaymentOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2PayType as json.
func (s ChangeAmountOfPaymentOK2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK2PayType from json.
func (s *ChangeAmountOfPaymentOK2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK2PayType(v) {
	case ChangeAmountOfPaymentOK2PayTypeCard:
		*s = ChangeAmountOfPaymentOK2PayTypeCard
	case ChangeAmountOfPaymentOK2PayTypeKonbini:
		*s = ChangeAmountOfPaymentOK2PayTypeKonbini
	case ChangeAmountOfPaymentOK2PayTypePaypay:
		*s = ChangeAmountOfPaymentOK2PayTypePaypay
	case ChangeAmountOfPaymentOK2PayTypeApplepay:
		*s = ChangeAmountOfPaymentOK2PayTypeApplepay
	case ChangeAmountOfPaymentOK2PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentOK2PayTypeDirectdebit
	case ChangeAmountOfPaymentOK2PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentOK2PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentOK2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2ResultCode as json.
func (s ChangeAmountOfPaymentOK2ResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK2ResultCode from json.
func (s *ChangeAmountOfPaymentOK2ResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK2ResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK2ResultCode(v) {
	case ChangeAmountOfPaymentOK2ResultCode0:
		*s = ChangeAmountOfPaymentOK2ResultCode0
	case ChangeAmountOfPaymentOK2ResultCode1:
		*s = ChangeAmountOfPaymentOK2ResultCode1
	case ChangeAmountOfPaymentOK2ResultCode2:
		*s = ChangeAmountOfPaymentOK2ResultCode2
	case ChangeAmountOfPaymentOK2ResultCode3:
		*s = ChangeAmountOfPaymentOK2ResultCode3
	case ChangeAmountOfPaymentOK2ResultCode4:
		*s = ChangeAmountOfPaymentOK2ResultCode4
	case ChangeAmountOfPaymentOK2ResultCode8:
		*s = ChangeAmountOfPaymentOK2ResultCode8
	case ChangeAmountOfPaymentOK2ResultCode9:
		*s = ChangeAmountOfPaymentOK2ResultCode9
	case ChangeAmountOfPaymentOK2ResultCodeE:
		*s = ChangeAmountOfPaymentOK2ResultCodeE
	case ChangeAmountOfPaymentOK2ResultCodeN:
		*s = ChangeAmountOfPaymentOK2ResultCodeN
	default:
		*s = ChangeAmountOfPaymentOK2ResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK2ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK2ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2Status as json.
func (s ChangeAmountOfPaymentOK2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentOK2Status from json.
func (s *ChangeAmountOfPaymentOK2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentOK2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentOK2Status(v) {
	case ChangeAmountOfPaymentOK2StatusUNPROCESSED:
		*s = ChangeAmountOfPaymentOK2StatusUNPROCESSED
	case ChangeAmountOfPaymentOK2StatusCHECKED:
		*s = ChangeAmountOfPaymentOK2StatusCHECKED
	case ChangeAmountOfPaymentOK2StatusAUTHORIZED:
		*s = ChangeAmountOfPaymentOK2StatusAUTHORIZED
	case ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = ChangeAmountOfPaymentOK2StatusAWAITINGCUSTOMERPAYMENT
	case ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = ChangeAmountOfPaymentOK2StatusAWAITINGPAYMENTAPPROVAL
	case ChangeAmountOfPaymentOK2StatusCAPTURED:
		*s = ChangeAmountOfPaymentOK2StatusCAPTURED
	case ChangeAmountOfPaymentOK2StatusCANCELED:
		*s = ChangeAmountOfPaymentOK2StatusCANCELED
	case ChangeAmountOfPaymentOK2StatusEXPIRED:
		*s = ChangeAmountOfPaymentOK2StatusEXPIRED
	case ChangeAmountOfPaymentOK2StatusAUTHENTICATED:
		*s = ChangeAmountOfPaymentOK2StatusAUTHENTICATED
	case ChangeAmountOfPaymentOK2StatusFAILED:
		*s = ChangeAmountOfPaymentOK2StatusFAILED
	default:
		*s = ChangeAmountOfPaymentOK2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq as json.
func (s ChangeAmountOfPaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq0.Encode(e)
	case ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq1.Encode(e)
	case ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq2.Encode(e)
	}
}

func (s ChangeAmountOfPaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq0.encodeFields(e)
	case ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq1.encodeFields(e)
	case ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq:
		s.ChangeAmountOfPaymentReq2.encodeFields(e)
	}
}

// Decode decodes ChangeAmountOfPaymentReq from json.
func (s *ChangeAmountOfPaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "job_code":
				match := ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq
	}
	switch s.Type {
	case ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq0.Decode(d); err != nil {
			return err
		}
	case ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq1.Decode(d); err != nil {
			return err
		}
	case ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq2.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentReq0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentReq0 = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
	4: "job_code",
}

// Decode decodes ChangeAmountOfPaymentReq0 from json.
func (s *ChangeAmountOfPaymentReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq0 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentReq0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfChangeAmountOfPaymentReq0) {
					name = jsonFieldsNameOfChangeAmountOfPaymentReq0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq0JobCode as json.
func (s ChangeAmountOfPaymentReq0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentReq0JobCode from json.
func (s *ChangeAmountOfPaymentReq0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentReq0JobCode(v) {
	case ChangeAmountOfPaymentReq0JobCodeCHECK:
		*s = ChangeAmountOfPaymentReq0JobCodeCHECK
	case ChangeAmountOfPaymentReq0JobCodeAUTH:
		*s = ChangeAmountOfPaymentReq0JobCodeAUTH
	case ChangeAmountOfPaymentReq0JobCodeCAPTURE:
		*s = ChangeAmountOfPaymentReq0JobCodeCAPTURE
	default:
		*s = ChangeAmountOfPaymentReq0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq0PayType as json.
func (s ChangeAmountOfPaymentReq0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentReq0PayType from json.
func (s *ChangeAmountOfPaymentReq0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentReq0PayType(v) {
	case ChangeAmountOfPaymentReq0PayTypeCard:
		*s = ChangeAmountOfPaymentReq0PayTypeCard
	case ChangeAmountOfPaymentReq0PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq0PayTypeKonbini
	case ChangeAmountOfPaymentReq0PayTypePaypay:
		*s = ChangeAmountOfPaymentReq0PayTypePaypay
	case ChangeAmountOfPaymentReq0PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq0PayTypeApplepay
	case ChangeAmountOfPaymentReq0PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq0PayTypeDirectdebit
	case ChangeAmountOfPaymentReq0PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq0PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentReq0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentReq1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.UpdateDescription != nil {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentReq1 = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
	4: "update_description",
}

// Decode decodes ChangeAmountOfPaymentReq1 from json.
func (s *ChangeAmountOfPaymentReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UpdateDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentReq1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfChangeAmountOfPaymentReq1) {
					name = jsonFieldsNameOfChangeAmountOfPaymentReq1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq1PayType as json.
func (s ChangeAmountOfPaymentReq1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentReq1PayType from json.
func (s *ChangeAmountOfPaymentReq1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentReq1PayType(v) {
	case ChangeAmountOfPaymentReq1PayTypeCard:
		*s = ChangeAmountOfPaymentReq1PayTypeCard
	case ChangeAmountOfPaymentReq1PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq1PayTypeKonbini
	case ChangeAmountOfPaymentReq1PayTypePaypay:
		*s = ChangeAmountOfPaymentReq1PayTypePaypay
	case ChangeAmountOfPaymentReq1PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq1PayTypeApplepay
	case ChangeAmountOfPaymentReq1PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq1PayTypeDirectdebit
	case ChangeAmountOfPaymentReq1PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq1PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentReq1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ChangeAmountOfPaymentReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ChangeAmountOfPaymentReq2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
}

var jsonFieldsNameOfChangeAmountOfPaymentReq2 = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "amount",
	3: "tax",
}

// Decode decodes ChangeAmountOfPaymentReq2 from json.
func (s *ChangeAmountOfPaymentReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ChangeAmountOfPaymentReq2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfChangeAmountOfPaymentReq2) {
					name = jsonFieldsNameOfChangeAmountOfPaymentReq2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ChangeAmountOfPaymentReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentReq2PayType as json.
func (s ChangeAmountOfPaymentReq2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ChangeAmountOfPaymentReq2PayType from json.
func (s *ChangeAmountOfPaymentReq2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ChangeAmountOfPaymentReq2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ChangeAmountOfPaymentReq2PayType(v) {
	case ChangeAmountOfPaymentReq2PayTypeCard:
		*s = ChangeAmountOfPaymentReq2PayTypeCard
	case ChangeAmountOfPaymentReq2PayTypeKonbini:
		*s = ChangeAmountOfPaymentReq2PayTypeKonbini
	case ChangeAmountOfPaymentReq2PayTypePaypay:
		*s = ChangeAmountOfPaymentReq2PayTypePaypay
	case ChangeAmountOfPaymentReq2PayTypeApplepay:
		*s = ChangeAmountOfPaymentReq2PayTypeApplepay
	case ChangeAmountOfPaymentReq2PayTypeDirectdebit:
		*s = ChangeAmountOfPaymentReq2PayTypeDirectdebit
	case ChangeAmountOfPaymentReq2PayTypeVirtualaccount:
		*s = ChangeAmountOfPaymentReq2PayTypeVirtualaccount
	default:
		*s = ChangeAmountOfPaymentReq2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ChangeAmountOfPaymentReq2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ChangeAmountOfPaymentReq2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContentInfoV2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContentInfoV2) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
}

var jsonFieldsNameOfContentInfoV2 = [9]string{
	0: "content1_name",
	1: "content1_description",
	2: "content1_unit_price",
	3: "content2_name",
	4: "content2_description",
	5: "content2_unit_price",
	6: "content3_name",
	7: "content3_description",
	8: "content3_unit_price",
}

// Decode decodes ContentInfoV2 from json.
func (s *ContentInfoV2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContentInfoV2 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContentInfoV2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContentInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContentInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Examination != nil {
			e.FieldStart("examination")
			e.ArrStart()
			for _, elem := range s.Examination {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.AvailableStatusCode.Set {
			e.FieldStart("available_status_code")
			s.AvailableStatusCode.Encode(e)
		}
	}
	{
		if s.CreateDate.Set {
			e.FieldStart("create_date")
			s.CreateDate.Encode(e)
		}
	}
	{
		if s.ContractedAt.Set {
			e.FieldStart("contracted_at")
			s.ContractedAt.Encode(e)
		}
	}
	{
		if s.StartChargingAt.Set {
			e.FieldStart("start_charging_at")
			s.StartChargingAt.Encode(e)
		}
	}
	{
		if s.ExpiredAt.Set {
			e.FieldStart("expired_at")
			s.ExpiredAt.Encode(e)
		}
	}
	{
		if s.SalesDepositStatusCode.Set {
			e.FieldStart("sales_deposit_status_code")
			s.SalesDepositStatusCode.Encode(e)
		}
	}
	{
		if s.SalesDepositStatusUpdatedDate.Set {
			e.FieldStart("sales_deposit_status_updated_date")
			s.SalesDepositStatusUpdatedDate.Encode(e)
		}
	}
	{
		if s.DeniedAt.Set {
			e.FieldStart("denied_at")
			s.DeniedAt.Encode(e)
		}
	}
	{
		if s.SuspendedBilling.Set {
			e.FieldStart("suspended_billing")
			s.SuspendedBilling.Encode(e)
		}
	}
	{
		if s.SuspendedBillingDate.Set {
			e.FieldStart("suspended_billing_date")
			s.SuspendedBillingDate.Encode(e)
		}
	}
	{
		if s.SuspendedPayment.Set {
			e.FieldStart("suspended_payment")
			s.SuspendedPayment.Encode(e)
		}
	}
	{
		if s.SuspendedPaymentDate.Set {
			e.FieldStart("suspended_payment_date")
			s.SuspendedPaymentDate.Encode(e)
		}
	}
	{
		if s.SuspendedService.Set {
			e.FieldStart("suspended_service")
			s.SuspendedService.Encode(e)
		}
	}
	{
		if s.SuspendedServiceDate.Set {
			e.FieldStart("suspended_service_date")
			s.SuspendedServiceDate.Encode(e)
		}
	}
	{
		if s.SuspededImmediateUse.Set {
			e.FieldStart("suspeded_immediate_use")
			s.SuspededImmediateUse.Encode(e)
		}
	}
	{
		if s.SuspendedImmediateUseDate.Set {
			e.FieldStart("suspended_immediate_use_date")
			s.SuspendedImmediateUseDate.Encode(e)
		}
	}
	{
		if s.StopCancelaltionMemo.Set {
			e.FieldStart("stop_cancelaltion_memo")
			s.StopCancelaltionMemo.Encode(e)
		}
	}
	{
		if s.ObligationsNotice.Set {
			e.FieldStart("obligations_notice")
			s.ObligationsNotice.Encode(e)
		}
	}
	{
		if s.UserShopName.Set {
			e.FieldStart("user_shop_name")
			s.UserShopName.Encode(e)
		}
	}
	{
		if s.RegisterMail.Set {
			e.FieldStart("register_mail")
			s.RegisterMail.Encode(e)
		}
	}
	{
		if s.PlatformReprentativeShop.Set {
			e.FieldStart("platform_reprentative_shop")
			s.PlatformReprentativeShop.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag != nil {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
	{
		if s.ContractVirtualBank.Set {
			e.FieldStart("contract_virtual_bank")
			s.ContractVirtualBank.Encode(e)
		}
	}
	{
		if s.ContractCardDestination != nil {
			e.FieldStart("contract_card_destination")
			e.ArrStart()
			for _, elem := range s.ContractCardDestination {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.CreditCardSetting.Set {
			e.FieldStart("credit_card_setting")
			s.CreditCardSetting.Encode(e)
		}
	}
	{
		if s.OfficialRegisteredCorporateInfo.Set {
			e.FieldStart("official_registered_corporate_info")
			s.OfficialRegisteredCorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponse = [33]string{
	0:  "shop_id",
	1:  "platform_id",
	2:  "shop_type",
	3:  "status_code",
	4:  "examination",
	5:  "available_status_code",
	6:  "create_date",
	7:  "contracted_at",
	8:  "start_charging_at",
	9:  "expired_at",
	10: "sales_deposit_status_code",
	11: "sales_deposit_status_updated_date",
	12: "denied_at",
	13: "suspended_billing",
	14: "suspended_billing_date",
	15: "suspended_payment",
	16: "suspended_payment_date",
	17: "suspended_service",
	18: "suspended_service_date",
	19: "suspeded_immediate_use",
	20: "suspended_immediate_use_date",
	21: "stop_cancelaltion_memo",
	22: "obligations_notice",
	23: "user_shop_name",
	24: "register_mail",
	25: "platform_reprentative_shop",
	26: "shared_customer_flag",
	27: "contract_detail",
	28: "contract_bank_account",
	29: "contract_virtual_bank",
	30: "contract_card_destination",
	31: "credit_card_setting",
	32: "official_registered_corporate_info",
}

// Decode decodes ContractsRetrievingResponse from json.
func (s *ContractsRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "examination":
			if err := func() error {
				s.Examination = make([]ContractsRetrievingResponseExaminationItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContractsRetrievingResponseExaminationItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Examination = append(s.Examination, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination\"")
			}
		case "available_status_code":
			if err := func() error {
				s.AvailableStatusCode.Reset()
				if err := s.AvailableStatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available_status_code\"")
			}
		case "create_date":
			if err := func() error {
				s.CreateDate.Reset()
				if err := s.CreateDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"create_date\"")
			}
		case "contracted_at":
			if err := func() error {
				s.ContractedAt.Reset()
				if err := s.ContractedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contracted_at\"")
			}
		case "start_charging_at":
			if err := func() error {
				s.StartChargingAt.Reset()
				if err := s.StartChargingAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_charging_at\"")
			}
		case "expired_at":
			if err := func() error {
				s.ExpiredAt.Reset()
				if err := s.ExpiredAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expired_at\"")
			}
		case "sales_deposit_status_code":
			if err := func() error {
				s.SalesDepositStatusCode.Reset()
				if err := s.SalesDepositStatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sales_deposit_status_code\"")
			}
		case "sales_deposit_status_updated_date":
			if err := func() error {
				s.SalesDepositStatusUpdatedDate.Reset()
				if err := s.SalesDepositStatusUpdatedDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sales_deposit_status_updated_date\"")
			}
		case "denied_at":
			if err := func() error {
				s.DeniedAt.Reset()
				if err := s.DeniedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"denied_at\"")
			}
		case "suspended_billing":
			if err := func() error {
				s.SuspendedBilling.Reset()
				if err := s.SuspendedBilling.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_billing\"")
			}
		case "suspended_billing_date":
			if err := func() error {
				s.SuspendedBillingDate.Reset()
				if err := s.SuspendedBillingDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_billing_date\"")
			}
		case "suspended_payment":
			if err := func() error {
				s.SuspendedPayment.Reset()
				if err := s.SuspendedPayment.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_payment\"")
			}
		case "suspended_payment_date":
			if err := func() error {
				s.SuspendedPaymentDate.Reset()
				if err := s.SuspendedPaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_payment_date\"")
			}
		case "suspended_service":
			if err := func() error {
				s.SuspendedService.Reset()
				if err := s.SuspendedService.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_service\"")
			}
		case "suspended_service_date":
			if err := func() error {
				s.SuspendedServiceDate.Reset()
				if err := s.SuspendedServiceDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_service_date\"")
			}
		case "suspeded_immediate_use":
			if err := func() error {
				s.SuspededImmediateUse.Reset()
				if err := s.SuspededImmediateUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspeded_immediate_use\"")
			}
		case "suspended_immediate_use_date":
			if err := func() error {
				s.SuspendedImmediateUseDate.Reset()
				if err := s.SuspendedImmediateUseDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"suspended_immediate_use_date\"")
			}
		case "stop_cancelaltion_memo":
			if err := func() error {
				s.StopCancelaltionMemo.Reset()
				if err := s.StopCancelaltionMemo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_cancelaltion_memo\"")
			}
		case "obligations_notice":
			if err := func() error {
				s.ObligationsNotice.Reset()
				if err := s.ObligationsNotice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"obligations_notice\"")
			}
		case "user_shop_name":
			if err := func() error {
				s.UserShopName.Reset()
				if err := s.UserShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_shop_name\"")
			}
		case "register_mail":
			if err := func() error {
				s.RegisterMail.Reset()
				if err := s.RegisterMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"register_mail\"")
			}
		case "platform_reprentative_shop":
			if err := func() error {
				s.PlatformReprentativeShop.Reset()
				if err := s.PlatformReprentativeShop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_reprentative_shop\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag = nil
				var elem NilContractsRetrievingResponseSharedCustomerFlag
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SharedCustomerFlag = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		case "contract_virtual_bank":
			if err := func() error {
				s.ContractVirtualBank.Reset()
				if err := s.ContractVirtualBank.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_virtual_bank\"")
			}
		case "contract_card_destination":
			if err := func() error {
				s.ContractCardDestination = make([]ContractsRetrievingResponseContractCardDestinationItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ContractsRetrievingResponseContractCardDestinationItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ContractCardDestination = append(s.ContractCardDestination, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_card_destination\"")
			}
		case "credit_card_setting":
			if err := func() error {
				s.CreditCardSetting.Reset()
				if err := s.CreditCardSetting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credit_card_setting\"")
			}
		case "official_registered_corporate_info":
			if err := func() error {
				s.OfficialRegisteredCorporateInfo.Reset()
				if err := s.OfficialRegisteredCorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"official_registered_corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseAvailableStatusCode as json.
func (s ContractsRetrievingResponseAvailableStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractsRetrievingResponseAvailableStatusCode from json.
func (s *ContractsRetrievingResponseAvailableStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseAvailableStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseAvailableStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseAvailableStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseAvailableStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseContractBankAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseContractBankAccount) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseContractBankAccount = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ContractsRetrievingResponseContractBankAccount from json.
func (s *ContractsRetrievingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractBankAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseContractBankAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractBankAccountAccountKind as json.
func (s ContractsRetrievingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractsRetrievingResponseContractBankAccountAccountKind from json.
func (s *ContractsRetrievingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractBankAccountAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseContractBankAccountAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseContractCardDestinationItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseContractCardDestinationItem) encodeFields(e *jx.Encoder) {
	{
		if s.ContractCardInfoMasterID.Set {
			e.FieldStart("contract_card_info_master_id")
			s.ContractCardInfoMasterID.Encode(e)
		}
	}
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.Destination.Set {
			e.FieldStart("destination")
			s.Destination.Encode(e)
		}
	}
	{
		if s.DestinationType.Set {
			e.FieldStart("destination_type")
			s.DestinationType.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseContractCardDestinationItem = [4]string{
	0: "contract_card_info_master_id",
	1: "examination_master_id",
	2: "destination",
	3: "destination_type",
}

// Decode decodes ContractsRetrievingResponseContractCardDestinationItem from json.
func (s *ContractsRetrievingResponseContractCardDestinationItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractCardDestinationItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "contract_card_info_master_id":
			if err := func() error {
				s.ContractCardInfoMasterID.Reset()
				if err := s.ContractCardInfoMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_card_info_master_id\"")
			}
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "destination":
			if err := func() error {
				s.Destination.Reset()
				if err := s.Destination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"destination\"")
			}
		case "destination_type":
			if err := func() error {
				s.DestinationType.Reset()
				if err := s.DestinationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"destination_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseContractCardDestinationItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseContractCardDestinationItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractCardDestinationItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID as json.
func (s ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID from json.
func (s *ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID(v) {
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDVM
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDJad
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayVM
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDApplepayJad
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDKonbini
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDPaypay
	case ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterIDDirectdebit
	default:
		*s = ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber != nil {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp != nil {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital != nil {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt != nil {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales != nil {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails != nil {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode != nil {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture != nil {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana != nil {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality != nil {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana != nil {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection != nil {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana != nil {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome != nil {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana != nil {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName != nil {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana != nil {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel != nil {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName != nil {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana != nil {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName != nil {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana != nil {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday != nil {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender != nil {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode != nil {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture != nil {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana != nil {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality != nil {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana != nil {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection != nil {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana != nil {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome != nil {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana != nil {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel != nil {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName != nil {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana != nil {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName != nil {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana != nil {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel != nil {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail != nil {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName != nil {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana != nil {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName != nil {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana != nil {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel != nil {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail != nil {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp != nil {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb != nil {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL != nil {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential != nil {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel != nil {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail != nil {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct != nil {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService != nil {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent != nil {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid != nil {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice != nil {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription != nil {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint != nil {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint != nil {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial != nil {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent != nil {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent != nil {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ContractsRetrievingResponseContractDetail from json.
func (s *ContractsRetrievingResponseContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CorporateNumber = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Hp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Capital = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.EstablishedAt = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.YearlySales = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BusinessDetails = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeBirthday = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender = nil
				var elem NilContractsRetrievingResponseContractDetailRepresentativeGender
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeGender = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnApp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnWeb = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.URL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SiteCredential = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportMail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesProduct = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesService = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesDigitalContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prepaid = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UnitPrice = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ContentDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExpiretionDateOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsageOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.LostTrial = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsInsecureContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsLongApplyContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailPayBy as json.
func (s ContractsRetrievingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractsRetrievingResponseContractDetailPayBy from json.
func (s *ContractsRetrievingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractDetailPayBy to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseContractDetailPayBy(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailRepresentativeGender as json.
func (s ContractsRetrievingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractsRetrievingResponseContractDetailRepresentativeGender from json.
func (s *ContractsRetrievingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractDetailRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseContractDetailRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailSiteExisting as json.
func (s ContractsRetrievingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractsRetrievingResponseContractDetailSiteExisting from json.
func (s *ContractsRetrievingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseContractVirtualBank) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseContractVirtualBank) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseContractVirtualBank = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ContractsRetrievingResponseContractVirtualBank from json.
func (s *ContractsRetrievingResponseContractVirtualBank) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractVirtualBank to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseContractVirtualBank")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseContractVirtualBank) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractVirtualBank) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractVirtualBankAccountKind as json.
func (s ContractsRetrievingResponseContractVirtualBankAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ContractsRetrievingResponseContractVirtualBankAccountKind from json.
func (s *ContractsRetrievingResponseContractVirtualBankAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseContractVirtualBankAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseContractVirtualBankAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseContractVirtualBankAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseContractVirtualBankAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseCreditCardSetting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseCreditCardSetting) encodeFields(e *jx.Encoder) {
	{
		if s.VMTdsAvailable.Set {
			e.FieldStart("vm_tds_available")
			s.VMTdsAvailable.Encode(e)
		}
	}
	{
		if s.VMTdsRequired.Set {
			e.FieldStart("vm_tds_required")
			s.VMTdsRequired.Encode(e)
		}
	}
	{
		if s.JaTdsAvailable.Set {
			e.FieldStart("ja_tds_available")
			s.JaTdsAvailable.Encode(e)
		}
	}
	{
		if s.JaTdsRequired.Set {
			e.FieldStart("ja_tds_required")
			s.JaTdsRequired.Encode(e)
		}
	}
	{
		if s.InstallPaymentAvailable.Set {
			e.FieldStart("install_payment_available")
			s.InstallPaymentAvailable.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseCreditCardSetting = [5]string{
	0: "vm_tds_available",
	1: "vm_tds_required",
	2: "ja_tds_available",
	3: "ja_tds_required",
	4: "install_payment_available",
}

// Decode decodes ContractsRetrievingResponseCreditCardSetting from json.
func (s *ContractsRetrievingResponseCreditCardSetting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseCreditCardSetting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "vm_tds_available":
			if err := func() error {
				s.VMTdsAvailable.Reset()
				if err := s.VMTdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vm_tds_available\"")
			}
		case "vm_tds_required":
			if err := func() error {
				s.VMTdsRequired.Reset()
				if err := s.VMTdsRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"vm_tds_required\"")
			}
		case "ja_tds_available":
			if err := func() error {
				s.JaTdsAvailable.Reset()
				if err := s.JaTdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ja_tds_available\"")
			}
		case "ja_tds_required":
			if err := func() error {
				s.JaTdsRequired.Reset()
				if err := s.JaTdsRequired.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ja_tds_required\"")
			}
		case "install_payment_available":
			if err := func() error {
				s.InstallPaymentAvailable.Reset()
				if err := s.InstallPaymentAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"install_payment_available\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseCreditCardSetting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseCreditCardSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseCreditCardSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseExaminationItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseExaminationItem) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.MemberCode.Set {
			e.FieldStart("member_code")
			s.MemberCode.Encode(e)
		}
	}
	{
		if s.TdsAvailable.Set {
			e.FieldStart("tds_available")
			s.TdsAvailable.Encode(e)
		}
	}
	{
		if s.InstallmentsPaymentAvailable.Set {
			e.FieldStart("installments_payment_available")
			s.InstallmentsPaymentAvailable.Encode(e)
		}
	}
	{
		if s.Mcc1.Set {
			e.FieldStart("mcc_1")
			s.Mcc1.Encode(e)
		}
	}
	{
		if s.Mcc2.Set {
			e.FieldStart("mcc_2")
			s.Mcc2.Encode(e)
		}
	}
	{
		if s.PaypayMid.Set {
			e.FieldStart("paypay_mid")
			s.PaypayMid.Encode(e)
		}
	}
	{
		if s.PaypayStoreID.Set {
			e.FieldStart("paypay_store_id")
			s.PaypayStoreID.Encode(e)
		}
	}
	{
		if s.PaysleMerchantCode.Set {
			e.FieldStart("paysle_merchant_code")
			s.PaysleMerchantCode.Encode(e)
		}
	}
	{
		if s.PaysleUserID.Set {
			e.FieldStart("paysle_user_id")
			s.PaysleUserID.Encode(e)
		}
	}
	{
		if s.PaysleUserPassword.Set {
			e.FieldStart("paysle_user_password")
			s.PaysleUserPassword.Encode(e)
		}
	}
	{
		if s.CutOverAt.Set {
			e.FieldStart("cut_over_at")
			s.CutOverAt.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseExaminationItem = [13]string{
	0:  "examination_master_id",
	1:  "status_code",
	2:  "member_code",
	3:  "tds_available",
	4:  "installments_payment_available",
	5:  "mcc_1",
	6:  "mcc_2",
	7:  "paypay_mid",
	8:  "paypay_store_id",
	9:  "paysle_merchant_code",
	10: "paysle_user_id",
	11: "paysle_user_password",
	12: "cut_over_at",
}

// Decode decodes ContractsRetrievingResponseExaminationItem from json.
func (s *ContractsRetrievingResponseExaminationItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseExaminationItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "member_code":
			if err := func() error {
				s.MemberCode.Reset()
				if err := s.MemberCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"member_code\"")
			}
		case "tds_available":
			if err := func() error {
				s.TdsAvailable.Reset()
				if err := s.TdsAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_available\"")
			}
		case "installments_payment_available":
			if err := func() error {
				s.InstallmentsPaymentAvailable.Reset()
				if err := s.InstallmentsPaymentAvailable.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"installments_payment_available\"")
			}
		case "mcc_1":
			if err := func() error {
				s.Mcc1.Reset()
				if err := s.Mcc1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mcc_1\"")
			}
		case "mcc_2":
			if err := func() error {
				s.Mcc2.Reset()
				if err := s.Mcc2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mcc_2\"")
			}
		case "paypay_mid":
			if err := func() error {
				s.PaypayMid.Reset()
				if err := s.PaypayMid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_mid\"")
			}
		case "paypay_store_id":
			if err := func() error {
				s.PaypayStoreID.Reset()
				if err := s.PaypayStoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_store_id\"")
			}
		case "paysle_merchant_code":
			if err := func() error {
				s.PaysleMerchantCode.Reset()
				if err := s.PaysleMerchantCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_merchant_code\"")
			}
		case "paysle_user_id":
			if err := func() error {
				s.PaysleUserID.Reset()
				if err := s.PaysleUserID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_user_id\"")
			}
		case "paysle_user_password":
			if err := func() error {
				s.PaysleUserPassword.Reset()
				if err := s.PaysleUserPassword.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paysle_user_password\"")
			}
		case "cut_over_at":
			if err := func() error {
				s.CutOverAt.Reset()
				if err := s.CutOverAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cut_over_at\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseExaminationItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseExaminationItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseExaminationItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseExaminationItemExaminationMasterID as json.
func (s ContractsRetrievingResponseExaminationItemExaminationMasterID) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseExaminationItemExaminationMasterID from json.
func (s *ContractsRetrievingResponseExaminationItemExaminationMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseExaminationItemExaminationMasterID to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseExaminationItemExaminationMasterID(v) {
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDVM:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDVM
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDJad:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDJad
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayVM
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDApplepayJad
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDKonbini
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDPaypay
	case ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterIDDirectdebit
	default:
		*s = ContractsRetrievingResponseExaminationItemExaminationMasterID(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseExaminationItemExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseExaminationItemExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseExaminationItemStatusCode as json.
func (s ContractsRetrievingResponseExaminationItemStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseExaminationItemStatusCode from json.
func (s *ContractsRetrievingResponseExaminationItemStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseExaminationItemStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseExaminationItemStatusCode(v) {
	case ContractsRetrievingResponseExaminationItemStatusCode1:
		*s = ContractsRetrievingResponseExaminationItemStatusCode1
	case ContractsRetrievingResponseExaminationItemStatusCode2:
		*s = ContractsRetrievingResponseExaminationItemStatusCode2
	case ContractsRetrievingResponseExaminationItemStatusCode3:
		*s = ContractsRetrievingResponseExaminationItemStatusCode3
	default:
		*s = ContractsRetrievingResponseExaminationItemStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseExaminationItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseExaminationItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) encodeFields(e *jx.Encoder) {
	{
		if s.CompanyName.Set {
			e.FieldStart("company_name")
			s.CompanyName.Encode(e)
		}
	}
	{
		if s.CompanyNameKana.Set {
			e.FieldStart("company_name_kana")
			s.CompanyNameKana.Encode(e)
		}
	}
	{
		if s.CompanyKind.Set {
			e.FieldStart("company_kind")
			s.CompanyKind.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode.Set {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureCode.Set {
			e.FieldStart("company_prefecture_code")
			s.CompanyPrefectureCode.Encode(e)
		}
	}
	{
		if s.CompanyCityCode.Set {
			e.FieldStart("company_city_code")
			s.CompanyCityCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture.Set {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana.Set {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyCity.Set {
			e.FieldStart("company_city")
			s.CompanyCity.Encode(e)
		}
	}
	{
		if s.CompanyCityKana.Set {
			e.FieldStart("company_city_kana")
			s.CompanyCityKana.Encode(e)
		}
	}
	{
		if s.CompanyStreet.Set {
			e.FieldStart("company_street")
			s.CompanyStreet.Encode(e)
		}
	}
	{
		if s.CompanyStreetKana.Set {
			e.FieldStart("company_street_kana")
			s.CompanyStreetKana.Encode(e)
		}
	}
}

var jsonFieldsNameOfContractsRetrievingResponseOfficialRegisteredCorporateInfo = [12]string{
	0:  "company_name",
	1:  "company_name_kana",
	2:  "company_kind",
	3:  "company_postal_code",
	4:  "company_prefecture_code",
	5:  "company_city_code",
	6:  "company_prefecture",
	7:  "company_prefecture_kana",
	8:  "company_city",
	9:  "company_city_kana",
	10: "company_street",
	11: "company_street_kana",
}

// Decode decodes ContractsRetrievingResponseOfficialRegisteredCorporateInfo from json.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseOfficialRegisteredCorporateInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "company_name":
			if err := func() error {
				s.CompanyName.Reset()
				if err := s.CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_name\"")
			}
		case "company_name_kana":
			if err := func() error {
				s.CompanyNameKana.Reset()
				if err := s.CompanyNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_name_kana\"")
			}
		case "company_kind":
			if err := func() error {
				s.CompanyKind.Reset()
				if err := s.CompanyKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_kind\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode.Reset()
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture_code":
			if err := func() error {
				s.CompanyPrefectureCode.Reset()
				if err := s.CompanyPrefectureCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_code\"")
			}
		case "company_city_code":
			if err := func() error {
				s.CompanyCityCode.Reset()
				if err := s.CompanyCityCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture.Reset()
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana.Reset()
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_city":
			if err := func() error {
				s.CompanyCity.Reset()
				if err := s.CompanyCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city\"")
			}
		case "company_city_kana":
			if err := func() error {
				s.CompanyCityKana.Reset()
				if err := s.CompanyCityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_city_kana\"")
			}
		case "company_street":
			if err := func() error {
				s.CompanyStreet.Reset()
				if err := s.CompanyStreet.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_street\"")
			}
		case "company_street_kana":
			if err := func() error {
				s.CompanyStreetKana.Reset()
				if err := s.CompanyStreetKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_street_kana\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ContractsRetrievingResponseOfficialRegisteredCorporateInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseOfficialRegisteredCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseSalesDepositStatusCode as json.
func (s ContractsRetrievingResponseSalesDepositStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ContractsRetrievingResponseSalesDepositStatusCode from json.
func (s *ContractsRetrievingResponseSalesDepositStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseSalesDepositStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ContractsRetrievingResponseSalesDepositStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseSalesDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseSalesDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseSharedCustomerFlag as json.
func (s ContractsRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseSharedCustomerFlag from json.
func (s *ContractsRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseSharedCustomerFlag(v) {
	case ContractsRetrievingResponseSharedCustomerFlag0:
		*s = ContractsRetrievingResponseSharedCustomerFlag0
	case ContractsRetrievingResponseSharedCustomerFlag1:
		*s = ContractsRetrievingResponseSharedCustomerFlag1
	default:
		*s = ContractsRetrievingResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseShopType as json.
func (s ContractsRetrievingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseShopType from json.
func (s *ContractsRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseShopType(v) {
	case ContractsRetrievingResponseShopTypePlatform:
		*s = ContractsRetrievingResponseShopTypePlatform
	case ContractsRetrievingResponseShopTypeTenant:
		*s = ContractsRetrievingResponseShopTypeTenant
	default:
		*s = ContractsRetrievingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseStatusCode as json.
func (s ContractsRetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ContractsRetrievingResponseStatusCode from json.
func (s *ContractsRetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ContractsRetrievingResponseStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ContractsRetrievingResponseStatusCode(v) {
	case ContractsRetrievingResponseStatusCode101:
		*s = ContractsRetrievingResponseStatusCode101
	case ContractsRetrievingResponseStatusCode102:
		*s = ContractsRetrievingResponseStatusCode102
	case ContractsRetrievingResponseStatusCode103:
		*s = ContractsRetrievingResponseStatusCode103
	case ContractsRetrievingResponseStatusCode105:
		*s = ContractsRetrievingResponseStatusCode105
	case ContractsRetrievingResponseStatusCode106:
		*s = ContractsRetrievingResponseStatusCode106
	case ContractsRetrievingResponseStatusCode107:
		*s = ContractsRetrievingResponseStatusCode107
	default:
		*s = ContractsRetrievingResponseStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ContractsRetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ContractsRetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK as json.
func (s CreatePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case CreatePaymentOK0CreatePaymentOK:
		s.CreatePaymentOK0.Encode(e)
	case CreatePaymentOK1CreatePaymentOK:
		s.CreatePaymentOK1.Encode(e)
	case CreatePaymentOK2CreatePaymentOK:
		s.CreatePaymentOK2.Encode(e)
	case CreatePaymentOK3CreatePaymentOK:
		s.CreatePaymentOK3.Encode(e)
	case CreatePaymentOK4CreatePaymentOK:
		s.CreatePaymentOK4.Encode(e)
	}
}

func (s CreatePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case CreatePaymentOK0CreatePaymentOK:
		s.CreatePaymentOK0.encodeFields(e)
	case CreatePaymentOK1CreatePaymentOK:
		s.CreatePaymentOK1.encodeFields(e)
	case CreatePaymentOK2CreatePaymentOK:
		s.CreatePaymentOK2.encodeFields(e)
	case CreatePaymentOK3CreatePaymentOK:
		s.CreatePaymentOK3.encodeFields(e)
	case CreatePaymentOK4CreatePaymentOK:
		s.CreatePaymentOK4.encodeFields(e)
	}
}

// Decode decodes CreatePaymentOK from json.
func (s *CreatePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := CreatePaymentOK0CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := CreatePaymentOK1CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := CreatePaymentOK2CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := CreatePaymentOK3CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := CreatePaymentOK4CreatePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case CreatePaymentOK0CreatePaymentOK:
		if err := s.CreatePaymentOK0.Decode(d); err != nil {
			return err
		}
	case CreatePaymentOK1CreatePaymentOK:
		if err := s.CreatePaymentOK1.Decode(d); err != nil {
			return err
		}
	case CreatePaymentOK2CreatePaymentOK:
		if err := s.CreatePaymentOK2.Decode(d); err != nil {
			return err
		}
	case CreatePaymentOK3CreatePaymentOK:
		if err := s.CreatePaymentOK3.Decode(d); err != nil {
			return err
		}
	case CreatePaymentOK4CreatePaymentOK:
		if err := s.CreatePaymentOK4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentOK0) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentOK0 = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes CreatePaymentOK0 from json.
func (s *CreatePaymentOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Brand as json.
func (s CreatePaymentOK0Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0Brand from json.
func (s *CreatePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0Brand(v) {
	case CreatePaymentOK0BrandVISA:
		*s = CreatePaymentOK0BrandVISA
	case CreatePaymentOK0BrandMASTER:
		*s = CreatePaymentOK0BrandMASTER
	case CreatePaymentOK0BrandJCB:
		*s = CreatePaymentOK0BrandJCB
	case CreatePaymentOK0BrandAMEX:
		*s = CreatePaymentOK0BrandAMEX
	case CreatePaymentOK0BrandDINERS:
		*s = CreatePaymentOK0BrandDINERS
	case CreatePaymentOK0BrandDISCOVER:
		*s = CreatePaymentOK0BrandDISCOVER
	case CreatePaymentOK0BrandEmpty:
		*s = CreatePaymentOK0BrandEmpty
	default:
		*s = CreatePaymentOK0Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0JobCode as json.
func (s CreatePaymentOK0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0JobCode from json.
func (s *CreatePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0JobCode(v) {
	case CreatePaymentOK0JobCodeCHECK:
		*s = CreatePaymentOK0JobCodeCHECK
	case CreatePaymentOK0JobCodeAUTH:
		*s = CreatePaymentOK0JobCodeAUTH
	case CreatePaymentOK0JobCodeCAPTURE:
		*s = CreatePaymentOK0JobCodeCAPTURE
	default:
		*s = CreatePaymentOK0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Method as json.
func (s CreatePaymentOK0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0Method from json.
func (s *CreatePaymentOK0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0Method(v) {
	case CreatePaymentOK0Method1:
		*s = CreatePaymentOK0Method1
	case CreatePaymentOK0Method2:
		*s = CreatePaymentOK0Method2
	case CreatePaymentOK0Method5:
		*s = CreatePaymentOK0Method5
	default:
		*s = CreatePaymentOK0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0PayTimes as json.
func (s CreatePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0PayTimes from json.
func (s *CreatePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0PayTimes(v) {
	case CreatePaymentOK0PayTimes3:
		*s = CreatePaymentOK0PayTimes3
	case CreatePaymentOK0PayTimes5:
		*s = CreatePaymentOK0PayTimes5
	case CreatePaymentOK0PayTimes6:
		*s = CreatePaymentOK0PayTimes6
	case CreatePaymentOK0PayTimes10:
		*s = CreatePaymentOK0PayTimes10
	case CreatePaymentOK0PayTimes12:
		*s = CreatePaymentOK0PayTimes12
	case CreatePaymentOK0PayTimes15:
		*s = CreatePaymentOK0PayTimes15
	case CreatePaymentOK0PayTimes18:
		*s = CreatePaymentOK0PayTimes18
	case CreatePaymentOK0PayTimes20:
		*s = CreatePaymentOK0PayTimes20
	case CreatePaymentOK0PayTimes24:
		*s = CreatePaymentOK0PayTimes24
	default:
		*s = CreatePaymentOK0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0PayType as json.
func (s CreatePaymentOK0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0PayType from json.
func (s *CreatePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0PayType(v) {
	case CreatePaymentOK0PayTypeCard:
		*s = CreatePaymentOK0PayTypeCard
	case CreatePaymentOK0PayTypeKonbini:
		*s = CreatePaymentOK0PayTypeKonbini
	case CreatePaymentOK0PayTypePaypay:
		*s = CreatePaymentOK0PayTypePaypay
	case CreatePaymentOK0PayTypeApplepay:
		*s = CreatePaymentOK0PayTypeApplepay
	case CreatePaymentOK0PayTypeDirectdebit:
		*s = CreatePaymentOK0PayTypeDirectdebit
	case CreatePaymentOK0PayTypeVirtualaccount:
		*s = CreatePaymentOK0PayTypeVirtualaccount
	default:
		*s = CreatePaymentOK0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Status as json.
func (s CreatePaymentOK0Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0Status from json.
func (s *CreatePaymentOK0Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0Status(v) {
	case CreatePaymentOK0StatusUNPROCESSED:
		*s = CreatePaymentOK0StatusUNPROCESSED
	case CreatePaymentOK0StatusCHECKED:
		*s = CreatePaymentOK0StatusCHECKED
	case CreatePaymentOK0StatusAUTHORIZED:
		*s = CreatePaymentOK0StatusAUTHORIZED
	case CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
	case CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
	case CreatePaymentOK0StatusCAPTURED:
		*s = CreatePaymentOK0StatusCAPTURED
	case CreatePaymentOK0StatusCANCELED:
		*s = CreatePaymentOK0StatusCANCELED
	case CreatePaymentOK0StatusEXPIRED:
		*s = CreatePaymentOK0StatusEXPIRED
	case CreatePaymentOK0StatusAUTHENTICATED:
		*s = CreatePaymentOK0StatusAUTHENTICATED
	case CreatePaymentOK0StatusFAILED:
		*s = CreatePaymentOK0StatusFAILED
	default:
		*s = CreatePaymentOK0Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Tds2Status as json.
func (s CreatePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0Tds2Status from json.
func (s *CreatePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0Tds2Status(v) {
	case CreatePaymentOK0Tds2StatusAUTHENTICATING:
		*s = CreatePaymentOK0Tds2StatusAUTHENTICATING
	case CreatePaymentOK0Tds2StatusCHALLENGE:
		*s = CreatePaymentOK0Tds2StatusCHALLENGE
	case CreatePaymentOK0Tds2StatusAUTHENTICATED:
		*s = CreatePaymentOK0Tds2StatusAUTHENTICATED
	default:
		*s = CreatePaymentOK0Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Tds2Type as json.
func (s CreatePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0Tds2Type from json.
func (s *CreatePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0Tds2Type(v) {
	case CreatePaymentOK0Tds2Type2:
		*s = CreatePaymentOK0Tds2Type2
	case CreatePaymentOK0Tds2Type3:
		*s = CreatePaymentOK0Tds2Type3
	default:
		*s = CreatePaymentOK0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0TdsType as json.
func (s CreatePaymentOK0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK0TdsType from json.
func (s *CreatePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK0TdsType(v) {
	case CreatePaymentOK0TdsType0:
		*s = CreatePaymentOK0TdsType0
	case CreatePaymentOK0TdsType2:
		*s = CreatePaymentOK0TdsType2
	default:
		*s = CreatePaymentOK0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentOK1) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentOK1 = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes CreatePaymentOK1 from json.
func (s *CreatePaymentOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Brand as json.
func (s CreatePaymentOK1Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1Brand from json.
func (s *CreatePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1Brand(v) {
	case CreatePaymentOK1BrandVISA:
		*s = CreatePaymentOK1BrandVISA
	case CreatePaymentOK1BrandMASTER:
		*s = CreatePaymentOK1BrandMASTER
	case CreatePaymentOK1BrandJCB:
		*s = CreatePaymentOK1BrandJCB
	case CreatePaymentOK1BrandAMEX:
		*s = CreatePaymentOK1BrandAMEX
	case CreatePaymentOK1BrandDINERS:
		*s = CreatePaymentOK1BrandDINERS
	case CreatePaymentOK1BrandDISCOVER:
		*s = CreatePaymentOK1BrandDISCOVER
	case CreatePaymentOK1BrandEmpty:
		*s = CreatePaymentOK1BrandEmpty
	default:
		*s = CreatePaymentOK1Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1JobCode as json.
func (s CreatePaymentOK1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1JobCode from json.
func (s *CreatePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1JobCode(v) {
	case CreatePaymentOK1JobCodeAUTH:
		*s = CreatePaymentOK1JobCodeAUTH
	case CreatePaymentOK1JobCodeCAPTURE:
		*s = CreatePaymentOK1JobCodeCAPTURE
	default:
		*s = CreatePaymentOK1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Method as json.
func (s CreatePaymentOK1Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1Method from json.
func (s *CreatePaymentOK1Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1Method(v) {
	case CreatePaymentOK1Method1:
		*s = CreatePaymentOK1Method1
	case CreatePaymentOK1Method2:
		*s = CreatePaymentOK1Method2
	case CreatePaymentOK1Method5:
		*s = CreatePaymentOK1Method5
	default:
		*s = CreatePaymentOK1Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1PayTimes as json.
func (s CreatePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1PayTimes from json.
func (s *CreatePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1PayTimes(v) {
	case CreatePaymentOK1PayTimes3:
		*s = CreatePaymentOK1PayTimes3
	case CreatePaymentOK1PayTimes5:
		*s = CreatePaymentOK1PayTimes5
	case CreatePaymentOK1PayTimes6:
		*s = CreatePaymentOK1PayTimes6
	case CreatePaymentOK1PayTimes10:
		*s = CreatePaymentOK1PayTimes10
	case CreatePaymentOK1PayTimes12:
		*s = CreatePaymentOK1PayTimes12
	case CreatePaymentOK1PayTimes15:
		*s = CreatePaymentOK1PayTimes15
	case CreatePaymentOK1PayTimes18:
		*s = CreatePaymentOK1PayTimes18
	case CreatePaymentOK1PayTimes20:
		*s = CreatePaymentOK1PayTimes20
	case CreatePaymentOK1PayTimes24:
		*s = CreatePaymentOK1PayTimes24
	default:
		*s = CreatePaymentOK1PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1PayType as json.
func (s CreatePaymentOK1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1PayType from json.
func (s *CreatePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1PayType(v) {
	case CreatePaymentOK1PayTypeCard:
		*s = CreatePaymentOK1PayTypeCard
	case CreatePaymentOK1PayTypeKonbini:
		*s = CreatePaymentOK1PayTypeKonbini
	case CreatePaymentOK1PayTypePaypay:
		*s = CreatePaymentOK1PayTypePaypay
	case CreatePaymentOK1PayTypeApplepay:
		*s = CreatePaymentOK1PayTypeApplepay
	case CreatePaymentOK1PayTypeDirectdebit:
		*s = CreatePaymentOK1PayTypeDirectdebit
	case CreatePaymentOK1PayTypeVirtualaccount:
		*s = CreatePaymentOK1PayTypeVirtualaccount
	default:
		*s = CreatePaymentOK1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Status as json.
func (s CreatePaymentOK1Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK1Status from json.
func (s *CreatePaymentOK1Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK1Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK1Status(v) {
	case CreatePaymentOK1StatusUNPROCESSED:
		*s = CreatePaymentOK1StatusUNPROCESSED
	case CreatePaymentOK1StatusCHECKED:
		*s = CreatePaymentOK1StatusCHECKED
	case CreatePaymentOK1StatusAUTHORIZED:
		*s = CreatePaymentOK1StatusAUTHORIZED
	case CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
	case CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
	case CreatePaymentOK1StatusCAPTURED:
		*s = CreatePaymentOK1StatusCAPTURED
	case CreatePaymentOK1StatusCANCELED:
		*s = CreatePaymentOK1StatusCANCELED
	case CreatePaymentOK1StatusEXPIRED:
		*s = CreatePaymentOK1StatusEXPIRED
	case CreatePaymentOK1StatusAUTHENTICATED:
		*s = CreatePaymentOK1StatusAUTHENTICATED
	case CreatePaymentOK1StatusFAILED:
		*s = CreatePaymentOK1StatusFAILED
	default:
		*s = CreatePaymentOK1Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentOK2) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentOK2 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes CreatePaymentOK2 from json.
func (s *CreatePaymentOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2 to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2BarcodeFormat as json.
func (s CreatePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2BarcodeFormat from json.
func (s *CreatePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2BarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2BarcodeFormat(v) {
	case CreatePaymentOK2BarcodeFormatJPG:
		*s = CreatePaymentOK2BarcodeFormatJPG
	case CreatePaymentOK2BarcodeFormatPNG:
		*s = CreatePaymentOK2BarcodeFormatPNG
	case CreatePaymentOK2BarcodeFormatBmp:
		*s = CreatePaymentOK2BarcodeFormatBmp
	default:
		*s = CreatePaymentOK2BarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2CancelOverpaymentFlag as json.
func (s CreatePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2CancelOverpaymentFlag from json.
func (s *CreatePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2CancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2CancelOverpaymentFlag(v) {
	case CreatePaymentOK2CancelOverpaymentFlag0:
		*s = CreatePaymentOK2CancelOverpaymentFlag0
	case CreatePaymentOK2CancelOverpaymentFlag1:
		*s = CreatePaymentOK2CancelOverpaymentFlag1
	default:
		*s = CreatePaymentOK2CancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2KonbiniCode as json.
func (s CreatePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2KonbiniCode from json.
func (s *CreatePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2KonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2KonbiniCode(v) {
	case CreatePaymentOK2KonbiniCode00010:
		*s = CreatePaymentOK2KonbiniCode00010
	case CreatePaymentOK2KonbiniCode00020:
		*s = CreatePaymentOK2KonbiniCode00020
	case CreatePaymentOK2KonbiniCode00030:
		*s = CreatePaymentOK2KonbiniCode00030
	case CreatePaymentOK2KonbiniCode00080:
		*s = CreatePaymentOK2KonbiniCode00080
	case CreatePaymentOK2KonbiniCode00760:
		*s = CreatePaymentOK2KonbiniCode00760
	default:
		*s = CreatePaymentOK2KonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2OverpaymentFlag as json.
func (s CreatePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2OverpaymentFlag from json.
func (s *CreatePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2OverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2OverpaymentFlag(v) {
	case CreatePaymentOK2OverpaymentFlag0:
		*s = CreatePaymentOK2OverpaymentFlag0
	case CreatePaymentOK2OverpaymentFlag1:
		*s = CreatePaymentOK2OverpaymentFlag1
	default:
		*s = CreatePaymentOK2OverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2PayType as json.
func (s CreatePaymentOK2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2PayType from json.
func (s *CreatePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2PayType(v) {
	case CreatePaymentOK2PayTypeCard:
		*s = CreatePaymentOK2PayTypeCard
	case CreatePaymentOK2PayTypeKonbini:
		*s = CreatePaymentOK2PayTypeKonbini
	case CreatePaymentOK2PayTypePaypay:
		*s = CreatePaymentOK2PayTypePaypay
	case CreatePaymentOK2PayTypeApplepay:
		*s = CreatePaymentOK2PayTypeApplepay
	case CreatePaymentOK2PayTypeDirectdebit:
		*s = CreatePaymentOK2PayTypeDirectdebit
	case CreatePaymentOK2PayTypeVirtualaccount:
		*s = CreatePaymentOK2PayTypeVirtualaccount
	default:
		*s = CreatePaymentOK2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2Result as json.
func (s CreatePaymentOK2Result) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2Result from json.
func (s *CreatePaymentOK2Result) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2Result to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2Result(v) {
	case CreatePaymentOK2Result000:
		*s = CreatePaymentOK2Result000
	case CreatePaymentOK2Result001:
		*s = CreatePaymentOK2Result001
	case CreatePaymentOK2Result002:
		*s = CreatePaymentOK2Result002
	case CreatePaymentOK2Result003:
		*s = CreatePaymentOK2Result003
	case CreatePaymentOK2Result004:
		*s = CreatePaymentOK2Result004
	case CreatePaymentOK2Result005:
		*s = CreatePaymentOK2Result005
	case CreatePaymentOK2Result006:
		*s = CreatePaymentOK2Result006
	case CreatePaymentOK2Result007:
		*s = CreatePaymentOK2Result007
	case CreatePaymentOK2Result008:
		*s = CreatePaymentOK2Result008
	case CreatePaymentOK2Result009:
		*s = CreatePaymentOK2Result009
	case CreatePaymentOK2Result010:
		*s = CreatePaymentOK2Result010
	case CreatePaymentOK2Result011:
		*s = CreatePaymentOK2Result011
	case CreatePaymentOK2Result012:
		*s = CreatePaymentOK2Result012
	case CreatePaymentOK2Result013:
		*s = CreatePaymentOK2Result013
	case CreatePaymentOK2Result900:
		*s = CreatePaymentOK2Result900
	default:
		*s = CreatePaymentOK2Result(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2Status as json.
func (s CreatePaymentOK2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK2Status from json.
func (s *CreatePaymentOK2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK2Status(v) {
	case CreatePaymentOK2StatusUNPROCESSED:
		*s = CreatePaymentOK2StatusUNPROCESSED
	case CreatePaymentOK2StatusCHECKED:
		*s = CreatePaymentOK2StatusCHECKED
	case CreatePaymentOK2StatusAUTHORIZED:
		*s = CreatePaymentOK2StatusAUTHORIZED
	case CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
	case CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
	case CreatePaymentOK2StatusCAPTURED:
		*s = CreatePaymentOK2StatusCAPTURED
	case CreatePaymentOK2StatusCANCELED:
		*s = CreatePaymentOK2StatusCANCELED
	case CreatePaymentOK2StatusEXPIRED:
		*s = CreatePaymentOK2StatusEXPIRED
	case CreatePaymentOK2StatusAUTHENTICATED:
		*s = CreatePaymentOK2StatusAUTHENTICATED
	case CreatePaymentOK2StatusFAILED:
		*s = CreatePaymentOK2StatusFAILED
	default:
		*s = CreatePaymentOK2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentOK3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentOK3) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentOK3 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes CreatePaymentOK3 from json.
func (s *CreatePaymentOK3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentOK3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentOK3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3JobCode as json.
func (s CreatePaymentOK3JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK3JobCode from json.
func (s *CreatePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK3JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK3JobCode(v) {
	case CreatePaymentOK3JobCodeAUTH:
		*s = CreatePaymentOK3JobCodeAUTH
	case CreatePaymentOK3JobCodeCAPTURE:
		*s = CreatePaymentOK3JobCodeCAPTURE
	default:
		*s = CreatePaymentOK3JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3PayType as json.
func (s CreatePaymentOK3PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK3PayType from json.
func (s *CreatePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK3PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK3PayType(v) {
	case CreatePaymentOK3PayTypeCard:
		*s = CreatePaymentOK3PayTypeCard
	case CreatePaymentOK3PayTypeKonbini:
		*s = CreatePaymentOK3PayTypeKonbini
	case CreatePaymentOK3PayTypePaypay:
		*s = CreatePaymentOK3PayTypePaypay
	case CreatePaymentOK3PayTypeApplepay:
		*s = CreatePaymentOK3PayTypeApplepay
	case CreatePaymentOK3PayTypeDirectdebit:
		*s = CreatePaymentOK3PayTypeDirectdebit
	case CreatePaymentOK3PayTypeVirtualaccount:
		*s = CreatePaymentOK3PayTypeVirtualaccount
	default:
		*s = CreatePaymentOK3PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3RedirectType as json.
func (s CreatePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK3RedirectType from json.
func (s *CreatePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK3RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK3RedirectType(v) {
	case CreatePaymentOK3RedirectType1:
		*s = CreatePaymentOK3RedirectType1
	case CreatePaymentOK3RedirectType2:
		*s = CreatePaymentOK3RedirectType2
	default:
		*s = CreatePaymentOK3RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3Status as json.
func (s CreatePaymentOK3Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK3Status from json.
func (s *CreatePaymentOK3Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK3Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK3Status(v) {
	case CreatePaymentOK3StatusUNPROCESSED:
		*s = CreatePaymentOK3StatusUNPROCESSED
	case CreatePaymentOK3StatusCHECKED:
		*s = CreatePaymentOK3StatusCHECKED
	case CreatePaymentOK3StatusAUTHORIZED:
		*s = CreatePaymentOK3StatusAUTHORIZED
	case CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
	case CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
	case CreatePaymentOK3StatusCAPTURED:
		*s = CreatePaymentOK3StatusCAPTURED
	case CreatePaymentOK3StatusCANCELED:
		*s = CreatePaymentOK3StatusCANCELED
	case CreatePaymentOK3StatusEXPIRED:
		*s = CreatePaymentOK3StatusEXPIRED
	case CreatePaymentOK3StatusAUTHENTICATED:
		*s = CreatePaymentOK3StatusAUTHENTICATED
	case CreatePaymentOK3StatusFAILED:
		*s = CreatePaymentOK3StatusFAILED
	default:
		*s = CreatePaymentOK3Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentOK4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentOK4) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentOK4 = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes CreatePaymentOK4 from json.
func (s *CreatePaymentOK4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK4 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentOK4")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentOK4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4PayType as json.
func (s CreatePaymentOK4PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK4PayType from json.
func (s *CreatePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK4PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK4PayType(v) {
	case CreatePaymentOK4PayTypeCard:
		*s = CreatePaymentOK4PayTypeCard
	case CreatePaymentOK4PayTypeKonbini:
		*s = CreatePaymentOK4PayTypeKonbini
	case CreatePaymentOK4PayTypePaypay:
		*s = CreatePaymentOK4PayTypePaypay
	case CreatePaymentOK4PayTypeApplepay:
		*s = CreatePaymentOK4PayTypeApplepay
	case CreatePaymentOK4PayTypeDirectdebit:
		*s = CreatePaymentOK4PayTypeDirectdebit
	case CreatePaymentOK4PayTypeVirtualaccount:
		*s = CreatePaymentOK4PayTypeVirtualaccount
	default:
		*s = CreatePaymentOK4PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4ResultCode as json.
func (s CreatePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK4ResultCode from json.
func (s *CreatePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK4ResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK4ResultCode(v) {
	case CreatePaymentOK4ResultCode0:
		*s = CreatePaymentOK4ResultCode0
	case CreatePaymentOK4ResultCode1:
		*s = CreatePaymentOK4ResultCode1
	case CreatePaymentOK4ResultCode2:
		*s = CreatePaymentOK4ResultCode2
	case CreatePaymentOK4ResultCode3:
		*s = CreatePaymentOK4ResultCode3
	case CreatePaymentOK4ResultCode4:
		*s = CreatePaymentOK4ResultCode4
	case CreatePaymentOK4ResultCode8:
		*s = CreatePaymentOK4ResultCode8
	case CreatePaymentOK4ResultCode9:
		*s = CreatePaymentOK4ResultCode9
	case CreatePaymentOK4ResultCodeE:
		*s = CreatePaymentOK4ResultCodeE
	case CreatePaymentOK4ResultCodeN:
		*s = CreatePaymentOK4ResultCodeN
	default:
		*s = CreatePaymentOK4ResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4Status as json.
func (s CreatePaymentOK4Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentOK4Status from json.
func (s *CreatePaymentOK4Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentOK4Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentOK4Status(v) {
	case CreatePaymentOK4StatusUNPROCESSED:
		*s = CreatePaymentOK4StatusUNPROCESSED
	case CreatePaymentOK4StatusCHECKED:
		*s = CreatePaymentOK4StatusCHECKED
	case CreatePaymentOK4StatusAUTHORIZED:
		*s = CreatePaymentOK4StatusAUTHORIZED
	case CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = CreatePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
	case CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = CreatePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
	case CreatePaymentOK4StatusCAPTURED:
		*s = CreatePaymentOK4StatusCAPTURED
	case CreatePaymentOK4StatusCANCELED:
		*s = CreatePaymentOK4StatusCANCELED
	case CreatePaymentOK4StatusEXPIRED:
		*s = CreatePaymentOK4StatusEXPIRED
	case CreatePaymentOK4StatusAUTHENTICATED:
		*s = CreatePaymentOK4StatusAUTHENTICATED
	case CreatePaymentOK4StatusFAILED:
		*s = CreatePaymentOK4StatusFAILED
	default:
		*s = CreatePaymentOK4Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq as json.
func (s CreatePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case CreatePaymentReq0CreatePaymentReq:
		s.CreatePaymentReq0.Encode(e)
	case CreatePaymentReq1CreatePaymentReq:
		s.CreatePaymentReq1.Encode(e)
	case CreatePaymentReq2CreatePaymentReq:
		s.CreatePaymentReq2.Encode(e)
	case CreatePaymentReq3CreatePaymentReq:
		s.CreatePaymentReq3.Encode(e)
	case CreatePaymentReq4CreatePaymentReq:
		s.CreatePaymentReq4.Encode(e)
	}
}

func (s CreatePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case CreatePaymentReq0CreatePaymentReq:
		s.CreatePaymentReq0.encodeFields(e)
	case CreatePaymentReq1CreatePaymentReq:
		s.CreatePaymentReq1.encodeFields(e)
	case CreatePaymentReq2CreatePaymentReq:
		s.CreatePaymentReq2.encodeFields(e)
	case CreatePaymentReq3CreatePaymentReq:
		s.CreatePaymentReq3.encodeFields(e)
	case CreatePaymentReq4CreatePaymentReq:
		s.CreatePaymentReq4.encodeFields(e)
	}
}

// Decode decodes CreatePaymentReq from json.
func (s *CreatePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "tds_type":
				match := CreatePaymentReq0CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := CreatePaymentReq0CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "td_tenant_name":
				match := CreatePaymentReq0CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "item_code":
				match := CreatePaymentReq1CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := CreatePaymentReq3CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := CreatePaymentReq4CreatePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = CreatePaymentReq2CreatePaymentReq
	}
	switch s.Type {
	case CreatePaymentReq0CreatePaymentReq:
		if err := s.CreatePaymentReq0.Decode(d); err != nil {
			return err
		}
	case CreatePaymentReq1CreatePaymentReq:
		if err := s.CreatePaymentReq1.Decode(d); err != nil {
			return err
		}
	case CreatePaymentReq2CreatePaymentReq:
		if err := s.CreatePaymentReq2.Decode(d); err != nil {
			return err
		}
	case CreatePaymentReq3CreatePaymentReq:
		if err := s.CreatePaymentReq3.Decode(d); err != nil {
			return err
		}
	case CreatePaymentReq4CreatePaymentReq:
		if err := s.CreatePaymentReq4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentReq0) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentReq0 = [11]string{
	0:  "id",
	1:  "pay_type",
	2:  "job_code",
	3:  "amount",
	4:  "tax",
	5:  "tds_type",
	6:  "tds2_type",
	7:  "td_tenant_name",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
}

// Decode decodes CreatePaymentReq0 from json.
func (s *CreatePaymentReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq0 to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentReq0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePaymentReq0) {
					name = jsonFieldsNameOfCreatePaymentReq0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0JobCode as json.
func (s CreatePaymentReq0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq0JobCode from json.
func (s *CreatePaymentReq0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq0JobCode(v) {
	case CreatePaymentReq0JobCodeCHECK:
		*s = CreatePaymentReq0JobCodeCHECK
	case CreatePaymentReq0JobCodeAUTH:
		*s = CreatePaymentReq0JobCodeAUTH
	case CreatePaymentReq0JobCodeCAPTURE:
		*s = CreatePaymentReq0JobCodeCAPTURE
	default:
		*s = CreatePaymentReq0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0PayType as json.
func (s CreatePaymentReq0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq0PayType from json.
func (s *CreatePaymentReq0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq0PayType(v) {
	case CreatePaymentReq0PayTypeCard:
		*s = CreatePaymentReq0PayTypeCard
	case CreatePaymentReq0PayTypeKonbini:
		*s = CreatePaymentReq0PayTypeKonbini
	case CreatePaymentReq0PayTypePaypay:
		*s = CreatePaymentReq0PayTypePaypay
	case CreatePaymentReq0PayTypeApplepay:
		*s = CreatePaymentReq0PayTypeApplepay
	case CreatePaymentReq0PayTypeDirectdebit:
		*s = CreatePaymentReq0PayTypeDirectdebit
	case CreatePaymentReq0PayTypeVirtualaccount:
		*s = CreatePaymentReq0PayTypeVirtualaccount
	default:
		*s = CreatePaymentReq0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0Tds2Type as json.
func (s CreatePaymentReq0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq0Tds2Type from json.
func (s *CreatePaymentReq0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq0Tds2Type(v) {
	case CreatePaymentReq0Tds2Type2:
		*s = CreatePaymentReq0Tds2Type2
	case CreatePaymentReq0Tds2Type3:
		*s = CreatePaymentReq0Tds2Type3
	default:
		*s = CreatePaymentReq0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0TdsType as json.
func (s CreatePaymentReq0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq0TdsType from json.
func (s *CreatePaymentReq0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq0TdsType(v) {
	case CreatePaymentReq0TdsType0:
		*s = CreatePaymentReq0TdsType0
	case CreatePaymentReq0TdsType2:
		*s = CreatePaymentReq0TdsType2
	default:
		*s = CreatePaymentReq0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentReq1) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentReq1 = [9]string{
	0: "id",
	1: "pay_type",
	2: "job_code",
	3: "amount",
	4: "tax",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "item_code",
}

// Decode decodes CreatePaymentReq1 from json.
func (s *CreatePaymentReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq1 to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentReq1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePaymentReq1) {
					name = jsonFieldsNameOfCreatePaymentReq1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq1JobCode as json.
func (s CreatePaymentReq1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq1JobCode from json.
func (s *CreatePaymentReq1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq1JobCode(v) {
	case CreatePaymentReq1JobCodeAUTH:
		*s = CreatePaymentReq1JobCodeAUTH
	case CreatePaymentReq1JobCodeCAPTURE:
		*s = CreatePaymentReq1JobCodeCAPTURE
	default:
		*s = CreatePaymentReq1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq1PayType as json.
func (s CreatePaymentReq1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq1PayType from json.
func (s *CreatePaymentReq1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq1PayType(v) {
	case CreatePaymentReq1PayTypeCard:
		*s = CreatePaymentReq1PayTypeCard
	case CreatePaymentReq1PayTypeKonbini:
		*s = CreatePaymentReq1PayTypeKonbini
	case CreatePaymentReq1PayTypePaypay:
		*s = CreatePaymentReq1PayTypePaypay
	case CreatePaymentReq1PayTypeApplepay:
		*s = CreatePaymentReq1PayTypeApplepay
	case CreatePaymentReq1PayTypeDirectdebit:
		*s = CreatePaymentReq1PayTypeDirectdebit
	case CreatePaymentReq1PayTypeVirtualaccount:
		*s = CreatePaymentReq1PayTypeVirtualaccount
	default:
		*s = CreatePaymentReq1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentReq2) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentReq2 = [7]string{
	0: "id",
	1: "pay_type",
	2: "amount",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes CreatePaymentReq2 from json.
func (s *CreatePaymentReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq2 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentReq2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePaymentReq2) {
					name = jsonFieldsNameOfCreatePaymentReq2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq2PayType as json.
func (s CreatePaymentReq2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq2PayType from json.
func (s *CreatePaymentReq2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq2PayType(v) {
	case CreatePaymentReq2PayTypeCard:
		*s = CreatePaymentReq2PayTypeCard
	case CreatePaymentReq2PayTypeKonbini:
		*s = CreatePaymentReq2PayTypeKonbini
	case CreatePaymentReq2PayTypePaypay:
		*s = CreatePaymentReq2PayTypePaypay
	case CreatePaymentReq2PayTypeApplepay:
		*s = CreatePaymentReq2PayTypeApplepay
	case CreatePaymentReq2PayTypeDirectdebit:
		*s = CreatePaymentReq2PayTypeDirectdebit
	case CreatePaymentReq2PayTypeVirtualaccount:
		*s = CreatePaymentReq2PayTypeVirtualaccount
	default:
		*s = CreatePaymentReq2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentReq3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentReq3) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentReq3 = [9]string{
	0: "id",
	1: "pay_type",
	2: "job_code",
	3: "amount",
	4: "tax",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "order_description",
}

// Decode decodes CreatePaymentReq3 from json.
func (s *CreatePaymentReq3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq3 to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentReq3")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePaymentReq3) {
					name = jsonFieldsNameOfCreatePaymentReq3[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentReq3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq3JobCode as json.
func (s CreatePaymentReq3JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq3JobCode from json.
func (s *CreatePaymentReq3JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq3JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq3JobCode(v) {
	case CreatePaymentReq3JobCodeAUTH:
		*s = CreatePaymentReq3JobCodeAUTH
	case CreatePaymentReq3JobCodeCAPTURE:
		*s = CreatePaymentReq3JobCodeCAPTURE
	default:
		*s = CreatePaymentReq3JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq3PayType as json.
func (s CreatePaymentReq3PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq3PayType from json.
func (s *CreatePaymentReq3PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq3PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq3PayType(v) {
	case CreatePaymentReq3PayTypeCard:
		*s = CreatePaymentReq3PayTypeCard
	case CreatePaymentReq3PayTypeKonbini:
		*s = CreatePaymentReq3PayTypeKonbini
	case CreatePaymentReq3PayTypePaypay:
		*s = CreatePaymentReq3PayTypePaypay
	case CreatePaymentReq3PayTypeApplepay:
		*s = CreatePaymentReq3PayTypeApplepay
	case CreatePaymentReq3PayTypeDirectdebit:
		*s = CreatePaymentReq3PayTypeDirectdebit
	case CreatePaymentReq3PayTypeVirtualaccount:
		*s = CreatePaymentReq3PayTypeVirtualaccount
	default:
		*s = CreatePaymentReq3PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CreatePaymentReq4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CreatePaymentReq4) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfCreatePaymentReq4 = [8]string{
	0: "id",
	1: "pay_type",
	2: "amount",
	3: "tax",
	4: "remarks",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
}

// Decode decodes CreatePaymentReq4 from json.
func (s *CreatePaymentReq4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq4 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CreatePaymentReq4")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCreatePaymentReq4) {
					name = jsonFieldsNameOfCreatePaymentReq4[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CreatePaymentReq4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq4PayType as json.
func (s CreatePaymentReq4PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CreatePaymentReq4PayType from json.
func (s *CreatePaymentReq4PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CreatePaymentReq4PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CreatePaymentReq4PayType(v) {
	case CreatePaymentReq4PayTypeCard:
		*s = CreatePaymentReq4PayTypeCard
	case CreatePaymentReq4PayTypeKonbini:
		*s = CreatePaymentReq4PayTypeKonbini
	case CreatePaymentReq4PayTypePaypay:
		*s = CreatePaymentReq4PayTypePaypay
	case CreatePaymentReq4PayTypeApplepay:
		*s = CreatePaymentReq4PayTypeApplepay
	case CreatePaymentReq4PayTypeDirectdebit:
		*s = CreatePaymentReq4PayTypeDirectdebit
	case CreatePaymentReq4PayTypeVirtualaccount:
		*s = CreatePaymentReq4PayTypeVirtualaccount
	default:
		*s = CreatePaymentReq4PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CreatePaymentReq4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CreatePaymentReq4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Customer) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Customer) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DirectdebitRegistration.Set {
			e.FieldStart("directdebit_registration")
			s.DirectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomer = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
	12: "card_registration",
	13: "directdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes Customer from json.
func (s *Customer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Customer to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "directdebit_registration":
			if err := func() error {
				s.DirectdebitRegistration.Reset()
				if err := s.DirectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Customer")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Customer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Customer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("token")
		e.Str(s.Token)
	}
	{
		e.FieldStart("default_flag")
		s.DefaultFlag.Encode(e)
	}
}

var jsonFieldsNameOfCustomerCardCreatingRequest = [2]string{
	0: "token",
	1: "default_flag",
}

// Decode decodes CustomerCardCreatingRequest from json.
func (s *CustomerCardCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Token = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "default_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerCardCreatingRequest) {
					name = jsonFieldsNameOfCustomerCardCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingRequestDefaultFlag as json.
func (s CustomerCardCreatingRequestDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardCreatingRequestDefaultFlag from json.
func (s *CustomerCardCreatingRequestDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingRequestDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardCreatingRequestDefaultFlag(v) {
	case CustomerCardCreatingRequestDefaultFlag0:
		*s = CustomerCardCreatingRequestDefaultFlag0
	case CustomerCardCreatingRequestDefaultFlag1:
		*s = CustomerCardCreatingRequestDefaultFlag1
	default:
		*s = CustomerCardCreatingRequestDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardCreatingRequestDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingRequestDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire != nil {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName != nil {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardCreatingResponse = [11]string{
	0:  "id",
	1:  "customer_id",
	2:  "default_flag",
	3:  "card_no",
	4:  "expire",
	5:  "holder_name",
	6:  "type",
	7:  "brand",
	8:  "card_no_hash",
	9:  "created",
	10: "updated",
}

// Decode decodes CustomerCardCreatingResponse from json.
func (s *CustomerCardCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Expire = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.HolderName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseBrand as json.
func (s CustomerCardCreatingResponseBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardCreatingResponseBrand from json.
func (s *CustomerCardCreatingResponseBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingResponseBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardCreatingResponseBrand(v) {
	case CustomerCardCreatingResponseBrandVISA:
		*s = CustomerCardCreatingResponseBrandVISA
	case CustomerCardCreatingResponseBrandMASTER:
		*s = CustomerCardCreatingResponseBrandMASTER
	case CustomerCardCreatingResponseBrandJCB:
		*s = CustomerCardCreatingResponseBrandJCB
	case CustomerCardCreatingResponseBrandAMEX:
		*s = CustomerCardCreatingResponseBrandAMEX
	case CustomerCardCreatingResponseBrandDINERS:
		*s = CustomerCardCreatingResponseBrandDINERS
	case CustomerCardCreatingResponseBrandDISCOVER:
		*s = CustomerCardCreatingResponseBrandDISCOVER
	case CustomerCardCreatingResponseBrandEmpty:
		*s = CustomerCardCreatingResponseBrandEmpty
	default:
		*s = CustomerCardCreatingResponseBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardCreatingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseDefaultFlag as json.
func (s CustomerCardCreatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardCreatingResponseDefaultFlag from json.
func (s *CustomerCardCreatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingResponseDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardCreatingResponseDefaultFlag(v) {
	case CustomerCardCreatingResponseDefaultFlag0:
		*s = CustomerCardCreatingResponseDefaultFlag0
	case CustomerCardCreatingResponseDefaultFlag1:
		*s = CustomerCardCreatingResponseDefaultFlag1
	default:
		*s = CustomerCardCreatingResponseDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardCreatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseType as json.
func (s CustomerCardCreatingResponseType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardCreatingResponseType from json.
func (s *CustomerCardCreatingResponseType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardCreatingResponseType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardCreatingResponseType(v) {
	case CustomerCardCreatingResponseType0:
		*s = CustomerCardCreatingResponseType0
	case CustomerCardCreatingResponseType1:
		*s = CustomerCardCreatingResponseType1
	case CustomerCardCreatingResponseType2:
		*s = CustomerCardCreatingResponseType2
	case CustomerCardCreatingResponseType3:
		*s = CustomerCardCreatingResponseType3
	default:
		*s = CustomerCardCreatingResponseType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardCreatingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardCreatingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardDeletingResponse = [3]string{
	0: "id",
	1: "customer_id",
	2: "delete_flag",
}

// Decode decodes CustomerCardDeletingResponse from json.
func (s *CustomerCardDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardDeletingResponseDeleteFlag as json.
func (s CustomerCardDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardDeletingResponseDeleteFlag from json.
func (s *CustomerCardDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardDeletingResponseDeleteFlag(v) {
	case CustomerCardDeletingResponseDeleteFlag1:
		*s = CustomerCardDeletingResponseDeleteFlag1
	case CustomerCardDeletingResponseDeleteFlag0:
		*s = CustomerCardDeletingResponseDeleteFlag0
	default:
		*s = CustomerCardDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCustomerCardListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes CustomerCardListRetrievingResponse from json.
func (s *CustomerCardListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Card, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Card
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRegistration as json.
func (s CustomerCardRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardRegistration from json.
func (s *CustomerCardRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardRegistration(v) {
	case CustomerCardRegistration0:
		*s = CustomerCardRegistration0
	case CustomerCardRegistration1:
		*s = CustomerCardRegistration1
	default:
		*s = CustomerCardRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire != nil {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName != nil {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardRetrievingResponse = [11]string{
	0:  "id",
	1:  "customer_id",
	2:  "default_flag",
	3:  "card_no",
	4:  "expire",
	5:  "holder_name",
	6:  "type",
	7:  "brand",
	8:  "card_no_hash",
	9:  "created",
	10: "updated",
}

// Decode decodes CustomerCardRetrievingResponse from json.
func (s *CustomerCardRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Expire = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.HolderName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseBrand as json.
func (s CustomerCardRetrievingResponseBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardRetrievingResponseBrand from json.
func (s *CustomerCardRetrievingResponseBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRetrievingResponseBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardRetrievingResponseBrand(v) {
	case CustomerCardRetrievingResponseBrandVISA:
		*s = CustomerCardRetrievingResponseBrandVISA
	case CustomerCardRetrievingResponseBrandMASTER:
		*s = CustomerCardRetrievingResponseBrandMASTER
	case CustomerCardRetrievingResponseBrandJCB:
		*s = CustomerCardRetrievingResponseBrandJCB
	case CustomerCardRetrievingResponseBrandAMEX:
		*s = CustomerCardRetrievingResponseBrandAMEX
	case CustomerCardRetrievingResponseBrandDINERS:
		*s = CustomerCardRetrievingResponseBrandDINERS
	case CustomerCardRetrievingResponseBrandDISCOVER:
		*s = CustomerCardRetrievingResponseBrandDISCOVER
	case CustomerCardRetrievingResponseBrandEmpty:
		*s = CustomerCardRetrievingResponseBrandEmpty
	default:
		*s = CustomerCardRetrievingResponseBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardRetrievingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRetrievingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseDefaultFlag as json.
func (s CustomerCardRetrievingResponseDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardRetrievingResponseDefaultFlag from json.
func (s *CustomerCardRetrievingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRetrievingResponseDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardRetrievingResponseDefaultFlag(v) {
	case CustomerCardRetrievingResponseDefaultFlag0:
		*s = CustomerCardRetrievingResponseDefaultFlag0
	case CustomerCardRetrievingResponseDefaultFlag1:
		*s = CustomerCardRetrievingResponseDefaultFlag1
	default:
		*s = CustomerCardRetrievingResponseDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardRetrievingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRetrievingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseType as json.
func (s CustomerCardRetrievingResponseType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardRetrievingResponseType from json.
func (s *CustomerCardRetrievingResponseType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardRetrievingResponseType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardRetrievingResponseType(v) {
	case CustomerCardRetrievingResponseType0:
		*s = CustomerCardRetrievingResponseType0
	case CustomerCardRetrievingResponseType1:
		*s = CustomerCardRetrievingResponseType1
	case CustomerCardRetrievingResponseType2:
		*s = CustomerCardRetrievingResponseType2
	case CustomerCardRetrievingResponseType3:
		*s = CustomerCardRetrievingResponseType3
	default:
		*s = CustomerCardRetrievingResponseType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardRetrievingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardRetrievingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Token != nil {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.HolderName != nil {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Expire != nil {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardUpdatingRequest = [4]string{
	0: "token",
	1: "default_flag",
	2: "holder_name",
	3: "expire",
}

// Decode decodes CustomerCardUpdatingRequest from json.
func (s *CustomerCardUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			if err := func() error {
				s.Token = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Token = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.HolderName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "expire":
			if err := func() error {
				s.Expire = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Expire = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingRequestDefaultFlag as json.
func (s CustomerCardUpdatingRequestDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardUpdatingRequestDefaultFlag from json.
func (s *CustomerCardUpdatingRequestDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingRequestDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardUpdatingRequestDefaultFlag(v) {
	case CustomerCardUpdatingRequestDefaultFlag0:
		*s = CustomerCardUpdatingRequestDefaultFlag0
	case CustomerCardUpdatingRequestDefaultFlag1:
		*s = CustomerCardUpdatingRequestDefaultFlag1
	default:
		*s = CustomerCardUpdatingRequestDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardUpdatingRequestDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingRequestDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCardUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCardUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire != nil {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName != nil {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCardUpdatingResponse = [11]string{
	0:  "id",
	1:  "customer_id",
	2:  "default_flag",
	3:  "card_no",
	4:  "expire",
	5:  "holder_name",
	6:  "type",
	7:  "brand",
	8:  "card_no_hash",
	9:  "created",
	10: "updated",
}

// Decode decodes CustomerCardUpdatingResponse from json.
func (s *CustomerCardUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Expire = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.HolderName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCardUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCardUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseBrand as json.
func (s CustomerCardUpdatingResponseBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardUpdatingResponseBrand from json.
func (s *CustomerCardUpdatingResponseBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingResponseBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardUpdatingResponseBrand(v) {
	case CustomerCardUpdatingResponseBrandVISA:
		*s = CustomerCardUpdatingResponseBrandVISA
	case CustomerCardUpdatingResponseBrandMASTER:
		*s = CustomerCardUpdatingResponseBrandMASTER
	case CustomerCardUpdatingResponseBrandJCB:
		*s = CustomerCardUpdatingResponseBrandJCB
	case CustomerCardUpdatingResponseBrandAMEX:
		*s = CustomerCardUpdatingResponseBrandAMEX
	case CustomerCardUpdatingResponseBrandDINERS:
		*s = CustomerCardUpdatingResponseBrandDINERS
	case CustomerCardUpdatingResponseBrandDISCOVER:
		*s = CustomerCardUpdatingResponseBrandDISCOVER
	case CustomerCardUpdatingResponseBrandEmpty:
		*s = CustomerCardUpdatingResponseBrandEmpty
	default:
		*s = CustomerCardUpdatingResponseBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardUpdatingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseDefaultFlag as json.
func (s CustomerCardUpdatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardUpdatingResponseDefaultFlag from json.
func (s *CustomerCardUpdatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingResponseDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardUpdatingResponseDefaultFlag(v) {
	case CustomerCardUpdatingResponseDefaultFlag0:
		*s = CustomerCardUpdatingResponseDefaultFlag0
	case CustomerCardUpdatingResponseDefaultFlag1:
		*s = CustomerCardUpdatingResponseDefaultFlag1
	default:
		*s = CustomerCardUpdatingResponseDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardUpdatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseType as json.
func (s CustomerCardUpdatingResponseType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCardUpdatingResponseType from json.
func (s *CustomerCardUpdatingResponseType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCardUpdatingResponseType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCardUpdatingResponseType(v) {
	case CustomerCardUpdatingResponseType0:
		*s = CustomerCardUpdatingResponseType0
	case CustomerCardUpdatingResponseType1:
		*s = CustomerCardUpdatingResponseType1
	case CustomerCardUpdatingResponseType2:
		*s = CustomerCardUpdatingResponseType2
	case CustomerCardUpdatingResponseType3:
		*s = CustomerCardUpdatingResponseType3
	default:
		*s = CustomerCardUpdatingResponseType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCardUpdatingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCardUpdatingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCreatingRequest = [12]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
}

// Decode decodes CustomerCreatingRequest from json.
func (s *CustomerCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCreatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCreatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DirectdebitRegistration.Set {
			e.FieldStart("directdebit_registration")
			s.DirectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerCreatingResponse = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
	12: "card_registration",
	13: "directdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes CustomerCreatingResponse from json.
func (s *CustomerCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "directdebit_registration":
			if err := func() error {
				s.DirectdebitRegistration.Reset()
				if err := s.DirectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCreatingResponseCardRegistration as json.
func (s CustomerCreatingResponseCardRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCreatingResponseCardRegistration from json.
func (s *CustomerCreatingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCreatingResponseCardRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCreatingResponseCardRegistration(v) {
	case CustomerCreatingResponseCardRegistration0:
		*s = CustomerCreatingResponseCardRegistration0
	case CustomerCreatingResponseCardRegistration1:
		*s = CustomerCreatingResponseCardRegistration1
	default:
		*s = CustomerCreatingResponseCardRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCreatingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCreatingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCreatingResponseDirectdebitRegistration as json.
func (s CustomerCreatingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerCreatingResponseDirectdebitRegistration from json.
func (s *CustomerCreatingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerCreatingResponseDirectdebitRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerCreatingResponseDirectdebitRegistration(v) {
	case CustomerCreatingResponseDirectdebitRegistration0:
		*s = CustomerCreatingResponseDirectdebitRegistration0
	case CustomerCreatingResponseDirectdebitRegistration1:
		*s = CustomerCreatingResponseDirectdebitRegistration1
	default:
		*s = CustomerCreatingResponseDirectdebitRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerCreatingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerCreatingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes CustomerDeletingResponse from json.
func (s *CustomerDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDeletingResponseDeleteFlag as json.
func (s CustomerDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerDeletingResponseDeleteFlag from json.
func (s *CustomerDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerDeletingResponseDeleteFlag(v) {
	case CustomerDeletingResponseDeleteFlag1:
		*s = CustomerDeletingResponseDeleteFlag1
	case CustomerDeletingResponseDeleteFlag0:
		*s = CustomerDeletingResponseDeleteFlag0
	default:
		*s = CustomerDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDirectdebitRegistration as json.
func (s CustomerDirectdebitRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerDirectdebitRegistration from json.
func (s *CustomerDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerDirectdebitRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerDirectdebitRegistration(v) {
	case CustomerDirectdebitRegistration0:
		*s = CustomerDirectdebitRegistration0
	case CustomerDirectdebitRegistration1:
		*s = CustomerDirectdebitRegistration1
	default:
		*s = CustomerDirectdebitRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCustomerListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes CustomerListRetrievingResponse from json.
func (s *CustomerListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]Customer, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Customer
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("default_flag")
		s.DefaultFlag.Encode(e)
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequest = [9]string{
	0: "pay_type",
	1: "default_flag",
	2: "return_url",
	3: "return_url_on_failure",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
	7: "card",
	8: "directdebit",
}

// Decode decodes CustomerPaymentMethodCreatingRequest from json.
func (s *CustomerPaymentMethodCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "default_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequest) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequestCard) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("token")
		e.Str(s.Token)
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard = [49]string{
	0:  "token",
	1:  "tds_type",
	2:  "tds2_type",
	3:  "td_tenant_name",
	4:  "tds2_ch_acc_change",
	5:  "tds2_ch_acc_date",
	6:  "tds2_ch_acc_pw_change",
	7:  "tds2_nb_purchase_account",
	8:  "tds2_payment_acc_age",
	9:  "tds2_provision_attempts_day",
	10: "tds2_ship_address_usage",
	11: "tds2_ship_name_ind",
	12: "tds2_suspicious_acc_activity",
	13: "tds2_txn_activity_day",
	14: "tds2_txn_activity_year",
	15: "tds2_three_ds_req_auth_data",
	16: "tds2_three_ds_req_auth_method",
	17: "tds2_addr_match",
	18: "tds2_bill_addr_country",
	19: "tds2_bill_addr_state",
	20: "tds2_bill_addr_city",
	21: "tds2_bill_addr_line_1",
	22: "tds2_bill_addr_line_2",
	23: "tds2_bill_addr_line_3",
	24: "tds2_bill_addr_post_code",
	25: "tds2_ship_addr_country",
	26: "tds2_ship_addr_state",
	27: "tds2_ship_addr_city",
	28: "tds2_ship_addr_line_1",
	29: "tds2_ship_addr_line_2",
	30: "tds2_ship_addr_line_3",
	31: "tds2_ship_addr_post_code",
	32: "tds2_ship_ind",
	33: "tds2_delivery_email_address",
	34: "tds2_home_phone_cc",
	35: "tds2_home_phone_no",
	36: "tds2_mobile_phone_cc",
	37: "tds2_mobile_phone_no",
	38: "tds2_work_phone_cc",
	39: "tds2_work_phone_no",
	40: "tds2_delivery_timeframe",
	41: "tds2_pre_order_date",
	42: "tds2_pre_order_purchase_ind",
	43: "tds2_reorder_items_ind",
	44: "tds2_recurring_expiry",
	45: "tds2_recurring_frequency",
	46: "tds2_gift_card_amount",
	47: "tds2_gift_card_count",
	48: "tds2_gift_card_curr",
}

// Decode decodes CustomerPaymentMethodCreatingRequestCard from json.
func (s *CustomerPaymentMethodCreatingRequestCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCard to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "token":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Token = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequestCard")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequestCard[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2AddrMatch as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2AddrMatch from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2AddrMatch to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2AddrMatch(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY:
		*s = CustomerPaymentMethodCreatingRequestCardTds2AddrMatchY
	case CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN:
		*s = CustomerPaymentMethodCreatingRequestCardTds2AddrMatchN
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2AddrMatch(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe01
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe02
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe03
	case CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe04
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd01
	case CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd02
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd01
	case CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd02
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ShipInd as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ShipInd from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2ShipInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2ShipInd(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd01
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd02
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd03
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd04
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd05:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd05
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd06:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd06
	case CustomerPaymentMethodCreatingRequestCardTds2ShipInd07:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd07
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd01
	case CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd02
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity01
	case CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity02
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod01
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod02
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod03
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod04
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod05
	case CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod06
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2Type as json.
func (s CustomerPaymentMethodCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2Type from json.
func (s *CustomerPaymentMethodCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTds2Type(v) {
	case CustomerPaymentMethodCreatingRequestCardTds2Type2:
		*s = CustomerPaymentMethodCreatingRequestCardTds2Type2
	case CustomerPaymentMethodCreatingRequestCardTds2Type3:
		*s = CustomerPaymentMethodCreatingRequestCardTds2Type3
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTdsType as json.
func (s CustomerPaymentMethodCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTdsType from json.
func (s *CustomerPaymentMethodCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestCardTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestCardTdsType(v) {
	case CustomerPaymentMethodCreatingRequestCardTdsType0:
		*s = CustomerPaymentMethodCreatingRequestCardTdsType0
	case CustomerPaymentMethodCreatingRequestCardTdsType2:
		*s = CustomerPaymentMethodCreatingRequestCardTdsType2
	default:
		*s = CustomerPaymentMethodCreatingRequestCardTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDefaultFlag as json.
func (s CustomerPaymentMethodCreatingRequestDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestDefaultFlag from json.
func (s *CustomerPaymentMethodCreatingRequestDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestDefaultFlag(v) {
	case CustomerPaymentMethodCreatingRequestDefaultFlag0:
		*s = CustomerPaymentMethodCreatingRequestDefaultFlag0
	case CustomerPaymentMethodCreatingRequestDefaultFlag1:
		*s = CustomerPaymentMethodCreatingRequestDefaultFlag1
	default:
		*s = CustomerPaymentMethodCreatingRequestDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("application_type")
		s.ApplicationType.Encode(e)
	}
	{
		e.FieldStart("bank_code")
		s.BankCode.Encode(e)
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		e.FieldStart("account_name_kana")
		s.AccountNameKana.Encode(e)
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit = [8]string{
	0: "application_type",
	1: "bank_code",
	2: "branch_code",
	3: "account_type",
	4: "account_number",
	5: "account_name",
	6: "account_name_kana",
	7: "paper_application",
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebit from json.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDirectdebit to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "bank_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequestDirectdebit")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit) {
					name = jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebit[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebitAccountType as json.
func (s CustomerPaymentMethodCreatingRequestDirectdebitAccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitAccountType from json.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDirectdebitAccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestDirectdebitAccountType(v) {
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType0:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitAccountType0
	case CustomerPaymentMethodCreatingRequestDirectdebitAccountType1:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitAccountType1
	default:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitAccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebitApplicationType as json.
func (s CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitApplicationType from json.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDirectdebitApplicationType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestDirectdebitApplicationType(v) {
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypePAPER
	case CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitApplicationTypeONLINE
	default:
		*s = CustomerPaymentMethodCreatingRequestDirectdebitApplicationType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication = [3]string{
	0: "postal_account_number_1",
	1: "postal_account_number_2",
	2: "request_form_id",
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication from json.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestPayType as json.
func (s CustomerPaymentMethodCreatingRequestPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingRequestPayType from json.
func (s *CustomerPaymentMethodCreatingRequestPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingRequestPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingRequestPayType(v) {
	case CustomerPaymentMethodCreatingRequestPayTypeCard:
		*s = CustomerPaymentMethodCreatingRequestPayTypeCard
	case CustomerPaymentMethodCreatingRequestPayTypeDirectdebit:
		*s = CustomerPaymentMethodCreatingRequestPayTypeDirectdebit
	default:
		*s = CustomerPaymentMethodCreatingRequestPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingRequestPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingRequestPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectURLAccessedFlag.Set {
			e.FieldStart("redirect_url_accessed_flag")
			s.RedirectURLAccessedFlag.Encode(e)
		}
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.ProcessDate != nil {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingResponse = [18]string{
	0:  "id",
	1:  "pay_type",
	2:  "customer_id",
	3:  "status",
	4:  "redirect_url",
	5:  "redirect_url_accessed_flag",
	6:  "return_url",
	7:  "return_url_on_failure",
	8:  "default_flag",
	9:  "client_field_1",
	10: "client_field_2",
	11: "client_field_3",
	12: "delete_flag",
	13: "process_date",
	14: "created",
	15: "updated",
	16: "card",
	17: "directdebit",
}

// Decode decodes CustomerPaymentMethodCreatingResponse from json.
func (s *CustomerPaymentMethodCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_url_accessed_flag":
			if err := func() error {
				s.RedirectURLAccessedFlag.Reset()
				if err := s.RedirectURLAccessedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url_accessed_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProcessDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingResponseCard) encodeFields(e *jx.Encoder) {
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type != nil {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand != nil {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.TdsType != nil {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type != nil {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Acs.Set {
			e.FieldStart("acs")
			s.Acs.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingResponseCard = [12]string{
	0:  "card_no",
	1:  "expire",
	2:  "holder_name",
	3:  "type",
	4:  "brand",
	5:  "card_no_hash",
	6:  "tds_type",
	7:  "tds2_type",
	8:  "tds2_status",
	9:  "merchant_name",
	10: "access_id",
	11: "acs",
}

// Decode decodes CustomerPaymentMethodCreatingResponseCard from json.
func (s *CustomerPaymentMethodCreatingResponseCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type = nil
				var elem NilCustomerPaymentMethodCreatingResponseCardType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand = nil
				var elem NilCustomerPaymentMethodCreatingResponseCardBrand
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Brand = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType = nil
				var elem NilCustomerPaymentMethodCreatingResponseCardTdsType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TdsType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type = nil
				var elem NilCustomerPaymentMethodCreatingResponseCardTds2Type
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "acs":
			if err := func() error {
				s.Acs.Reset()
				if err := s.Acs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingResponseCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardBrand as json.
func (s CustomerPaymentMethodCreatingResponseCardBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardBrand from json.
func (s *CustomerPaymentMethodCreatingResponseCardBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseCardBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseCardBrand(v) {
	case CustomerPaymentMethodCreatingResponseCardBrandVISA:
		*s = CustomerPaymentMethodCreatingResponseCardBrandVISA
	case CustomerPaymentMethodCreatingResponseCardBrandMASTER:
		*s = CustomerPaymentMethodCreatingResponseCardBrandMASTER
	case CustomerPaymentMethodCreatingResponseCardBrandJCB:
		*s = CustomerPaymentMethodCreatingResponseCardBrandJCB
	case CustomerPaymentMethodCreatingResponseCardBrandAMEX:
		*s = CustomerPaymentMethodCreatingResponseCardBrandAMEX
	case CustomerPaymentMethodCreatingResponseCardBrandDINERS:
		*s = CustomerPaymentMethodCreatingResponseCardBrandDINERS
	case CustomerPaymentMethodCreatingResponseCardBrandDISCOVER:
		*s = CustomerPaymentMethodCreatingResponseCardBrandDISCOVER
	case CustomerPaymentMethodCreatingResponseCardBrandEmpty:
		*s = CustomerPaymentMethodCreatingResponseCardBrandEmpty
	default:
		*s = CustomerPaymentMethodCreatingResponseCardBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardTds2Type as json.
func (s CustomerPaymentMethodCreatingResponseCardTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardTds2Type from json.
func (s *CustomerPaymentMethodCreatingResponseCardTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseCardTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseCardTds2Type(v) {
	case CustomerPaymentMethodCreatingResponseCardTds2Type2:
		*s = CustomerPaymentMethodCreatingResponseCardTds2Type2
	case CustomerPaymentMethodCreatingResponseCardTds2Type3:
		*s = CustomerPaymentMethodCreatingResponseCardTds2Type3
	default:
		*s = CustomerPaymentMethodCreatingResponseCardTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardTdsType as json.
func (s CustomerPaymentMethodCreatingResponseCardTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardTdsType from json.
func (s *CustomerPaymentMethodCreatingResponseCardTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseCardTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseCardTdsType(v) {
	case CustomerPaymentMethodCreatingResponseCardTdsType0:
		*s = CustomerPaymentMethodCreatingResponseCardTdsType0
	case CustomerPaymentMethodCreatingResponseCardTdsType2:
		*s = CustomerPaymentMethodCreatingResponseCardTdsType2
	default:
		*s = CustomerPaymentMethodCreatingResponseCardTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardType as json.
func (s CustomerPaymentMethodCreatingResponseCardType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardType from json.
func (s *CustomerPaymentMethodCreatingResponseCardType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseCardType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseCardType(v) {
	case CustomerPaymentMethodCreatingResponseCardType0:
		*s = CustomerPaymentMethodCreatingResponseCardType0
	case CustomerPaymentMethodCreatingResponseCardType1:
		*s = CustomerPaymentMethodCreatingResponseCardType1
	case CustomerPaymentMethodCreatingResponseCardType2:
		*s = CustomerPaymentMethodCreatingResponseCardType2
	case CustomerPaymentMethodCreatingResponseCardType3:
		*s = CustomerPaymentMethodCreatingResponseCardType3
	default:
		*s = CustomerPaymentMethodCreatingResponseCardType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDefaultFlag as json.
func (s CustomerPaymentMethodCreatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDefaultFlag from json.
func (s *CustomerPaymentMethodCreatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseDefaultFlag(v) {
	case CustomerPaymentMethodCreatingResponseDefaultFlag0:
		*s = CustomerPaymentMethodCreatingResponseDefaultFlag0
	case CustomerPaymentMethodCreatingResponseDefaultFlag1:
		*s = CustomerPaymentMethodCreatingResponseDefaultFlag1
	default:
		*s = CustomerPaymentMethodCreatingResponseDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDeleteFlag as json.
func (s CustomerPaymentMethodCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDeleteFlag from json.
func (s *CustomerPaymentMethodCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseDeleteFlag(v) {
	case CustomerPaymentMethodCreatingResponseDeleteFlag1:
		*s = CustomerPaymentMethodCreatingResponseDeleteFlag1
	case CustomerPaymentMethodCreatingResponseDeleteFlag0:
		*s = CustomerPaymentMethodCreatingResponseDeleteFlag0
	default:
		*s = CustomerPaymentMethodCreatingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) encodeFields(e *jx.Encoder) {
	{
		if s.ApplicationType.Set {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.ExpectedBillableDate.Set {
			e.FieldStart("expected_billable_date")
			s.ExpectedBillableDate.Encode(e)
		}
	}
	{
		if s.LastWithdrawalDate.Set {
			e.FieldStart("last_withdrawal_date")
			s.LastWithdrawalDate.Encode(e)
		}
	}
	{
		if s.LastResultCode.Set {
			e.FieldStart("last_result_code")
			s.LastResultCode.Encode(e)
		}
	}
	{
		if s.BankType.Set {
			e.FieldStart("bank_type")
			s.BankType.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		if s.AccountNameKana.Set {
			e.FieldStart("account_name_kana")
			s.AccountNameKana.Encode(e)
		}
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingResponseDirectdebit = [16]string{
	0:  "application_type",
	1:  "expected_billable_date",
	2:  "last_withdrawal_date",
	3:  "last_result_code",
	4:  "bank_type",
	5:  "bank_code",
	6:  "bank_name",
	7:  "branch_code",
	8:  "branch_name",
	9:  "account_type",
	10: "account_number",
	11: "postal_account_number_1",
	12: "postal_account_number_2",
	13: "account_name",
	14: "account_name_kana",
	15: "paper_application",
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebit from json.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDirectdebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			if err := func() error {
				s.ApplicationType.Reset()
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "expected_billable_date":
			if err := func() error {
				s.ExpectedBillableDate.Reset()
				if err := s.ExpectedBillableDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expected_billable_date\"")
			}
		case "last_withdrawal_date":
			if err := func() error {
				s.LastWithdrawalDate.Reset()
				if err := s.LastWithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_withdrawal_date\"")
			}
		case "last_result_code":
			if err := func() error {
				s.LastResultCode.Reset()
				if err := s.LastResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_result_code\"")
			}
		case "bank_type":
			if err := func() error {
				s.BankType.Reset()
				if err := s.BankType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_type\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			if err := func() error {
				s.AccountNameKana.Reset()
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingResponseDirectdebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebitAccountType as json.
func (s CustomerPaymentMethodCreatingResponseDirectdebitAccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitAccountType from json.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDirectdebitAccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseDirectdebitAccountType(v) {
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType0:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitAccountType0
	case CustomerPaymentMethodCreatingResponseDirectdebitAccountType1:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitAccountType1
	default:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitAccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebitBankType as json.
func (s CustomerPaymentMethodCreatingResponseDirectdebitBankType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitBankType from json.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitBankType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDirectdebitBankType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseDirectdebitBankType(v) {
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType0:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitBankType0
	case CustomerPaymentMethodCreatingResponseDirectdebitBankType1:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitBankType1
	default:
		*s = CustomerPaymentMethodCreatingResponseDirectdebitBankType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PreregisteredDate.Set {
			e.FieldStart("preregistered_date")
			s.PreregisteredDate.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
	{
		if s.PaperFailureDescription.Set {
			e.FieldStart("paper_failure_description")
			s.PaperFailureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication = [3]string{
	0: "preregistered_date",
	1: "request_form_id",
	2: "paper_failure_description",
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication from json.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "preregistered_date":
			if err := func() error {
				s.PreregisteredDate.Reset()
				if err := s.PreregisteredDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preregistered_date\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		case "paper_failure_description":
			if err := func() error {
				s.PaperFailureDescription.Reset()
				if err := s.PaperFailureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_failure_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponsePayType as json.
func (s CustomerPaymentMethodCreatingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponsePayType from json.
func (s *CustomerPaymentMethodCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponsePayType(v) {
	case CustomerPaymentMethodCreatingResponsePayTypeCard:
		*s = CustomerPaymentMethodCreatingResponsePayTypeCard
	case CustomerPaymentMethodCreatingResponsePayTypeDirectdebit:
		*s = CustomerPaymentMethodCreatingResponsePayTypeDirectdebit
	default:
		*s = CustomerPaymentMethodCreatingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag as json.
func (s CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag from json.
func (s *CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag(v) {
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0:
		*s = CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag0
	case CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1:
		*s = CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag1
	default:
		*s = CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes CustomerPaymentMethodDeletingResponse from json.
func (s *CustomerPaymentMethodDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodDeletingResponseDeleteFlag as json.
func (s CustomerPaymentMethodDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodDeletingResponseDeleteFlag from json.
func (s *CustomerPaymentMethodDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodDeletingResponseDeleteFlag(v) {
	case CustomerPaymentMethodDeletingResponseDeleteFlag1:
		*s = CustomerPaymentMethodDeletingResponseDeleteFlag1
	case CustomerPaymentMethodDeletingResponseDeleteFlag0:
		*s = CustomerPaymentMethodDeletingResponseDeleteFlag0
	default:
		*s = CustomerPaymentMethodDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes CustomerPaymentMethodListRetrievingResponse from json.
func (s *CustomerPaymentMethodListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]PaymentMethod, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentMethod
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectURLAccessedFlag.Set {
			e.FieldStart("redirect_url_accessed_flag")
			s.RedirectURLAccessedFlag.Encode(e)
		}
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.ProcessDate != nil {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodRetrievingResponse = [18]string{
	0:  "id",
	1:  "pay_type",
	2:  "customer_id",
	3:  "status",
	4:  "redirect_url",
	5:  "redirect_url_accessed_flag",
	6:  "return_url",
	7:  "return_url_on_failure",
	8:  "default_flag",
	9:  "client_field_1",
	10: "client_field_2",
	11: "client_field_3",
	12: "delete_flag",
	13: "process_date",
	14: "created",
	15: "updated",
	16: "card",
	17: "directdebit",
}

// Decode decodes CustomerPaymentMethodRetrievingResponse from json.
func (s *CustomerPaymentMethodRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_url_accessed_flag":
			if err := func() error {
				s.RedirectURLAccessedFlag.Reset()
				if err := s.RedirectURLAccessedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url_accessed_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProcessDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodRetrievingResponseCard) encodeFields(e *jx.Encoder) {
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type != nil {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand != nil {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.TdsType != nil {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type != nil {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Acs.Set {
			e.FieldStart("acs")
			s.Acs.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodRetrievingResponseCard = [12]string{
	0:  "card_no",
	1:  "expire",
	2:  "holder_name",
	3:  "type",
	4:  "brand",
	5:  "card_no_hash",
	6:  "tds_type",
	7:  "tds2_type",
	8:  "tds2_status",
	9:  "merchant_name",
	10: "access_id",
	11: "acs",
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCard from json.
func (s *CustomerPaymentMethodRetrievingResponseCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type = nil
				var elem NilCustomerPaymentMethodRetrievingResponseCardType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand = nil
				var elem NilCustomerPaymentMethodRetrievingResponseCardBrand
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Brand = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType = nil
				var elem NilCustomerPaymentMethodRetrievingResponseCardTdsType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TdsType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type = nil
				var elem NilCustomerPaymentMethodRetrievingResponseCardTds2Type
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "acs":
			if err := func() error {
				s.Acs.Reset()
				if err := s.Acs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodRetrievingResponseCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardBrand as json.
func (s CustomerPaymentMethodRetrievingResponseCardBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardBrand from json.
func (s *CustomerPaymentMethodRetrievingResponseCardBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseCardBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseCardBrand(v) {
	case CustomerPaymentMethodRetrievingResponseCardBrandVISA:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandVISA
	case CustomerPaymentMethodRetrievingResponseCardBrandMASTER:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandMASTER
	case CustomerPaymentMethodRetrievingResponseCardBrandJCB:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandJCB
	case CustomerPaymentMethodRetrievingResponseCardBrandAMEX:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandAMEX
	case CustomerPaymentMethodRetrievingResponseCardBrandDINERS:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandDINERS
	case CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandDISCOVER
	case CustomerPaymentMethodRetrievingResponseCardBrandEmpty:
		*s = CustomerPaymentMethodRetrievingResponseCardBrandEmpty
	default:
		*s = CustomerPaymentMethodRetrievingResponseCardBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardTds2Type as json.
func (s CustomerPaymentMethodRetrievingResponseCardTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardTds2Type from json.
func (s *CustomerPaymentMethodRetrievingResponseCardTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseCardTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseCardTds2Type(v) {
	case CustomerPaymentMethodRetrievingResponseCardTds2Type2:
		*s = CustomerPaymentMethodRetrievingResponseCardTds2Type2
	case CustomerPaymentMethodRetrievingResponseCardTds2Type3:
		*s = CustomerPaymentMethodRetrievingResponseCardTds2Type3
	default:
		*s = CustomerPaymentMethodRetrievingResponseCardTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardTdsType as json.
func (s CustomerPaymentMethodRetrievingResponseCardTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardTdsType from json.
func (s *CustomerPaymentMethodRetrievingResponseCardTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseCardTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseCardTdsType(v) {
	case CustomerPaymentMethodRetrievingResponseCardTdsType0:
		*s = CustomerPaymentMethodRetrievingResponseCardTdsType0
	case CustomerPaymentMethodRetrievingResponseCardTdsType2:
		*s = CustomerPaymentMethodRetrievingResponseCardTdsType2
	default:
		*s = CustomerPaymentMethodRetrievingResponseCardTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardType as json.
func (s CustomerPaymentMethodRetrievingResponseCardType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardType from json.
func (s *CustomerPaymentMethodRetrievingResponseCardType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseCardType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseCardType(v) {
	case CustomerPaymentMethodRetrievingResponseCardType0:
		*s = CustomerPaymentMethodRetrievingResponseCardType0
	case CustomerPaymentMethodRetrievingResponseCardType1:
		*s = CustomerPaymentMethodRetrievingResponseCardType1
	case CustomerPaymentMethodRetrievingResponseCardType2:
		*s = CustomerPaymentMethodRetrievingResponseCardType2
	case CustomerPaymentMethodRetrievingResponseCardType3:
		*s = CustomerPaymentMethodRetrievingResponseCardType3
	default:
		*s = CustomerPaymentMethodRetrievingResponseCardType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDefaultFlag as json.
func (s CustomerPaymentMethodRetrievingResponseDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDefaultFlag from json.
func (s *CustomerPaymentMethodRetrievingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseDefaultFlag(v) {
	case CustomerPaymentMethodRetrievingResponseDefaultFlag0:
		*s = CustomerPaymentMethodRetrievingResponseDefaultFlag0
	case CustomerPaymentMethodRetrievingResponseDefaultFlag1:
		*s = CustomerPaymentMethodRetrievingResponseDefaultFlag1
	default:
		*s = CustomerPaymentMethodRetrievingResponseDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDeleteFlag as json.
func (s CustomerPaymentMethodRetrievingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDeleteFlag from json.
func (s *CustomerPaymentMethodRetrievingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseDeleteFlag(v) {
	case CustomerPaymentMethodRetrievingResponseDeleteFlag1:
		*s = CustomerPaymentMethodRetrievingResponseDeleteFlag1
	case CustomerPaymentMethodRetrievingResponseDeleteFlag0:
		*s = CustomerPaymentMethodRetrievingResponseDeleteFlag0
	default:
		*s = CustomerPaymentMethodRetrievingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) encodeFields(e *jx.Encoder) {
	{
		if s.ApplicationType.Set {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.ExpectedBillableDate.Set {
			e.FieldStart("expected_billable_date")
			s.ExpectedBillableDate.Encode(e)
		}
	}
	{
		if s.LastWithdrawalDate.Set {
			e.FieldStart("last_withdrawal_date")
			s.LastWithdrawalDate.Encode(e)
		}
	}
	{
		if s.LastResultCode.Set {
			e.FieldStart("last_result_code")
			s.LastResultCode.Encode(e)
		}
	}
	{
		if s.BankType.Set {
			e.FieldStart("bank_type")
			s.BankType.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		if s.AccountNameKana.Set {
			e.FieldStart("account_name_kana")
			s.AccountNameKana.Encode(e)
		}
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodRetrievingResponseDirectdebit = [16]string{
	0:  "application_type",
	1:  "expected_billable_date",
	2:  "last_withdrawal_date",
	3:  "last_result_code",
	4:  "bank_type",
	5:  "bank_code",
	6:  "bank_name",
	7:  "branch_code",
	8:  "branch_name",
	9:  "account_type",
	10: "account_number",
	11: "postal_account_number_1",
	12: "postal_account_number_2",
	13: "account_name",
	14: "account_name_kana",
	15: "paper_application",
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebit from json.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDirectdebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			if err := func() error {
				s.ApplicationType.Reset()
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "expected_billable_date":
			if err := func() error {
				s.ExpectedBillableDate.Reset()
				if err := s.ExpectedBillableDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expected_billable_date\"")
			}
		case "last_withdrawal_date":
			if err := func() error {
				s.LastWithdrawalDate.Reset()
				if err := s.LastWithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_withdrawal_date\"")
			}
		case "last_result_code":
			if err := func() error {
				s.LastResultCode.Reset()
				if err := s.LastResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_result_code\"")
			}
		case "bank_type":
			if err := func() error {
				s.BankType.Reset()
				if err := s.BankType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_type\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			if err := func() error {
				s.AccountNameKana.Reset()
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodRetrievingResponseDirectdebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebitAccountType as json.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitAccountType from json.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDirectdebitAccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseDirectdebitAccountType(v) {
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitAccountType0
	case CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitAccountType1
	default:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitAccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebitBankType as json.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitBankType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitBankType from json.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitBankType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDirectdebitBankType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseDirectdebitBankType(v) {
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType0:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitBankType0
	case CustomerPaymentMethodRetrievingResponseDirectdebitBankType1:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitBankType1
	default:
		*s = CustomerPaymentMethodRetrievingResponseDirectdebitBankType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PreregisteredDate.Set {
			e.FieldStart("preregistered_date")
			s.PreregisteredDate.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
	{
		if s.PaperFailureDescription.Set {
			e.FieldStart("paper_failure_description")
			s.PaperFailureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication = [3]string{
	0: "preregistered_date",
	1: "request_form_id",
	2: "paper_failure_description",
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication from json.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "preregistered_date":
			if err := func() error {
				s.PreregisteredDate.Reset()
				if err := s.PreregisteredDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preregistered_date\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		case "paper_failure_description":
			if err := func() error {
				s.PaperFailureDescription.Reset()
				if err := s.PaperFailureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_failure_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponsePayType as json.
func (s CustomerPaymentMethodRetrievingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponsePayType from json.
func (s *CustomerPaymentMethodRetrievingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponsePayType(v) {
	case CustomerPaymentMethodRetrievingResponsePayTypeCard:
		*s = CustomerPaymentMethodRetrievingResponsePayTypeCard
	case CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit:
		*s = CustomerPaymentMethodRetrievingResponsePayTypeDirectdebit
	default:
		*s = CustomerPaymentMethodRetrievingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag as json.
func (s CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag from json.
func (s *CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag(v) {
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0:
		*s = CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag0
	case CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1:
		*s = CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag1
	default:
		*s = CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DirectdebitRegistration.Set {
			e.FieldStart("directdebit_registration")
			s.DirectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerRetrievingResponse = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
	12: "card_registration",
	13: "directdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes CustomerRetrievingResponse from json.
func (s *CustomerRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "directdebit_registration":
			if err := func() error {
				s.DirectdebitRegistration.Reset()
				if err := s.DirectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerRetrievingResponseCardRegistration as json.
func (s CustomerRetrievingResponseCardRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerRetrievingResponseCardRegistration from json.
func (s *CustomerRetrievingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerRetrievingResponseCardRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerRetrievingResponseCardRegistration(v) {
	case CustomerRetrievingResponseCardRegistration0:
		*s = CustomerRetrievingResponseCardRegistration0
	case CustomerRetrievingResponseCardRegistration1:
		*s = CustomerRetrievingResponseCardRegistration1
	default:
		*s = CustomerRetrievingResponseCardRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerRetrievingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerRetrievingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerRetrievingResponseDirectdebitRegistration as json.
func (s CustomerRetrievingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerRetrievingResponseDirectdebitRegistration from json.
func (s *CustomerRetrievingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerRetrievingResponseDirectdebitRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerRetrievingResponseDirectdebitRegistration(v) {
	case CustomerRetrievingResponseDirectdebitRegistration0:
		*s = CustomerRetrievingResponseDirectdebitRegistration0
	case CustomerRetrievingResponseDirectdebitRegistration1:
		*s = CustomerRetrievingResponseDirectdebitRegistration1
	default:
		*s = CustomerRetrievingResponseDirectdebitRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerRetrievingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerRetrievingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerUpdatingRequest = [11]string{
	0:  "name",
	1:  "email",
	2:  "phone_cc",
	3:  "phone_no",
	4:  "addr_country",
	5:  "addr_state",
	6:  "addr_city",
	7:  "addr_line_1",
	8:  "addr_line_2",
	9:  "addr_line_3",
	10: "addr_post_code",
}

// Decode decodes CustomerUpdatingRequest from json.
func (s *CustomerUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CustomerUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CustomerUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.PhoneCc.Set {
			e.FieldStart("phone_cc")
			s.PhoneCc.Encode(e)
		}
	}
	{
		if s.PhoneNo.Set {
			e.FieldStart("phone_no")
			s.PhoneNo.Encode(e)
		}
	}
	{
		if s.AddrCountry.Set {
			e.FieldStart("addr_country")
			s.AddrCountry.Encode(e)
		}
	}
	{
		if s.AddrState.Set {
			e.FieldStart("addr_state")
			s.AddrState.Encode(e)
		}
	}
	{
		if s.AddrCity.Set {
			e.FieldStart("addr_city")
			s.AddrCity.Encode(e)
		}
	}
	{
		if s.AddrLine1.Set {
			e.FieldStart("addr_line_1")
			s.AddrLine1.Encode(e)
		}
	}
	{
		if s.AddrLine2.Set {
			e.FieldStart("addr_line_2")
			s.AddrLine2.Encode(e)
		}
	}
	{
		if s.AddrLine3.Set {
			e.FieldStart("addr_line_3")
			s.AddrLine3.Encode(e)
		}
	}
	{
		if s.AddrPostCode.Set {
			e.FieldStart("addr_post_code")
			s.AddrPostCode.Encode(e)
		}
	}
	{
		if s.CardRegistration.Set {
			e.FieldStart("card_registration")
			s.CardRegistration.Encode(e)
		}
	}
	{
		if s.DirectdebitRegistration.Set {
			e.FieldStart("directdebit_registration")
			s.DirectdebitRegistration.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfCustomerUpdatingResponse = [16]string{
	0:  "id",
	1:  "name",
	2:  "email",
	3:  "phone_cc",
	4:  "phone_no",
	5:  "addr_country",
	6:  "addr_state",
	7:  "addr_city",
	8:  "addr_line_1",
	9:  "addr_line_2",
	10: "addr_line_3",
	11: "addr_post_code",
	12: "card_registration",
	13: "directdebit_registration",
	14: "created",
	15: "updated",
}

// Decode decodes CustomerUpdatingResponse from json.
func (s *CustomerUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "phone_cc":
			if err := func() error {
				s.PhoneCc.Reset()
				if err := s.PhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_cc\"")
			}
		case "phone_no":
			if err := func() error {
				s.PhoneNo.Reset()
				if err := s.PhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"phone_no\"")
			}
		case "addr_country":
			if err := func() error {
				s.AddrCountry.Reset()
				if err := s.AddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_country\"")
			}
		case "addr_state":
			if err := func() error {
				s.AddrState.Reset()
				if err := s.AddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_state\"")
			}
		case "addr_city":
			if err := func() error {
				s.AddrCity.Reset()
				if err := s.AddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_city\"")
			}
		case "addr_line_1":
			if err := func() error {
				s.AddrLine1.Reset()
				if err := s.AddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_1\"")
			}
		case "addr_line_2":
			if err := func() error {
				s.AddrLine2.Reset()
				if err := s.AddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_2\"")
			}
		case "addr_line_3":
			if err := func() error {
				s.AddrLine3.Reset()
				if err := s.AddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_line_3\"")
			}
		case "addr_post_code":
			if err := func() error {
				s.AddrPostCode.Reset()
				if err := s.AddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"addr_post_code\"")
			}
		case "card_registration":
			if err := func() error {
				s.CardRegistration.Reset()
				if err := s.CardRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_registration\"")
			}
		case "directdebit_registration":
			if err := func() error {
				s.DirectdebitRegistration.Reset()
				if err := s.DirectdebitRegistration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit_registration\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CustomerUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CustomerUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerUpdatingResponseCardRegistration as json.
func (s CustomerUpdatingResponseCardRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerUpdatingResponseCardRegistration from json.
func (s *CustomerUpdatingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerUpdatingResponseCardRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerUpdatingResponseCardRegistration(v) {
	case CustomerUpdatingResponseCardRegistration0:
		*s = CustomerUpdatingResponseCardRegistration0
	case CustomerUpdatingResponseCardRegistration1:
		*s = CustomerUpdatingResponseCardRegistration1
	default:
		*s = CustomerUpdatingResponseCardRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerUpdatingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerUpdatingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerUpdatingResponseDirectdebitRegistration as json.
func (s CustomerUpdatingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes CustomerUpdatingResponseDirectdebitRegistration from json.
func (s *CustomerUpdatingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CustomerUpdatingResponseDirectdebitRegistration to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch CustomerUpdatingResponseDirectdebitRegistration(v) {
	case CustomerUpdatingResponseDirectdebitRegistration0:
		*s = CustomerUpdatingResponseDirectdebitRegistration0
	case CustomerUpdatingResponseDirectdebitRegistration1:
		*s = CustomerUpdatingResponseDirectdebitRegistration1
	default:
		*s = CustomerUpdatingResponseDirectdebitRegistration(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s CustomerUpdatingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CustomerUpdatingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositStatusCode as json.
func (s DepositStatusCode) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes DepositStatusCode from json.
func (s *DepositStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DepositStatusCode to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = DepositStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitApplicationType as json.
func (s DirectDebitApplicationType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DirectDebitApplicationType from json.
func (s *DirectDebitApplicationType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DirectDebitApplicationType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DirectDebitApplicationType(v) {
	case DirectDebitApplicationTypePAPER:
		*s = DirectDebitApplicationTypePAPER
	case DirectDebitApplicationTypeONLINE:
		*s = DirectDebitApplicationTypeONLINE
	default:
		*s = DirectDebitApplicationType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DirectDebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DirectDebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitLastResultCode as json.
func (s DirectDebitLastResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DirectDebitLastResultCode from json.
func (s *DirectDebitLastResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DirectDebitLastResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DirectDebitLastResultCode(v) {
	case DirectDebitLastResultCode0:
		*s = DirectDebitLastResultCode0
	case DirectDebitLastResultCode1:
		*s = DirectDebitLastResultCode1
	case DirectDebitLastResultCode2:
		*s = DirectDebitLastResultCode2
	case DirectDebitLastResultCode3:
		*s = DirectDebitLastResultCode3
	case DirectDebitLastResultCode4:
		*s = DirectDebitLastResultCode4
	case DirectDebitLastResultCode8:
		*s = DirectDebitLastResultCode8
	case DirectDebitLastResultCode9:
		*s = DirectDebitLastResultCode9
	case DirectDebitLastResultCodeE:
		*s = DirectDebitLastResultCodeE
	case DirectDebitLastResultCodeN:
		*s = DirectDebitLastResultCodeN
	default:
		*s = DirectDebitLastResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DirectDebitLastResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DirectDebitLastResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileUploadingRequestMultipartType as json.
func (s ExaminationFileUploadingRequestMultipartType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationFileUploadingRequestMultipartType from json.
func (s *ExaminationFileUploadingRequestMultipartType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUploadingRequestMultipartType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationFileUploadingRequestMultipartType(v) {
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEFRONT
	case ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeDRIVERLICENSEBACK
	case ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeSEALREGISTRATIONFRONT
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDFRONT
	case ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeRESIDENTCARDBACK
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTFRONT
	case ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK:
		*s = ExaminationFileUploadingRequestMultipartTypeSPECIALPERMANENTRESIDENTBACK
	case ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeCERTIFICATEOFRESIDENCEFRONT
	case ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT:
		*s = ExaminationFileUploadingRequestMultipartTypeMYNUMBERCARDFRONT
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE1
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE2
	case ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3:
		*s = ExaminationFileUploadingRequestMultipartTypePRODUCTIMAGE3
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP:
		*s = ExaminationFileUploadingRequestMultipartTypeAPPIMAGETOP
	case ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON:
		*s = ExaminationFileUploadingRequestMultipartTypeAPPIMAGEICON
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE1
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE2
	case ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3:
		*s = ExaminationFileUploadingRequestMultipartTypeSALESLICENSE3
	case ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION:
		*s = ExaminationFileUploadingRequestMultipartTypeCOPYOFCORPORATEREGISTRATION
	default:
		*s = ExaminationFileUploadingRequestMultipartType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationFileUploadingRequestMultipartType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUploadingRequestMultipartType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationFileUploadingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationFileUploadingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationFiles != nil {
			e.FieldStart("examination_files")
			e.ArrStart()
			for _, elem := range s.ExaminationFiles {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfExaminationFileUploadingResponse = [1]string{
	0: "examination_files",
}

// Decode decodes ExaminationFileUploadingResponse from json.
func (s *ExaminationFileUploadingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUploadingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_files":
			if err := func() error {
				s.ExaminationFiles = make([]ExaminationFileUploadingResponseExaminationFilesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ExaminationFileUploadingResponseExaminationFilesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ExaminationFiles = append(s.ExaminationFiles, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_files\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationFileUploadingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationFileUploadingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUploadingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Filename.Set {
			e.FieldStart("filename")
			s.Filename.Encode(e)
		}
	}
	{
		if s.Filesize.Set {
			e.FieldStart("filesize")
			s.Filesize.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationFileUploadingResponseExaminationFilesItem = [4]string{
	0: "shop_id",
	1: "type",
	2: "filename",
	3: "filesize",
}

// Decode decodes ExaminationFileUploadingResponseExaminationFilesItem from json.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUploadingResponseExaminationFilesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "filename":
			if err := func() error {
				s.Filename.Reset()
				if err := s.Filename.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filename\"")
			}
		case "filesize":
			if err := func() error {
				s.Filesize.Reset()
				if err := s.Filesize.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filesize\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationFileUploadingResponseExaminationFilesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUploadingResponseExaminationFilesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileUploadingResponseExaminationFilesItemType as json.
func (s ExaminationFileUploadingResponseExaminationFilesItemType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationFileUploadingResponseExaminationFilesItemType from json.
func (s *ExaminationFileUploadingResponseExaminationFilesItemType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationFileUploadingResponseExaminationFilesItemType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationFileUploadingResponseExaminationFilesItemType(v) {
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeDRIVERLICENSEBACK
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSEALREGISTRATIONFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeRESIDENTCARDBACK
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSPECIALPERMANENTRESIDENTBACK
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeCERTIFICATEOFRESIDENCEFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeMYNUMBERCARDFRONT
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE1
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE2
	case ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypePRODUCTIMAGE3
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGETOP
	case ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeAPPIMAGEICON
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE1
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE2
	case ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeSALESLICENSE3
	case ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION:
		*s = ExaminationFileUploadingResponseExaminationFilesItemTypeCOPYOFCORPORATEREGISTRATION
	default:
		*s = ExaminationFileUploadingResponseExaminationFilesItemType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationFileUploadingResponseExaminationFilesItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationFileUploadingResponseExaminationFilesItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.DepositCycleMasterID.Set {
			e.FieldStart("deposit_cycle_master_id")
			s.DepositCycleMasterID.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ShopItemDetail != nil {
			e.FieldStart("shop_item_detail")
			e.ArrStart()
			for _, elem := range s.ShopItemDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
	{
		if s.ContractInputStatus.Set {
			e.FieldStart("contract_input_status")
			s.ContractInputStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoRetrievingResponse = [9]string{
	0: "shop_id",
	1: "platform_id",
	2: "shop_type",
	3: "status_code",
	4: "deposit_cycle_master_id",
	5: "contract_detail",
	6: "shop_item_detail",
	7: "contract_bank_account",
	8: "contract_input_status",
}

// Decode decodes ExaminationInfoRetrievingResponse from json.
func (s *ExaminationInfoRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "deposit_cycle_master_id":
			if err := func() error {
				s.DepositCycleMasterID.Reset()
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "shop_item_detail":
			if err := func() error {
				s.ShopItemDetail = make([]ExaminationInfoRetrievingResponseShopItemDetailItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ExaminationInfoRetrievingResponseShopItemDetailItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ShopItemDetail = append(s.ShopItemDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_item_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		case "contract_input_status":
			if err := func() error {
				s.ContractInputStatus.Reset()
				if err := s.ContractInputStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_input_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoRetrievingResponseContractBankAccount = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ExaminationInfoRetrievingResponseContractBankAccount from json.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractBankAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoRetrievingResponseContractBankAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractBankAccountAccountKind as json.
func (s ExaminationInfoRetrievingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoRetrievingResponseContractBankAccountAccountKind from json.
func (s *ExaminationInfoRetrievingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractBankAccountAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseContractBankAccountAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoRetrievingResponseContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber != nil {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp != nil {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital != nil {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt != nil {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales != nil {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails != nil {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode != nil {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture != nil {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana != nil {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality != nil {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana != nil {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection != nil {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana != nil {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome != nil {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana != nil {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName != nil {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana != nil {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel != nil {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName != nil {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana != nil {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName != nil {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana != nil {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday != nil {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender != nil {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode != nil {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture != nil {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana != nil {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality != nil {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana != nil {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection != nil {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana != nil {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome != nil {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana != nil {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel != nil {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName != nil {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana != nil {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName != nil {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana != nil {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel != nil {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail != nil {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName != nil {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana != nil {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName != nil {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana != nil {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel != nil {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail != nil {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp != nil {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb != nil {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL != nil {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential != nil {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel != nil {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail != nil {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct != nil {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService != nil {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent != nil {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid != nil {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice != nil {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription != nil {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint != nil {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint != nil {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial != nil {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent != nil {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent != nil {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoRetrievingResponseContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetail from json.
func (s *ExaminationInfoRetrievingResponseContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CorporateNumber = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Hp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Capital = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.EstablishedAt = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.YearlySales = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BusinessDetails = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeBirthday = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender = nil
				var elem NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeGender = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnApp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnWeb = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.URL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SiteCredential = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportMail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesProduct = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesService = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesDigitalContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prepaid = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UnitPrice = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ContentDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExpiretionDateOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsageOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.LostTrial = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsInsecureContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsLongApplyContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoRetrievingResponseContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailPayBy as json.
func (s ExaminationInfoRetrievingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailPayBy from json.
func (s *ExaminationInfoRetrievingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractDetailPayBy to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseContractDetailPayBy(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailRepresentativeGender as json.
func (s ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailRepresentativeGender from json.
func (s *ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractDetailRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseContractDetailRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailSiteExisting as json.
func (s ExaminationInfoRetrievingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailSiteExisting from json.
func (s *ExaminationInfoRetrievingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfoInput.Set {
			e.FieldStart("contract_info_input")
			s.ContractInfoInput.Encode(e)
		}
	}
	{
		if s.ShopInfoInput.Set {
			e.FieldStart("shop_info_input")
			s.ShopInfoInput.Encode(e)
		}
	}
	{
		if s.AccountInfoInput.Set {
			e.FieldStart("account_info_input")
			s.AccountInfoInput.Encode(e)
		}
	}
	{
		if s.CardInfoInput.Set {
			e.FieldStart("card_info_input")
			s.CardInfoInput.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoRetrievingResponseContractInputStatus = [5]string{
	0: "status_code",
	1: "contract_info_input",
	2: "shop_info_input",
	3: "account_info_input",
	4: "card_info_input",
}

// Decode decodes ExaminationInfoRetrievingResponseContractInputStatus from json.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractInputStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info_input":
			if err := func() error {
				s.ContractInfoInput.Reset()
				if err := s.ContractInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info_input\"")
			}
		case "shop_info_input":
			if err := func() error {
				s.ShopInfoInput.Reset()
				if err := s.ShopInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info_input\"")
			}
		case "account_info_input":
			if err := func() error {
				s.AccountInfoInput.Reset()
				if err := s.AccountInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_info_input\"")
			}
		case "card_info_input":
			if err := func() error {
				s.CardInfoInput.Reset()
				if err := s.CardInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_info_input\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoRetrievingResponseContractInputStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractInputStatusStatusCode as json.
func (s ExaminationInfoRetrievingResponseContractInputStatusStatusCode) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoRetrievingResponseContractInputStatusStatusCode from json.
func (s *ExaminationInfoRetrievingResponseContractInputStatusStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseContractInputStatusStatusCode to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseContractInputStatusStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseContractInputStatusStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseContractInputStatusStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseDepositCycleMasterID as json.
func (s ExaminationInfoRetrievingResponseDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoRetrievingResponseDepositCycleMasterID from json.
func (s *ExaminationInfoRetrievingResponseDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoRetrievingResponseShopItemDetailItem = [11]string{
	0:  "content1_name",
	1:  "content1_description",
	2:  "content1_unit_price",
	3:  "content2_name",
	4:  "content2_description",
	5:  "content2_unit_price",
	6:  "content3_name",
	7:  "content3_description",
	8:  "content3_unit_price",
	9:  "id",
	10: "type",
}

// Decode decodes ExaminationInfoRetrievingResponseShopItemDetailItem from json.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseShopItemDetailItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoRetrievingResponseShopItemDetailItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseShopItemDetailItemType as json.
func (s ExaminationInfoRetrievingResponseShopItemDetailItemType) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoRetrievingResponseShopItemDetailItemType from json.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseShopItemDetailItemType to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoRetrievingResponseShopItemDetailItemType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseShopType as json.
func (s ExaminationInfoRetrievingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoRetrievingResponseShopType from json.
func (s *ExaminationInfoRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoRetrievingResponseShopType(v) {
	case ExaminationInfoRetrievingResponseShopTypePlatform:
		*s = ExaminationInfoRetrievingResponseShopTypePlatform
	case ExaminationInfoRetrievingResponseShopTypeTenant:
		*s = ExaminationInfoRetrievingResponseShopTypeTenant
	default:
		*s = ExaminationInfoRetrievingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseStatusCode as json.
func (s ExaminationInfoRetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoRetrievingResponseStatusCode from json.
func (s *ExaminationInfoRetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoRetrievingResponseStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoRetrievingResponseStatusCode(v) {
	case ExaminationInfoRetrievingResponseStatusCode101:
		*s = ExaminationInfoRetrievingResponseStatusCode101
	case ExaminationInfoRetrievingResponseStatusCode102:
		*s = ExaminationInfoRetrievingResponseStatusCode102
	case ExaminationInfoRetrievingResponseStatusCode103:
		*s = ExaminationInfoRetrievingResponseStatusCode103
	case ExaminationInfoRetrievingResponseStatusCode105:
		*s = ExaminationInfoRetrievingResponseStatusCode105
	case ExaminationInfoRetrievingResponseStatusCode106:
		*s = ExaminationInfoRetrievingResponseStatusCode106
	case ExaminationInfoRetrievingResponseStatusCode107:
		*s = ExaminationInfoRetrievingResponseStatusCode107
	default:
		*s = ExaminationInfoRetrievingResponseStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoRetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoRetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.UpdateContractDetail != nil {
			e.FieldStart("update_contract_detail")
			s.UpdateContractDetail.Encode(e)
		}
	}
	{
		if s.UpdateShop != nil {
			e.FieldStart("update_shop")
			s.UpdateShop.Encode(e)
		}
	}
	{
		if s.UpdateBankAccount != nil {
			e.FieldStart("update_bank_account")
			s.UpdateBankAccount.Encode(e)
		}
	}
	{
		if s.UpdateDepositCycle != nil {
			e.FieldStart("update_deposit_cycle")
			s.UpdateDepositCycle.Encode(e)
		}
	}
	{
		if s.DepositCycleMasterID.Set {
			e.FieldStart("deposit_cycle_master_id")
			s.DepositCycleMasterID.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ShopItemDetail != nil {
			e.FieldStart("shop_item_detail")
			e.ArrStart()
			for _, elem := range s.ShopItemDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequest = [8]string{
	0: "update_contract_detail",
	1: "update_shop",
	2: "update_bank_account",
	3: "update_deposit_cycle",
	4: "deposit_cycle_master_id",
	5: "contract_detail",
	6: "shop_item_detail",
	7: "contract_bank_account",
}

// Decode decodes ExaminationInfoUpdatingRequest from json.
func (s *ExaminationInfoUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "update_contract_detail":
			if err := func() error {
				s.UpdateContractDetail = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UpdateContractDetail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_contract_detail\"")
			}
		case "update_shop":
			if err := func() error {
				s.UpdateShop = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UpdateShop = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_shop\"")
			}
		case "update_bank_account":
			if err := func() error {
				s.UpdateBankAccount = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UpdateBankAccount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_bank_account\"")
			}
		case "update_deposit_cycle":
			if err := func() error {
				s.UpdateDepositCycle = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UpdateDepositCycle = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_deposit_cycle\"")
			}
		case "deposit_cycle_master_id":
			if err := func() error {
				s.DepositCycleMasterID.Reset()
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "shop_item_detail":
			if err := func() error {
				s.ShopItemDetail = make([]ExaminationInfoUpdatingRequestShopItemDetailItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ExaminationInfoUpdatingRequestShopItemDetailItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ShopItemDetail = append(s.ShopItemDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_item_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequestContractBankAccount = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ExaminationInfoUpdatingRequestContractBankAccount from json.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractBankAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequestContractBankAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractBankAccountAccountKind as json.
func (s ExaminationInfoUpdatingRequestContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingRequestContractBankAccountAccountKind from json.
func (s *ExaminationInfoUpdatingRequestContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractBankAccountAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestContractBankAccountAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequestContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber != nil {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp != nil {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital != nil {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt != nil {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales != nil {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails != nil {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode != nil {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture != nil {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana != nil {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality != nil {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana != nil {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection != nil {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana != nil {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome != nil {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana != nil {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName != nil {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana != nil {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel != nil {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName != nil {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana != nil {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName != nil {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana != nil {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday != nil {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender != nil {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode != nil {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture != nil {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana != nil {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality != nil {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana != nil {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection != nil {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana != nil {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome != nil {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana != nil {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel != nil {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName != nil {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana != nil {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName != nil {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana != nil {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel != nil {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail != nil {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName != nil {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana != nil {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName != nil {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana != nil {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel != nil {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail != nil {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp != nil {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb != nil {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL != nil {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential != nil {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel != nil {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail != nil {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct != nil {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService != nil {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent != nil {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid != nil {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice != nil {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription != nil {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint != nil {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint != nil {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial != nil {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent != nil {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent != nil {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequestContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetail from json.
func (s *ExaminationInfoUpdatingRequestContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CorporateNumber = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Hp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Capital = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.EstablishedAt = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.YearlySales = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BusinessDetails = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeBirthday = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender = nil
				var elem NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeGender = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnApp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnWeb = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.URL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SiteCredential = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportMail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesProduct = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesService = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesDigitalContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prepaid = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UnitPrice = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ContentDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExpiretionDateOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsageOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.LostTrial = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsInsecureContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsLongApplyContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequestContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailPayBy as json.
func (s ExaminationInfoUpdatingRequestContractDetailPayBy) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailPayBy from json.
func (s *ExaminationInfoUpdatingRequestContractDetailPayBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetailPayBy to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestContractDetailPayBy(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailRepresentativeGender as json.
func (s ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailRepresentativeGender from json.
func (s *ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetailRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestContractDetailRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailSiteExisting as json.
func (s ExaminationInfoUpdatingRequestContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailSiteExisting from json.
func (s *ExaminationInfoUpdatingRequestContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestDepositCycleMasterID as json.
func (s ExaminationInfoUpdatingRequestDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoUpdatingRequestDepositCycleMasterID from json.
func (s *ExaminationInfoUpdatingRequestDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingRequestShopItemDetailItem = [11]string{
	0:  "content1_name",
	1:  "content1_description",
	2:  "content1_unit_price",
	3:  "content2_name",
	4:  "content2_description",
	5:  "content2_unit_price",
	6:  "content3_name",
	7:  "content3_description",
	8:  "content3_unit_price",
	9:  "id",
	10: "type",
}

// Decode decodes ExaminationInfoUpdatingRequestShopItemDetailItem from json.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestShopItemDetailItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingRequestShopItemDetailItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestShopItemDetailItemType as json.
func (s ExaminationInfoUpdatingRequestShopItemDetailItemType) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingRequestShopItemDetailItemType from json.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingRequestShopItemDetailItemType to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingRequestShopItemDetailItemType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingRequestShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingRequestShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.ShopType.Set {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.DepositCycleMasterID.Set {
			e.FieldStart("deposit_cycle_master_id")
			s.DepositCycleMasterID.Encode(e)
		}
	}
	{
		if s.ContractDetail.Set {
			e.FieldStart("contract_detail")
			s.ContractDetail.Encode(e)
		}
	}
	{
		if s.ShopItemDetail != nil {
			e.FieldStart("shop_item_detail")
			e.ArrStart()
			for _, elem := range s.ShopItemDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ContractBankAccount.Set {
			e.FieldStart("contract_bank_account")
			s.ContractBankAccount.Encode(e)
		}
	}
	{
		if s.ContractInputStatus.Set {
			e.FieldStart("contract_input_status")
			s.ContractInputStatus.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingResponse = [9]string{
	0: "shop_id",
	1: "platform_id",
	2: "shop_type",
	3: "status_code",
	4: "deposit_cycle_master_id",
	5: "contract_detail",
	6: "shop_item_detail",
	7: "contract_bank_account",
	8: "contract_input_status",
}

// Decode decodes ExaminationInfoUpdatingResponse from json.
func (s *ExaminationInfoUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType.Reset()
				if err := s.ShopType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "deposit_cycle_master_id":
			if err := func() error {
				s.DepositCycleMasterID.Reset()
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		case "contract_detail":
			if err := func() error {
				s.ContractDetail.Reset()
				if err := s.ContractDetail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_detail\"")
			}
		case "shop_item_detail":
			if err := func() error {
				s.ShopItemDetail = make([]ExaminationInfoUpdatingResponseShopItemDetailItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem ExaminationInfoUpdatingResponseShopItemDetailItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ShopItemDetail = append(s.ShopItemDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_item_detail\"")
			}
		case "contract_bank_account":
			if err := func() error {
				s.ContractBankAccount.Reset()
				if err := s.ContractBankAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_bank_account\"")
			}
		case "contract_input_status":
			if err := func() error {
				s.ContractInputStatus.Reset()
				if err := s.ContractInputStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_input_status\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) encodeFields(e *jx.Encoder) {
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingResponseContractBankAccount = [9]string{
	0: "bank_name",
	1: "bank_name_kana",
	2: "bank_code",
	3: "branch_code",
	4: "branch_name",
	5: "branch_name_kana",
	6: "account_kind",
	7: "account_number",
	8: "account_name",
}

// Decode decodes ExaminationInfoUpdatingResponseContractBankAccount from json.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractBankAccount to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingResponseContractBankAccount")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractBankAccountAccountKind as json.
func (s ExaminationInfoUpdatingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingResponseContractBankAccountAccountKind from json.
func (s *ExaminationInfoUpdatingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractBankAccountAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseContractBankAccountAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingResponseContractDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.CorporateNumber != nil {
			e.FieldStart("corporate_number")
			s.CorporateNumber.Encode(e)
		}
	}
	{
		if s.CorporateName.Set {
			e.FieldStart("corporate_name")
			s.CorporateName.Encode(e)
		}
	}
	{
		if s.CorporateNameKana.Set {
			e.FieldStart("corporate_name_kana")
			s.CorporateNameKana.Encode(e)
		}
	}
	{
		if s.Hp != nil {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		if s.Capital != nil {
			e.FieldStart("capital")
			s.Capital.Encode(e)
		}
	}
	{
		if s.EstablishedAt != nil {
			e.FieldStart("established_at")
			s.EstablishedAt.Encode(e)
		}
	}
	{
		if s.YearlySales != nil {
			e.FieldStart("yearly_sales")
			s.YearlySales.Encode(e)
		}
	}
	{
		if s.BusinessDetails != nil {
			e.FieldStart("business_details")
			s.BusinessDetails.Encode(e)
		}
	}
	{
		if s.CompanyPostalCode != nil {
			e.FieldStart("company_postal_code")
			s.CompanyPostalCode.Encode(e)
		}
	}
	{
		if s.CompanyPrefecture != nil {
			e.FieldStart("company_prefecture")
			s.CompanyPrefecture.Encode(e)
		}
	}
	{
		if s.CompanyPrefectureKana != nil {
			e.FieldStart("company_prefecture_kana")
			s.CompanyPrefectureKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipality != nil {
			e.FieldStart("company_address_municipality")
			s.CompanyAddressMunicipality.Encode(e)
		}
	}
	{
		if s.CompanyAddressMunicipalityKana != nil {
			e.FieldStart("company_address_municipality_kana")
			s.CompanyAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressSection != nil {
			e.FieldStart("company_address_section")
			s.CompanyAddressSection.Encode(e)
		}
	}
	{
		if s.CompanyAddressSectionKana != nil {
			e.FieldStart("company_address_section_kana")
			s.CompanyAddressSectionKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressChrome != nil {
			e.FieldStart("company_address_chrome")
			s.CompanyAddressChrome.Encode(e)
		}
	}
	{
		if s.CompanyAddressChromeKana != nil {
			e.FieldStart("company_address_chrome_kana")
			s.CompanyAddressChromeKana.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingName != nil {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana != nil {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		if s.CompanyTel != nil {
			e.FieldStart("company_tel")
			s.CompanyTel.Encode(e)
		}
	}
	{
		if s.RepresentativeLastName != nil {
			e.FieldStart("representative_last_name")
			s.RepresentativeLastName.Encode(e)
		}
	}
	{
		if s.RepresentativeLastNameKana != nil {
			e.FieldStart("representative_last_name_kana")
			s.RepresentativeLastNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstName != nil {
			e.FieldStart("representative_first_name")
			s.RepresentativeFirstName.Encode(e)
		}
	}
	{
		if s.RepresentativeFirstNameKana != nil {
			e.FieldStart("representative_first_name_kana")
			s.RepresentativeFirstNameKana.Encode(e)
		}
	}
	{
		if s.RepresentativeBirthday != nil {
			e.FieldStart("representative_birthday")
			s.RepresentativeBirthday.Encode(e)
		}
	}
	{
		if s.RepresentativeGender != nil {
			e.FieldStart("representative_gender")
			s.RepresentativeGender.Encode(e)
		}
	}
	{
		if s.RepresentativePostalCode != nil {
			e.FieldStart("representative_postal_code")
			s.RepresentativePostalCode.Encode(e)
		}
	}
	{
		if s.RepresentativePrefecture != nil {
			e.FieldStart("representative_prefecture")
			s.RepresentativePrefecture.Encode(e)
		}
	}
	{
		if s.RepresentativePrefectureKana != nil {
			e.FieldStart("representative_prefecture_kana")
			s.RepresentativePrefectureKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipality != nil {
			e.FieldStart("representative_address_municipality")
			s.RepresentativeAddressMunicipality.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressMunicipalityKana != nil {
			e.FieldStart("representative_address_municipality_kana")
			s.RepresentativeAddressMunicipalityKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSection != nil {
			e.FieldStart("representative_address_section")
			s.RepresentativeAddressSection.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressSectionKana != nil {
			e.FieldStart("representative_address_section_kana")
			s.RepresentativeAddressSectionKana.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChrome != nil {
			e.FieldStart("representative_address_chrome")
			s.RepresentativeAddressChrome.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressChromeKana != nil {
			e.FieldStart("representative_address_chrome_kana")
			s.RepresentativeAddressChromeKana.Encode(e)
		}
	}
	{
		if s.RepresentativeTel != nil {
			e.FieldStart("representative_tel")
			s.RepresentativeTel.Encode(e)
		}
	}
	{
		if s.Staff1LastName != nil {
			e.FieldStart("staff1_last_name")
			s.Staff1LastName.Encode(e)
		}
	}
	{
		if s.Staff1LastNameKana != nil {
			e.FieldStart("staff1_last_name_kana")
			s.Staff1LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff1FirstName != nil {
			e.FieldStart("staff1_first_name")
			s.Staff1FirstName.Encode(e)
		}
	}
	{
		if s.Staff1FirstNameKana != nil {
			e.FieldStart("staff1_first_name_kana")
			s.Staff1FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff1Tel != nil {
			e.FieldStart("staff1_tel")
			s.Staff1Tel.Encode(e)
		}
	}
	{
		if s.Staff1Mail != nil {
			e.FieldStart("staff1_mail")
			s.Staff1Mail.Encode(e)
		}
	}
	{
		if s.Staff2LastName != nil {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana != nil {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName != nil {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana != nil {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2Tel != nil {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail != nil {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		if s.UsedOnApp != nil {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
	{
		if s.UsedOnWeb != nil {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnOther.Set {
			e.FieldStart("used_on_other")
			s.UsedOnOther.Encode(e)
		}
	}
	{
		if s.SiteExisting.Set {
			e.FieldStart("site_existing")
			s.SiteExisting.Encode(e)
		}
	}
	{
		if s.URL != nil {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.SiteCredential != nil {
			e.FieldStart("site_credential")
			s.SiteCredential.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopNameEn.Set {
			e.FieldStart("shop_name_en")
			s.ShopNameEn.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SupportTel != nil {
			e.FieldStart("support_tel")
			s.SupportTel.Encode(e)
		}
	}
	{
		if s.SupportMail != nil {
			e.FieldStart("support_mail")
			s.SupportMail.Encode(e)
		}
	}
	{
		if s.ProvidesProduct != nil {
			e.FieldStart("provides_product")
			s.ProvidesProduct.Encode(e)
		}
	}
	{
		if s.ProvidesService != nil {
			e.FieldStart("provides_service")
			s.ProvidesService.Encode(e)
		}
	}
	{
		if s.ProvidesDigitalContent != nil {
			e.FieldStart("provides_digital_content")
			s.ProvidesDigitalContent.Encode(e)
		}
	}
	{
		if s.Prepaid != nil {
			e.FieldStart("prepaid")
			s.Prepaid.Encode(e)
		}
	}
	{
		if s.UnitPrice != nil {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		if s.ContentCategoryMasterID.Set {
			e.FieldStart("content_category_master_id")
			s.ContentCategoryMasterID.Encode(e)
		}
	}
	{
		if s.ContentDescription != nil {
			e.FieldStart("content_description")
			s.ContentDescription.Encode(e)
		}
	}
	{
		if s.ExpiretionDateOfPoint != nil {
			e.FieldStart("expiretion_date_of_point")
			s.ExpiretionDateOfPoint.Encode(e)
		}
	}
	{
		if s.UsageOfPoint != nil {
			e.FieldStart("usage_of_point")
			s.UsageOfPoint.Encode(e)
		}
	}
	{
		if s.LostTrial != nil {
			e.FieldStart("lost_trial")
			s.LostTrial.Encode(e)
		}
	}
	{
		if s.DealsInsecureContent != nil {
			e.FieldStart("deals_insecure_content")
			s.DealsInsecureContent.Encode(e)
		}
	}
	{
		if s.DealsLongApplyContent != nil {
			e.FieldStart("deals_long_apply_content")
			s.DealsLongApplyContent.Encode(e)
		}
	}
	{
		if s.PayBy.Set {
			e.FieldStart("pay_by")
			s.PayBy.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingResponseContractDetail = [74]string{
	0:  "corporate",
	1:  "corporate_number",
	2:  "corporate_name",
	3:  "corporate_name_kana",
	4:  "hp",
	5:  "capital",
	6:  "established_at",
	7:  "yearly_sales",
	8:  "business_details",
	9:  "company_postal_code",
	10: "company_prefecture",
	11: "company_prefecture_kana",
	12: "company_address_municipality",
	13: "company_address_municipality_kana",
	14: "company_address_section",
	15: "company_address_section_kana",
	16: "company_address_chrome",
	17: "company_address_chrome_kana",
	18: "company_address_building_name",
	19: "company_address_building_name_kana",
	20: "company_tel",
	21: "representative_last_name",
	22: "representative_last_name_kana",
	23: "representative_first_name",
	24: "representative_first_name_kana",
	25: "representative_birthday",
	26: "representative_gender",
	27: "representative_postal_code",
	28: "representative_prefecture",
	29: "representative_prefecture_kana",
	30: "representative_address_municipality",
	31: "representative_address_municipality_kana",
	32: "representative_address_section",
	33: "representative_address_section_kana",
	34: "representative_address_chrome",
	35: "representative_address_chrome_kana",
	36: "representative_tel",
	37: "staff1_last_name",
	38: "staff1_last_name_kana",
	39: "staff1_first_name",
	40: "staff1_first_name_kana",
	41: "staff1_tel",
	42: "staff1_mail",
	43: "staff2_last_name",
	44: "staff2_last_name_kana",
	45: "staff2_first_name",
	46: "staff2_first_name_kana",
	47: "staff2_tel",
	48: "staff2_mail",
	49: "used_on_app",
	50: "used_on_web",
	51: "used_on_other",
	52: "site_existing",
	53: "url",
	54: "site_credential",
	55: "shop_name",
	56: "shop_name_kana",
	57: "shop_name_en",
	58: "platform_name",
	59: "support_tel",
	60: "support_mail",
	61: "provides_product",
	62: "provides_service",
	63: "provides_digital_content",
	64: "prepaid",
	65: "unit_price",
	66: "content_category_master_id",
	67: "content_description",
	68: "expiretion_date_of_point",
	69: "usage_of_point",
	70: "lost_trial",
	71: "deals_insecure_content",
	72: "deals_long_apply_content",
	73: "pay_by",
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetail from json.
func (s *ExaminationInfoUpdatingResponseContractDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_number":
			if err := func() error {
				s.CorporateNumber = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CorporateNumber = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			if err := func() error {
				s.CorporateName.Reset()
				if err := s.CorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			if err := func() error {
				s.CorporateNameKana.Reset()
				if err := s.CorporateNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Hp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			if err := func() error {
				s.Capital = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Capital = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			if err := func() error {
				s.EstablishedAt = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.EstablishedAt = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			if err := func() error {
				s.YearlySales = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.YearlySales = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			if err := func() error {
				s.BusinessDetails = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BusinessDetails = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			if err := func() error {
				s.CompanyPostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			if err := func() error {
				s.CompanyPrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			if err := func() error {
				s.CompanyPrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyPrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			if err := func() error {
				s.CompanyAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			if err := func() error {
				s.CompanyAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			if err := func() error {
				s.CompanyAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			if err := func() error {
				s.CompanyAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			if err := func() error {
				s.CompanyAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			if err := func() error {
				s.CompanyAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyAddressBuildingNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			if err := func() error {
				s.CompanyTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CompanyTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		case "representative_last_name":
			if err := func() error {
				s.RepresentativeLastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			if err := func() error {
				s.RepresentativeLastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeLastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			if err := func() error {
				s.RepresentativeFirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			if err := func() error {
				s.RepresentativeFirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeFirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_birthday":
			if err := func() error {
				s.RepresentativeBirthday = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeBirthday = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			if err := func() error {
				s.RepresentativeGender = nil
				var elem NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeGender = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "representative_postal_code":
			if err := func() error {
				s.RepresentativePostalCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePostalCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			if err := func() error {
				s.RepresentativePrefecture = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefecture = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			if err := func() error {
				s.RepresentativePrefectureKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativePrefectureKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			if err := func() error {
				s.RepresentativeAddressMunicipality = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipality = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			if err := func() error {
				s.RepresentativeAddressMunicipalityKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressMunicipalityKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			if err := func() error {
				s.RepresentativeAddressSection = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSection = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			if err := func() error {
				s.RepresentativeAddressSectionKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressSectionKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			if err := func() error {
				s.RepresentativeAddressChrome = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChrome = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			if err := func() error {
				s.RepresentativeAddressChromeKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeAddressChromeKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_tel":
			if err := func() error {
				s.RepresentativeTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RepresentativeTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "staff1_last_name":
			if err := func() error {
				s.Staff1LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			if err := func() error {
				s.Staff1LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			if err := func() error {
				s.Staff1FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			if err := func() error {
				s.Staff1FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_tel":
			if err := func() error {
				s.Staff1Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			if err := func() error {
				s.Staff1Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff1Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2LastNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2FirstNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Tel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Staff2Mail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnApp = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsedOnWeb = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_other":
			if err := func() error {
				s.UsedOnOther.Reset()
				if err := s.UsedOnOther.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_other\"")
			}
		case "site_existing":
			if err := func() error {
				s.SiteExisting.Reset()
				if err := s.SiteExisting.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_existing\"")
			}
		case "url":
			if err := func() error {
				s.URL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.URL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "site_credential":
			if err := func() error {
				s.SiteCredential = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SiteCredential = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_credential\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			if err := func() error {
				s.ShopNameEn.Reset()
				if err := s.ShopNameEn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "support_tel":
			if err := func() error {
				s.SupportTel = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportTel = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "support_mail":
			if err := func() error {
				s.SupportMail = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SupportMail = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "provides_product":
			if err := func() error {
				s.ProvidesProduct = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesProduct = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_product\"")
			}
		case "provides_service":
			if err := func() error {
				s.ProvidesService = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesService = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_service\"")
			}
		case "provides_digital_content":
			if err := func() error {
				s.ProvidesDigitalContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProvidesDigitalContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides_digital_content\"")
			}
		case "prepaid":
			if err := func() error {
				s.Prepaid = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Prepaid = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice = nil
				var elem NilFloat64
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UnitPrice = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "content_category_master_id":
			if err := func() error {
				s.ContentCategoryMasterID.Reset()
				if err := s.ContentCategoryMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_category_master_id\"")
			}
		case "content_description":
			if err := func() error {
				s.ContentDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ContentDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "expiretion_date_of_point":
			if err := func() error {
				s.ExpiretionDateOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExpiretionDateOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expiretion_date_of_point\"")
			}
		case "usage_of_point":
			if err := func() error {
				s.UsageOfPoint = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.UsageOfPoint = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"usage_of_point\"")
			}
		case "lost_trial":
			if err := func() error {
				s.LostTrial = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.LostTrial = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "deals_insecure_content":
			if err := func() error {
				s.DealsInsecureContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsInsecureContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "deals_long_apply_content":
			if err := func() error {
				s.DealsLongApplyContent = nil
				var elem NilBool
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DealsLongApplyContent = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "pay_by":
			if err := func() error {
				s.PayBy.Reset()
				if err := s.PayBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_by\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingResponseContractDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailPayBy as json.
func (s ExaminationInfoUpdatingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailPayBy from json.
func (s *ExaminationInfoUpdatingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractDetailPayBy to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseContractDetailPayBy(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailRepresentativeGender as json.
func (s ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailRepresentativeGender from json.
func (s *ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractDetailRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseContractDetailRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailSiteExisting as json.
func (s ExaminationInfoUpdatingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailSiteExisting from json.
func (s *ExaminationInfoUpdatingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractDetailSiteExisting to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseContractDetailSiteExisting(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfoInput.Set {
			e.FieldStart("contract_info_input")
			s.ContractInfoInput.Encode(e)
		}
	}
	{
		if s.ShopInfoInput.Set {
			e.FieldStart("shop_info_input")
			s.ShopInfoInput.Encode(e)
		}
	}
	{
		if s.AccountInfoInput.Set {
			e.FieldStart("account_info_input")
			s.AccountInfoInput.Encode(e)
		}
	}
	{
		if s.CardInfoInput.Set {
			e.FieldStart("card_info_input")
			s.CardInfoInput.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingResponseContractInputStatus = [5]string{
	0: "status_code",
	1: "contract_info_input",
	2: "shop_info_input",
	3: "account_info_input",
	4: "card_info_input",
}

// Decode decodes ExaminationInfoUpdatingResponseContractInputStatus from json.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractInputStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info_input":
			if err := func() error {
				s.ContractInfoInput.Reset()
				if err := s.ContractInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info_input\"")
			}
		case "shop_info_input":
			if err := func() error {
				s.ShopInfoInput.Reset()
				if err := s.ShopInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info_input\"")
			}
		case "account_info_input":
			if err := func() error {
				s.AccountInfoInput.Reset()
				if err := s.AccountInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_info_input\"")
			}
		case "card_info_input":
			if err := func() error {
				s.CardInfoInput.Reset()
				if err := s.CardInfoInput.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_info_input\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingResponseContractInputStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractInputStatusStatusCode as json.
func (s ExaminationInfoUpdatingResponseContractInputStatusStatusCode) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingResponseContractInputStatusStatusCode from json.
func (s *ExaminationInfoUpdatingResponseContractInputStatusStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseContractInputStatusStatusCode to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseContractInputStatusStatusCode(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseContractInputStatusStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseContractInputStatusStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseDepositCycleMasterID as json.
func (s ExaminationInfoUpdatingResponseDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoUpdatingResponseDepositCycleMasterID from json.
func (s *ExaminationInfoUpdatingResponseDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) encodeFields(e *jx.Encoder) {
	{
		if s.Content1Name.Set {
			e.FieldStart("content1_name")
			s.Content1Name.Encode(e)
		}
	}
	{
		if s.Content1Description.Set {
			e.FieldStart("content1_description")
			s.Content1Description.Encode(e)
		}
	}
	{
		if s.Content1UnitPrice.Set {
			e.FieldStart("content1_unit_price")
			s.Content1UnitPrice.Encode(e)
		}
	}
	{
		if s.Content2Name.Set {
			e.FieldStart("content2_name")
			s.Content2Name.Encode(e)
		}
	}
	{
		if s.Content2Description.Set {
			e.FieldStart("content2_description")
			s.Content2Description.Encode(e)
		}
	}
	{
		if s.Content2UnitPrice.Set {
			e.FieldStart("content2_unit_price")
			s.Content2UnitPrice.Encode(e)
		}
	}
	{
		if s.Content3Name.Set {
			e.FieldStart("content3_name")
			s.Content3Name.Encode(e)
		}
	}
	{
		if s.Content3Description.Set {
			e.FieldStart("content3_description")
			s.Content3Description.Encode(e)
		}
	}
	{
		if s.Content3UnitPrice.Set {
			e.FieldStart("content3_unit_price")
			s.Content3UnitPrice.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoUpdatingResponseShopItemDetailItem = [11]string{
	0:  "content1_name",
	1:  "content1_description",
	2:  "content1_unit_price",
	3:  "content2_name",
	4:  "content2_description",
	5:  "content2_unit_price",
	6:  "content3_name",
	7:  "content3_description",
	8:  "content3_unit_price",
	9:  "id",
	10: "type",
}

// Decode decodes ExaminationInfoUpdatingResponseShopItemDetailItem from json.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseShopItemDetailItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "content1_name":
			if err := func() error {
				s.Content1Name.Reset()
				if err := s.Content1Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_name\"")
			}
		case "content1_description":
			if err := func() error {
				s.Content1Description.Reset()
				if err := s.Content1Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_description\"")
			}
		case "content1_unit_price":
			if err := func() error {
				s.Content1UnitPrice.Reset()
				if err := s.Content1UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content1_unit_price\"")
			}
		case "content2_name":
			if err := func() error {
				s.Content2Name.Reset()
				if err := s.Content2Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_name\"")
			}
		case "content2_description":
			if err := func() error {
				s.Content2Description.Reset()
				if err := s.Content2Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_description\"")
			}
		case "content2_unit_price":
			if err := func() error {
				s.Content2UnitPrice.Reset()
				if err := s.Content2UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content2_unit_price\"")
			}
		case "content3_name":
			if err := func() error {
				s.Content3Name.Reset()
				if err := s.Content3Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_name\"")
			}
		case "content3_description":
			if err := func() error {
				s.Content3Description.Reset()
				if err := s.Content3Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_description\"")
			}
		case "content3_unit_price":
			if err := func() error {
				s.Content3UnitPrice.Reset()
				if err := s.Content3UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content3_unit_price\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoUpdatingResponseShopItemDetailItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseShopItemDetailItemType as json.
func (s ExaminationInfoUpdatingResponseShopItemDetailItemType) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoUpdatingResponseShopItemDetailItemType from json.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseShopItemDetailItemType to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoUpdatingResponseShopItemDetailItemType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseShopType as json.
func (s ExaminationInfoUpdatingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoUpdatingResponseShopType from json.
func (s *ExaminationInfoUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoUpdatingResponseShopType(v) {
	case ExaminationInfoUpdatingResponseShopTypePlatform:
		*s = ExaminationInfoUpdatingResponseShopTypePlatform
	case ExaminationInfoUpdatingResponseShopTypeTenant:
		*s = ExaminationInfoUpdatingResponseShopTypeTenant
	default:
		*s = ExaminationInfoUpdatingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseStatusCode as json.
func (s ExaminationInfoUpdatingResponseStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoUpdatingResponseStatusCode from json.
func (s *ExaminationInfoUpdatingResponseStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoUpdatingResponseStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoUpdatingResponseStatusCode(v) {
	case ExaminationInfoUpdatingResponseStatusCode101:
		*s = ExaminationInfoUpdatingResponseStatusCode101
	case ExaminationInfoUpdatingResponseStatusCode102:
		*s = ExaminationInfoUpdatingResponseStatusCode102
	case ExaminationInfoUpdatingResponseStatusCode103:
		*s = ExaminationInfoUpdatingResponseStatusCode103
	case ExaminationInfoUpdatingResponseStatusCode105:
		*s = ExaminationInfoUpdatingResponseStatusCode105
	case ExaminationInfoUpdatingResponseStatusCode106:
		*s = ExaminationInfoUpdatingResponseStatusCode106
	case ExaminationInfoUpdatingResponseStatusCode107:
		*s = ExaminationInfoUpdatingResponseStatusCode107
	default:
		*s = ExaminationInfoUpdatingResponseStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoUpdatingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoUpdatingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfo.Set {
			e.FieldStart("contract_info")
			s.ContractInfo.Encode(e)
		}
	}
	{
		if s.ShopInfo.Set {
			e.FieldStart("shop_info")
			s.ShopInfo.Encode(e)
		}
	}
	{
		if s.BankAccountInfo.Set {
			e.FieldStart("bank_account_info")
			s.BankAccountInfo.Encode(e)
		}
	}
	{
		if s.DepositCycleInfo.Set {
			e.FieldStart("deposit_cycle_info")
			s.DepositCycleInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponse = [5]string{
	0: "status_code",
	1: "contract_info",
	2: "shop_info",
	3: "bank_account_info",
	4: "deposit_cycle_info",
}

// Decode decodes ExaminationInfoV2RetrievingResponse from json.
func (s *ExaminationInfoV2RetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info":
			if err := func() error {
				s.ContractInfo.Reset()
				if err := s.ContractInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info\"")
			}
		case "shop_info":
			if err := func() error {
				s.ShopInfo.Reset()
				if err := s.ShopInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info\"")
			}
		case "bank_account_info":
			if err := func() error {
				s.BankAccountInfo.Reset()
				if err := s.BankAccountInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_account_info\"")
			}
		case "deposit_cycle_info":
			if err := func() error {
				s.DepositCycleInfo.Reset()
				if err := s.DepositCycleInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) encodeFields(e *jx.Encoder) {
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		e.FieldStart("branch_code")
		e.Str(s.BranchCode)
	}
	{
		e.FieldStart("account_kind")
		s.AccountKind.Encode(e)
	}
	{
		e.FieldStart("account_number")
		e.Str(s.AccountNumber)
	}
	{
		e.FieldStart("account_name")
		e.Str(s.AccountName)
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseBankAccountInfo = [5]string{
	0: "bank_code",
	1: "branch_code",
	2: "account_kind",
	3: "account_number",
	4: "account_name",
}

// Decode decodes ExaminationInfoV2RetrievingResponseBankAccountInfo from json.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseBankAccountInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BranchCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_kind":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.AccountNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.AccountName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseBankAccountInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseBankAccountInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseBankAccountInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind as json.
func (s ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind from json.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("representative_last_name")
		s.RepresentativeLastName.Encode(e)
	}
	{
		e.FieldStart("representative_last_name_kana")
		s.RepresentativeLastNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_first_name")
		s.RepresentativeFirstName.Encode(e)
	}
	{
		e.FieldStart("representative_first_name_kana")
		s.RepresentativeFirstNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_postal_code")
		s.RepresentativePostalCode.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture")
		s.RepresentativePrefecture.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture_kana")
		s.RepresentativePrefectureKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality")
		s.RepresentativeAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality_kana")
		s.RepresentativeAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_section")
		s.RepresentativeAddressSection.Encode(e)
	}
	{
		e.FieldStart("representative_address_section_kana")
		s.RepresentativeAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome")
		s.RepresentativeAddressChrome.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome_kana")
		s.RepresentativeAddressChromeKana.Encode(e)
	}
	{
		if s.RepresentativeAddressBuildingName.Set {
			e.FieldStart("representative_address_building_name")
			s.RepresentativeAddressBuildingName.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressBuildingNameKana.Set {
			e.FieldStart("representative_address_building_name_kana")
			s.RepresentativeAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("representative_tel")
		s.RepresentativeTel.Encode(e)
	}
	{
		e.FieldStart("representative_birthday")
		s.RepresentativeBirthday.Encode(e)
	}
	{
		e.FieldStart("representative_gender")
		s.RepresentativeGender.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name")
		s.Staff1LastName.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name_kana")
		s.Staff1LastNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name")
		s.Staff1FirstName.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name_kana")
		s.Staff1FirstNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_company_name")
		s.Staff1CompanyName.Encode(e)
	}
	{
		e.FieldStart("staff1_belongs")
		s.Staff1Belongs.Encode(e)
	}
	{
		e.FieldStart("staff1_tel")
		s.Staff1Tel.Encode(e)
	}
	{
		e.FieldStart("staff1_mail")
		s.Staff1Mail.Encode(e)
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2CompanyName.Set {
			e.FieldStart("staff2_company_name")
			s.Staff2CompanyName.Encode(e)
		}
	}
	{
		if s.Staff2Belongs.Set {
			e.FieldStart("staff2_belongs")
			s.Staff2Belongs.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		e.FieldStart("corporate")
		s.Corporate.Encode(e)
	}
	{
		if s.CorporateInfo.Set {
			e.FieldStart("corporate_info")
			s.CorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfo = [36]string{
	0:  "representative_last_name",
	1:  "representative_last_name_kana",
	2:  "representative_first_name",
	3:  "representative_first_name_kana",
	4:  "representative_postal_code",
	5:  "representative_prefecture",
	6:  "representative_prefecture_kana",
	7:  "representative_address_municipality",
	8:  "representative_address_municipality_kana",
	9:  "representative_address_section",
	10: "representative_address_section_kana",
	11: "representative_address_chrome",
	12: "representative_address_chrome_kana",
	13: "representative_address_building_name",
	14: "representative_address_building_name_kana",
	15: "representative_tel",
	16: "representative_birthday",
	17: "representative_gender",
	18: "staff1_last_name",
	19: "staff1_last_name_kana",
	20: "staff1_first_name",
	21: "staff1_first_name_kana",
	22: "staff1_company_name",
	23: "staff1_belongs",
	24: "staff1_tel",
	25: "staff1_mail",
	26: "staff2_last_name",
	27: "staff2_last_name_kana",
	28: "staff2_first_name",
	29: "staff2_first_name_kana",
	30: "staff2_company_name",
	31: "staff2_belongs",
	32: "staff2_tel",
	33: "staff2_mail",
	34: "corporate",
	35: "corporate_info",
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfo from json.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseContractInfo to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "representative_last_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_postal_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_address_building_name":
			if err := func() error {
				s.RepresentativeAddressBuildingName.Reset()
				if err := s.RepresentativeAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name\"")
			}
		case "representative_address_building_name_kana":
			if err := func() error {
				s.RepresentativeAddressBuildingNameKana.Reset()
				if err := s.RepresentativeAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name_kana\"")
			}
		case "representative_tel":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "representative_birthday":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "staff1_last_name":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_company_name":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				if err := s.Staff1CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_company_name\"")
			}
		case "staff1_belongs":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				if err := s.Staff1Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_belongs\"")
			}
		case "staff1_tel":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_company_name":
			if err := func() error {
				s.Staff2CompanyName.Reset()
				if err := s.Staff2CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_company_name\"")
			}
		case "staff2_belongs":
			if err := func() error {
				s.Staff2Belongs.Reset()
				if err := s.Staff2Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_belongs\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "corporate":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_info":
			if err := func() error {
				s.CorporateInfo.Reset()
				if err := s.CorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseContractInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b11111111,
		0b10011111,
		0b11111111,
		0b00000011,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("corporate_number")
		s.CorporateNumber.Encode(e)
	}
	{
		e.FieldStart("corporate_name")
		e.Str(s.CorporateName)
	}
	{
		e.FieldStart("corporate_name_kana")
		e.Str(s.CorporateNameKana)
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		e.FieldStart("capital")
		s.Capital.Encode(e)
	}
	{
		e.FieldStart("established_at")
		s.EstablishedAt.Encode(e)
	}
	{
		e.FieldStart("yearly_sales")
		s.YearlySales.Encode(e)
	}
	{
		e.FieldStart("business_details")
		s.BusinessDetails.Encode(e)
	}
	{
		e.FieldStart("company_postal_code")
		s.CompanyPostalCode.Encode(e)
	}
	{
		e.FieldStart("company_prefecture")
		s.CompanyPrefecture.Encode(e)
	}
	{
		e.FieldStart("company_prefecture_kana")
		s.CompanyPrefectureKana.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality")
		s.CompanyAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality_kana")
		s.CompanyAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("company_address_section")
		s.CompanyAddressSection.Encode(e)
	}
	{
		e.FieldStart("company_address_section_kana")
		s.CompanyAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome")
		s.CompanyAddressChrome.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome_kana")
		s.CompanyAddressChromeKana.Encode(e)
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("company_tel")
		s.CompanyTel.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfoCorporateInfo = [20]string{
	0:  "corporate_number",
	1:  "corporate_name",
	2:  "corporate_name_kana",
	3:  "hp",
	4:  "capital",
	5:  "established_at",
	6:  "yearly_sales",
	7:  "business_details",
	8:  "company_postal_code",
	9:  "company_prefecture",
	10: "company_prefecture_kana",
	11: "company_address_municipality",
	12: "company_address_municipality_kana",
	13: "company_address_section",
	14: "company_address_section_kana",
	15: "company_address_chrome",
	16: "company_address_chrome_kana",
	17: "company_address_building_name",
	18: "company_address_building_name_kana",
	19: "company_tel",
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo from json.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate_number":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.CorporateName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.CorporateNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11110111,
		0b11111111,
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseContractInfoCorporateInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender as json.
func (s ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender from json.
func (s *ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("deposit_cycle_master_id")
		s.DepositCycleMasterID.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseDepositCycleInfo = [1]string{
	0: "deposit_cycle_master_id",
}

// Decode decodes ExaminationInfoV2RetrievingResponseDepositCycleInfo from json.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseDepositCycleInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deposit_cycle_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseDepositCycleInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseDepositCycleInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseDepositCycleInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID as json.
func (s ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID from json.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("shop_name")
		e.Str(s.ShopName)
	}
	{
		e.FieldStart("shop_name_kana")
		e.Str(s.ShopNameKana)
	}
	{
		e.FieldStart("shop_name_en")
		e.Str(s.ShopNameEn)
	}
	{
		e.FieldStart("support_mail")
		s.SupportMail.Encode(e)
	}
	{
		e.FieldStart("support_tel")
		s.SupportTel.Encode(e)
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		e.FieldStart("deals_long_apply_content")
		s.DealsLongApplyContent.Encode(e)
	}
	{
		e.FieldStart("deals_insecure_content")
		s.DealsInsecureContent.Encode(e)
	}
	{
		e.FieldStart("lost_trial")
		s.LostTrial.Encode(e)
	}
	{
		e.FieldStart("use_of_fincode")
		s.UseOfFincode.Encode(e)
	}
	{
		if s.SitePublished.Set {
			e.FieldStart("site_published")
			s.SitePublished.Encode(e)
		}
	}
	{
		if s.SiteInfo.Set {
			e.FieldStart("site_info")
			s.SiteInfo.Encode(e)
		}
	}
	{
		if s.PrepaidPoint.Set {
			e.FieldStart("prepaid_point")
			s.PrepaidPoint.Encode(e)
		}
	}
	{
		if s.PrepaidPointInfo.Set {
			e.FieldStart("prepaid_point_info")
			s.PrepaidPointInfo.Encode(e)
		}
	}
	{
		e.FieldStart("provides")
		s.Provides.Encode(e)
	}
	{
		e.FieldStart("content_description")
		s.ContentDescription.Encode(e)
	}
	{
		if s.ProductContentInfo.Set {
			e.FieldStart("product_content_info")
			s.ProductContentInfo.Encode(e)
		}
	}
	{
		if s.ServiceContentInfo.Set {
			e.FieldStart("service_content_info")
			s.ServiceContentInfo.Encode(e)
		}
	}
	{
		if s.DigitalContentInfo.Set {
			e.FieldStart("digital_content_info")
			s.DigitalContentInfo.Encode(e)
		}
	}
	{
		if s.AdditionalInfo.Set {
			e.FieldStart("additional_info")
			s.AdditionalInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfo = [20]string{
	0:  "shop_name",
	1:  "shop_name_kana",
	2:  "shop_name_en",
	3:  "support_mail",
	4:  "support_tel",
	5:  "unit_price",
	6:  "deals_long_apply_content",
	7:  "deals_insecure_content",
	8:  "lost_trial",
	9:  "use_of_fincode",
	10: "site_published",
	11: "site_info",
	12: "prepaid_point",
	13: "prepaid_point_info",
	14: "provides",
	15: "content_description",
	16: "product_content_info",
	17: "service_content_info",
	18: "digital_content_info",
	19: "additional_info",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfo from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ShopName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ShopNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ShopNameEn = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "support_mail":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "support_tel":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "deals_long_apply_content":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "deals_insecure_content":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "lost_trial":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "use_of_fincode":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.UseOfFincode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_of_fincode\"")
			}
		case "site_published":
			if err := func() error {
				s.SitePublished.Reset()
				if err := s.SitePublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_published\"")
			}
		case "site_info":
			if err := func() error {
				s.SiteInfo.Reset()
				if err := s.SiteInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_info\"")
			}
		case "prepaid_point":
			if err := func() error {
				s.PrepaidPoint.Reset()
				if err := s.PrepaidPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point\"")
			}
		case "prepaid_point_info":
			if err := func() error {
				s.PrepaidPointInfo.Reset()
				if err := s.PrepaidPointInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point_info\"")
			}
		case "provides":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.Provides.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides\"")
			}
		case "content_description":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "product_content_info":
			if err := func() error {
				s.ProductContentInfo.Reset()
				if err := s.ProductContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_content_info\"")
			}
		case "service_content_info":
			if err := func() error {
				s.ServiceContentInfo.Reset()
				if err := s.ServiceContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_content_info\"")
			}
		case "digital_content_info":
			if err := func() error {
				s.DigitalContentInfo.Reset()
				if err := s.DigitalContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content_info\"")
			}
		case "additional_info":
			if err := func() error {
				s.AdditionalInfo.Reset()
				if err := s.AdditionalInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11011111,
		0b11000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ShopSalesManagerName.Set {
			e.FieldStart("shop_sales_manager_name")
			s.ShopSalesManagerName.Encode(e)
		}
	}
	{
		e.FieldStart("shop_servoce_name")
		s.ShopServoceName.Encode(e)
	}
	{
		e.FieldStart("shop_how_to_pay")
		s.ShopHowToPay.Encode(e)
	}
	{
		if s.ShopChargeDescription.Set {
			e.FieldStart("shop_charge_description")
			s.ShopChargeDescription.Encode(e)
		}
	}
	{
		e.FieldStart("shop_product_delivery_time")
		s.ShopProductDeliveryTime.Encode(e)
	}
	{
		e.FieldStart("shop_return_goods_handing_conditions")
		s.ShopReturnGoodsHandingConditions.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo = [6]string{
	0: "shop_sales_manager_name",
	1: "shop_servoce_name",
	2: "shop_how_to_pay",
	3: "shop_charge_description",
	4: "shop_product_delivery_time",
	5: "shop_return_goods_handing_conditions",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_sales_manager_name":
			if err := func() error {
				s.ShopSalesManagerName.Reset()
				if err := s.ShopSalesManagerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_sales_manager_name\"")
			}
		case "shop_servoce_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.ShopServoceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_servoce_name\"")
			}
		case "shop_how_to_pay":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.ShopHowToPay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_how_to_pay\"")
			}
		case "shop_charge_description":
			if err := func() error {
				s.ShopChargeDescription.Reset()
				if err := s.ShopChargeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_charge_description\"")
			}
		case "shop_product_delivery_time":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.ShopProductDeliveryTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_product_delivery_time\"")
			}
		case "shop_return_goods_handing_conditions":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.ShopReturnGoodsHandingConditions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_return_goods_handing_conditions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00110110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) encodeFields(e *jx.Encoder) {
	{
		if s.HowToUse.Set {
			e.FieldStart("how_to_use")
			s.HowToUse.Encode(e)
		}
	}
	{
		if s.AboutExpiration.Set {
			e.FieldStart("about_expiration")
			s.AboutExpiration.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo = [2]string{
	0: "how_to_use",
	1: "about_expiration",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "how_to_use":
			if err := func() error {
				s.HowToUse.Reset()
				if err := s.HowToUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"how_to_use\"")
			}
		case "about_expiration":
			if err := func() error {
				s.AboutExpiration.Reset()
				if err := s.AboutExpiration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"about_expiration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) encodeFields(e *jx.Encoder) {
	{
		if s.Product.Set {
			e.FieldStart("product")
			s.Product.Encode(e)
		}
	}
	{
		if s.Service.Set {
			e.FieldStart("service")
			s.Service.Encode(e)
		}
	}
	{
		if s.DigitalContent.Set {
			e.FieldStart("digital_content")
			s.DigitalContent.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoProvides = [3]string{
	0: "product",
	1: "service",
	2: "digital_content",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoProvides from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfoProvides to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "product":
			if err := func() error {
				s.Product.Reset()
				if err := s.Product.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product\"")
			}
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service\"")
			}
		case "digital_content":
			if err := func() error {
				s.DigitalContent.Reset()
				if err := s.DigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfoProvides")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoProvides) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	{
		if s.Credential.Set {
			e.FieldStart("credential")
			s.Credential.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoSiteInfo = [2]string{
	0: "url",
	1: "credential",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoSiteInfo from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfoSiteInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "credential":
			if err := func() error {
				s.Credential.Reset()
				if err := s.Credential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credential\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfoSiteInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoSiteInfo) {
					name = jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoSiteInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) encodeFields(e *jx.Encoder) {
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2RetrievingResponseShopInfoUseOfFincode = [2]string{
	0: "used_on_web",
	1: "used_on_app",
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode from json.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseShopInfoUseOfFincode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseStatusCode as json.
func (s ExaminationInfoV2RetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoV2RetrievingResponseStatusCode from json.
func (s *ExaminationInfoV2RetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2RetrievingResponseStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoV2RetrievingResponseStatusCode(v) {
	case ExaminationInfoV2RetrievingResponseStatusCode101:
		*s = ExaminationInfoV2RetrievingResponseStatusCode101
	case ExaminationInfoV2RetrievingResponseStatusCode102:
		*s = ExaminationInfoV2RetrievingResponseStatusCode102
	case ExaminationInfoV2RetrievingResponseStatusCode103:
		*s = ExaminationInfoV2RetrievingResponseStatusCode103
	case ExaminationInfoV2RetrievingResponseStatusCode105:
		*s = ExaminationInfoV2RetrievingResponseStatusCode105
	case ExaminationInfoV2RetrievingResponseStatusCode106:
		*s = ExaminationInfoV2RetrievingResponseStatusCode106
	case ExaminationInfoV2RetrievingResponseStatusCode107:
		*s = ExaminationInfoV2RetrievingResponseStatusCode107
	default:
		*s = ExaminationInfoV2RetrievingResponseStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2RetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2RetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ContractInfo.Set {
			e.FieldStart("contract_info")
			s.ContractInfo.Encode(e)
		}
	}
	{
		if s.ShopInfo.Set {
			e.FieldStart("shop_info")
			s.ShopInfo.Encode(e)
		}
	}
	{
		if s.BankAccountInfo.Set {
			e.FieldStart("bank_account_info")
			s.BankAccountInfo.Encode(e)
		}
	}
	{
		if s.DepositCycleInfo.Set {
			e.FieldStart("deposit_cycle_info")
			s.DepositCycleInfo.Encode(e)
		}
	}
	{
		if s.MerchantCategoryCode.Set {
			e.FieldStart("merchant_category_code")
			s.MerchantCategoryCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequest = [5]string{
	0: "contract_info",
	1: "shop_info",
	2: "bank_account_info",
	3: "deposit_cycle_info",
	4: "merchant_category_code",
}

// Decode decodes ExaminationInfoV2UpdatingRequest from json.
func (s *ExaminationInfoV2UpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "contract_info":
			if err := func() error {
				s.ContractInfo.Reset()
				if err := s.ContractInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info\"")
			}
		case "shop_info":
			if err := func() error {
				s.ShopInfo.Reset()
				if err := s.ShopInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info\"")
			}
		case "bank_account_info":
			if err := func() error {
				s.BankAccountInfo.Reset()
				if err := s.BankAccountInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_account_info\"")
			}
		case "deposit_cycle_info":
			if err := func() error {
				s.DepositCycleInfo.Reset()
				if err := s.DepositCycleInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_info\"")
			}
		case "merchant_category_code":
			if err := func() error {
				s.MerchantCategoryCode.Reset()
				if err := s.MerchantCategoryCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_category_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) encodeFields(e *jx.Encoder) {
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		e.FieldStart("branch_code")
		e.Str(s.BranchCode)
	}
	{
		e.FieldStart("account_kind")
		s.AccountKind.Encode(e)
	}
	{
		e.FieldStart("account_number")
		e.Str(s.AccountNumber)
	}
	{
		e.FieldStart("account_name")
		e.Str(s.AccountName)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestBankAccountInfo = [5]string{
	0: "bank_code",
	1: "branch_code",
	2: "account_kind",
	3: "account_number",
	4: "account_name",
}

// Decode decodes ExaminationInfoV2UpdatingRequestBankAccountInfo from json.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestBankAccountInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BranchCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_kind":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.AccountNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.AccountName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestBankAccountInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestBankAccountInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestBankAccountInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind as json.
func (s ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind from json.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("representative_last_name")
		s.RepresentativeLastName.Encode(e)
	}
	{
		e.FieldStart("representative_last_name_kana")
		s.RepresentativeLastNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_first_name")
		s.RepresentativeFirstName.Encode(e)
	}
	{
		e.FieldStart("representative_first_name_kana")
		s.RepresentativeFirstNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_postal_code")
		s.RepresentativePostalCode.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture")
		s.RepresentativePrefecture.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture_kana")
		s.RepresentativePrefectureKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality")
		s.RepresentativeAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality_kana")
		s.RepresentativeAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_section")
		s.RepresentativeAddressSection.Encode(e)
	}
	{
		e.FieldStart("representative_address_section_kana")
		s.RepresentativeAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome")
		s.RepresentativeAddressChrome.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome_kana")
		s.RepresentativeAddressChromeKana.Encode(e)
	}
	{
		if s.RepresentativeAddressBuildingName.Set {
			e.FieldStart("representative_address_building_name")
			s.RepresentativeAddressBuildingName.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressBuildingNameKana.Set {
			e.FieldStart("representative_address_building_name_kana")
			s.RepresentativeAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("representative_tel")
		s.RepresentativeTel.Encode(e)
	}
	{
		e.FieldStart("representative_birthday")
		s.RepresentativeBirthday.Encode(e)
	}
	{
		e.FieldStart("representative_gender")
		s.RepresentativeGender.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name")
		s.Staff1LastName.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name_kana")
		s.Staff1LastNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name")
		s.Staff1FirstName.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name_kana")
		s.Staff1FirstNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_company_name")
		s.Staff1CompanyName.Encode(e)
	}
	{
		e.FieldStart("staff1_belongs")
		s.Staff1Belongs.Encode(e)
	}
	{
		e.FieldStart("staff1_tel")
		s.Staff1Tel.Encode(e)
	}
	{
		e.FieldStart("staff1_mail")
		s.Staff1Mail.Encode(e)
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2CompanyName.Set {
			e.FieldStart("staff2_company_name")
			s.Staff2CompanyName.Encode(e)
		}
	}
	{
		if s.Staff2Belongs.Set {
			e.FieldStart("staff2_belongs")
			s.Staff2Belongs.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		e.FieldStart("corporate")
		s.Corporate.Encode(e)
	}
	{
		if s.CorporateInfo.Set {
			e.FieldStart("corporate_info")
			s.CorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfo = [36]string{
	0:  "representative_last_name",
	1:  "representative_last_name_kana",
	2:  "representative_first_name",
	3:  "representative_first_name_kana",
	4:  "representative_postal_code",
	5:  "representative_prefecture",
	6:  "representative_prefecture_kana",
	7:  "representative_address_municipality",
	8:  "representative_address_municipality_kana",
	9:  "representative_address_section",
	10: "representative_address_section_kana",
	11: "representative_address_chrome",
	12: "representative_address_chrome_kana",
	13: "representative_address_building_name",
	14: "representative_address_building_name_kana",
	15: "representative_tel",
	16: "representative_birthday",
	17: "representative_gender",
	18: "staff1_last_name",
	19: "staff1_last_name_kana",
	20: "staff1_first_name",
	21: "staff1_first_name_kana",
	22: "staff1_company_name",
	23: "staff1_belongs",
	24: "staff1_tel",
	25: "staff1_mail",
	26: "staff2_last_name",
	27: "staff2_last_name_kana",
	28: "staff2_first_name",
	29: "staff2_first_name_kana",
	30: "staff2_company_name",
	31: "staff2_belongs",
	32: "staff2_tel",
	33: "staff2_mail",
	34: "corporate",
	35: "corporate_info",
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfo from json.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestContractInfo to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "representative_last_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_postal_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_address_building_name":
			if err := func() error {
				s.RepresentativeAddressBuildingName.Reset()
				if err := s.RepresentativeAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name\"")
			}
		case "representative_address_building_name_kana":
			if err := func() error {
				s.RepresentativeAddressBuildingNameKana.Reset()
				if err := s.RepresentativeAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name_kana\"")
			}
		case "representative_tel":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "representative_birthday":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "staff1_last_name":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_company_name":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				if err := s.Staff1CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_company_name\"")
			}
		case "staff1_belongs":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				if err := s.Staff1Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_belongs\"")
			}
		case "staff1_tel":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_company_name":
			if err := func() error {
				s.Staff2CompanyName.Reset()
				if err := s.Staff2CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_company_name\"")
			}
		case "staff2_belongs":
			if err := func() error {
				s.Staff2Belongs.Reset()
				if err := s.Staff2Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_belongs\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "corporate":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_info":
			if err := func() error {
				s.CorporateInfo.Reset()
				if err := s.CorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestContractInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b11111111,
		0b10011111,
		0b11111111,
		0b00000011,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("corporate_number")
		s.CorporateNumber.Encode(e)
	}
	{
		e.FieldStart("corporate_name")
		e.Str(s.CorporateName)
	}
	{
		e.FieldStart("corporate_name_kana")
		e.Str(s.CorporateNameKana)
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		e.FieldStart("capital")
		s.Capital.Encode(e)
	}
	{
		e.FieldStart("established_at")
		s.EstablishedAt.Encode(e)
	}
	{
		e.FieldStart("yearly_sales")
		s.YearlySales.Encode(e)
	}
	{
		e.FieldStart("business_details")
		s.BusinessDetails.Encode(e)
	}
	{
		e.FieldStart("company_postal_code")
		s.CompanyPostalCode.Encode(e)
	}
	{
		e.FieldStart("company_prefecture")
		s.CompanyPrefecture.Encode(e)
	}
	{
		e.FieldStart("company_prefecture_kana")
		s.CompanyPrefectureKana.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality")
		s.CompanyAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality_kana")
		s.CompanyAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("company_address_section")
		s.CompanyAddressSection.Encode(e)
	}
	{
		e.FieldStart("company_address_section_kana")
		s.CompanyAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome")
		s.CompanyAddressChrome.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome_kana")
		s.CompanyAddressChromeKana.Encode(e)
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("company_tel")
		s.CompanyTel.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfoCorporateInfo = [20]string{
	0:  "corporate_number",
	1:  "corporate_name",
	2:  "corporate_name_kana",
	3:  "hp",
	4:  "capital",
	5:  "established_at",
	6:  "yearly_sales",
	7:  "business_details",
	8:  "company_postal_code",
	9:  "company_prefecture",
	10: "company_prefecture_kana",
	11: "company_address_municipality",
	12: "company_address_municipality_kana",
	13: "company_address_section",
	14: "company_address_section_kana",
	15: "company_address_chrome",
	16: "company_address_chrome_kana",
	17: "company_address_building_name",
	18: "company_address_building_name_kana",
	19: "company_tel",
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo from json.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate_number":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.CorporateName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.CorporateNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11110111,
		0b11111111,
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestContractInfoCorporateInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender as json.
func (s ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender from json.
func (s *ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("deposit_cycle_master_id")
		s.DepositCycleMasterID.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestDepositCycleInfo = [1]string{
	0: "deposit_cycle_master_id",
}

// Decode decodes ExaminationInfoV2UpdatingRequestDepositCycleInfo from json.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestDepositCycleInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deposit_cycle_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestDepositCycleInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestDepositCycleInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestDepositCycleInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID as json.
func (s ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID from json.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("shop_name")
		e.Str(s.ShopName)
	}
	{
		e.FieldStart("shop_name_kana")
		e.Str(s.ShopNameKana)
	}
	{
		e.FieldStart("shop_name_en")
		e.Str(s.ShopNameEn)
	}
	{
		e.FieldStart("support_mail")
		s.SupportMail.Encode(e)
	}
	{
		e.FieldStart("support_tel")
		s.SupportTel.Encode(e)
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		e.FieldStart("deals_long_apply_content")
		s.DealsLongApplyContent.Encode(e)
	}
	{
		e.FieldStart("deals_insecure_content")
		s.DealsInsecureContent.Encode(e)
	}
	{
		e.FieldStart("lost_trial")
		s.LostTrial.Encode(e)
	}
	{
		e.FieldStart("use_of_fincode")
		s.UseOfFincode.Encode(e)
	}
	{
		if s.SitePublished.Set {
			e.FieldStart("site_published")
			s.SitePublished.Encode(e)
		}
	}
	{
		if s.SiteInfo.Set {
			e.FieldStart("site_info")
			s.SiteInfo.Encode(e)
		}
	}
	{
		if s.PrepaidPoint.Set {
			e.FieldStart("prepaid_point")
			s.PrepaidPoint.Encode(e)
		}
	}
	{
		if s.PrepaidPointInfo.Set {
			e.FieldStart("prepaid_point_info")
			s.PrepaidPointInfo.Encode(e)
		}
	}
	{
		e.FieldStart("provides")
		s.Provides.Encode(e)
	}
	{
		e.FieldStart("content_description")
		s.ContentDescription.Encode(e)
	}
	{
		if s.ProductContentInfo.Set {
			e.FieldStart("product_content_info")
			s.ProductContentInfo.Encode(e)
		}
	}
	{
		if s.ServiceContentInfo.Set {
			e.FieldStart("service_content_info")
			s.ServiceContentInfo.Encode(e)
		}
	}
	{
		if s.DigitalContentInfo.Set {
			e.FieldStart("digital_content_info")
			s.DigitalContentInfo.Encode(e)
		}
	}
	{
		if s.AdditionalInfo.Set {
			e.FieldStart("additional_info")
			s.AdditionalInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfo = [20]string{
	0:  "shop_name",
	1:  "shop_name_kana",
	2:  "shop_name_en",
	3:  "support_mail",
	4:  "support_tel",
	5:  "unit_price",
	6:  "deals_long_apply_content",
	7:  "deals_insecure_content",
	8:  "lost_trial",
	9:  "use_of_fincode",
	10: "site_published",
	11: "site_info",
	12: "prepaid_point",
	13: "prepaid_point_info",
	14: "provides",
	15: "content_description",
	16: "product_content_info",
	17: "service_content_info",
	18: "digital_content_info",
	19: "additional_info",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfo from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ShopName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ShopNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ShopNameEn = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "support_mail":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "support_tel":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "deals_long_apply_content":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "deals_insecure_content":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "lost_trial":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "use_of_fincode":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.UseOfFincode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_of_fincode\"")
			}
		case "site_published":
			if err := func() error {
				s.SitePublished.Reset()
				if err := s.SitePublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_published\"")
			}
		case "site_info":
			if err := func() error {
				s.SiteInfo.Reset()
				if err := s.SiteInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_info\"")
			}
		case "prepaid_point":
			if err := func() error {
				s.PrepaidPoint.Reset()
				if err := s.PrepaidPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point\"")
			}
		case "prepaid_point_info":
			if err := func() error {
				s.PrepaidPointInfo.Reset()
				if err := s.PrepaidPointInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point_info\"")
			}
		case "provides":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.Provides.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides\"")
			}
		case "content_description":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "product_content_info":
			if err := func() error {
				s.ProductContentInfo.Reset()
				if err := s.ProductContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_content_info\"")
			}
		case "service_content_info":
			if err := func() error {
				s.ServiceContentInfo.Reset()
				if err := s.ServiceContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_content_info\"")
			}
		case "digital_content_info":
			if err := func() error {
				s.DigitalContentInfo.Reset()
				if err := s.DigitalContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content_info\"")
			}
		case "additional_info":
			if err := func() error {
				s.AdditionalInfo.Reset()
				if err := s.AdditionalInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11011111,
		0b11000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ShopSalesManagerName.Set {
			e.FieldStart("shop_sales_manager_name")
			s.ShopSalesManagerName.Encode(e)
		}
	}
	{
		e.FieldStart("shop_servoce_name")
		s.ShopServoceName.Encode(e)
	}
	{
		e.FieldStart("shop_how_to_pay")
		s.ShopHowToPay.Encode(e)
	}
	{
		if s.ShopChargeDescription.Set {
			e.FieldStart("shop_charge_description")
			s.ShopChargeDescription.Encode(e)
		}
	}
	{
		e.FieldStart("shop_product_delivery_time")
		s.ShopProductDeliveryTime.Encode(e)
	}
	{
		e.FieldStart("shop_return_goods_handing_conditions")
		s.ShopReturnGoodsHandingConditions.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo = [6]string{
	0: "shop_sales_manager_name",
	1: "shop_servoce_name",
	2: "shop_how_to_pay",
	3: "shop_charge_description",
	4: "shop_product_delivery_time",
	5: "shop_return_goods_handing_conditions",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_sales_manager_name":
			if err := func() error {
				s.ShopSalesManagerName.Reset()
				if err := s.ShopSalesManagerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_sales_manager_name\"")
			}
		case "shop_servoce_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.ShopServoceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_servoce_name\"")
			}
		case "shop_how_to_pay":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.ShopHowToPay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_how_to_pay\"")
			}
		case "shop_charge_description":
			if err := func() error {
				s.ShopChargeDescription.Reset()
				if err := s.ShopChargeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_charge_description\"")
			}
		case "shop_product_delivery_time":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.ShopProductDeliveryTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_product_delivery_time\"")
			}
		case "shop_return_goods_handing_conditions":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.ShopReturnGoodsHandingConditions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_return_goods_handing_conditions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00110110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) encodeFields(e *jx.Encoder) {
	{
		if s.HowToUse.Set {
			e.FieldStart("how_to_use")
			s.HowToUse.Encode(e)
		}
	}
	{
		if s.AboutExpiration.Set {
			e.FieldStart("about_expiration")
			s.AboutExpiration.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo = [2]string{
	0: "how_to_use",
	1: "about_expiration",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "how_to_use":
			if err := func() error {
				s.HowToUse.Reset()
				if err := s.HowToUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"how_to_use\"")
			}
		case "about_expiration":
			if err := func() error {
				s.AboutExpiration.Reset()
				if err := s.AboutExpiration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"about_expiration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) encodeFields(e *jx.Encoder) {
	{
		if s.Product.Set {
			e.FieldStart("product")
			s.Product.Encode(e)
		}
	}
	{
		if s.Service.Set {
			e.FieldStart("service")
			s.Service.Encode(e)
		}
	}
	{
		if s.DigitalContent.Set {
			e.FieldStart("digital_content")
			s.DigitalContent.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoProvides = [3]string{
	0: "product",
	1: "service",
	2: "digital_content",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoProvides from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfoProvides to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "product":
			if err := func() error {
				s.Product.Reset()
				if err := s.Product.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product\"")
			}
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service\"")
			}
		case "digital_content":
			if err := func() error {
				s.DigitalContent.Reset()
				if err := s.DigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfoProvides")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoProvides) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	{
		if s.Credential.Set {
			e.FieldStart("credential")
			s.Credential.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoSiteInfo = [2]string{
	0: "url",
	1: "credential",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoSiteInfo from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfoSiteInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "credential":
			if err := func() error {
				s.Credential.Reset()
				if err := s.Credential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credential\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfoSiteInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoSiteInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoSiteInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) encodeFields(e *jx.Encoder) {
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingRequestShopInfoUseOfFincode = [2]string{
	0: "used_on_web",
	1: "used_on_app",
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode from json.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingRequestShopInfoUseOfFincode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.ContractInfo.Set {
			e.FieldStart("contract_info")
			s.ContractInfo.Encode(e)
		}
	}
	{
		if s.ShopInfo.Set {
			e.FieldStart("shop_info")
			s.ShopInfo.Encode(e)
		}
	}
	{
		if s.BankAccountInfo.Set {
			e.FieldStart("bank_account_info")
			s.BankAccountInfo.Encode(e)
		}
	}
	{
		if s.DepositCycleInfo.Set {
			e.FieldStart("deposit_cycle_info")
			s.DepositCycleInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponse = [5]string{
	0: "status_code",
	1: "contract_info",
	2: "shop_info",
	3: "bank_account_info",
	4: "deposit_cycle_info",
}

// Decode decodes ExaminationInfoV2UpdatingResponse from json.
func (s *ExaminationInfoV2UpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "contract_info":
			if err := func() error {
				s.ContractInfo.Reset()
				if err := s.ContractInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"contract_info\"")
			}
		case "shop_info":
			if err := func() error {
				s.ShopInfo.Reset()
				if err := s.ShopInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_info\"")
			}
		case "bank_account_info":
			if err := func() error {
				s.BankAccountInfo.Reset()
				if err := s.BankAccountInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_account_info\"")
			}
		case "deposit_cycle_info":
			if err := func() error {
				s.DepositCycleInfo.Reset()
				if err := s.DepositCycleInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) encodeFields(e *jx.Encoder) {
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		e.FieldStart("branch_code")
		e.Str(s.BranchCode)
	}
	{
		e.FieldStart("account_kind")
		s.AccountKind.Encode(e)
	}
	{
		e.FieldStart("account_number")
		e.Str(s.AccountNumber)
	}
	{
		e.FieldStart("account_name")
		e.Str(s.AccountName)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseBankAccountInfo = [5]string{
	0: "bank_code",
	1: "branch_code",
	2: "account_kind",
	3: "account_number",
	4: "account_name",
}

// Decode decodes ExaminationInfoV2UpdatingResponseBankAccountInfo from json.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseBankAccountInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "branch_code":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.BranchCode = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "account_kind":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.AccountNumber = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.AccountName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseBankAccountInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00011110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseBankAccountInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseBankAccountInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind as json.
func (s ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind from json.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("representative_last_name")
		s.RepresentativeLastName.Encode(e)
	}
	{
		e.FieldStart("representative_last_name_kana")
		s.RepresentativeLastNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_first_name")
		s.RepresentativeFirstName.Encode(e)
	}
	{
		e.FieldStart("representative_first_name_kana")
		s.RepresentativeFirstNameKana.Encode(e)
	}
	{
		e.FieldStart("representative_postal_code")
		s.RepresentativePostalCode.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture")
		s.RepresentativePrefecture.Encode(e)
	}
	{
		e.FieldStart("representative_prefecture_kana")
		s.RepresentativePrefectureKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality")
		s.RepresentativeAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("representative_address_municipality_kana")
		s.RepresentativeAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_section")
		s.RepresentativeAddressSection.Encode(e)
	}
	{
		e.FieldStart("representative_address_section_kana")
		s.RepresentativeAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome")
		s.RepresentativeAddressChrome.Encode(e)
	}
	{
		e.FieldStart("representative_address_chrome_kana")
		s.RepresentativeAddressChromeKana.Encode(e)
	}
	{
		if s.RepresentativeAddressBuildingName.Set {
			e.FieldStart("representative_address_building_name")
			s.RepresentativeAddressBuildingName.Encode(e)
		}
	}
	{
		if s.RepresentativeAddressBuildingNameKana.Set {
			e.FieldStart("representative_address_building_name_kana")
			s.RepresentativeAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("representative_tel")
		s.RepresentativeTel.Encode(e)
	}
	{
		e.FieldStart("representative_birthday")
		s.RepresentativeBirthday.Encode(e)
	}
	{
		e.FieldStart("representative_gender")
		s.RepresentativeGender.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name")
		s.Staff1LastName.Encode(e)
	}
	{
		e.FieldStart("staff1_last_name_kana")
		s.Staff1LastNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name")
		s.Staff1FirstName.Encode(e)
	}
	{
		e.FieldStart("staff1_first_name_kana")
		s.Staff1FirstNameKana.Encode(e)
	}
	{
		e.FieldStart("staff1_company_name")
		s.Staff1CompanyName.Encode(e)
	}
	{
		e.FieldStart("staff1_belongs")
		s.Staff1Belongs.Encode(e)
	}
	{
		e.FieldStart("staff1_tel")
		s.Staff1Tel.Encode(e)
	}
	{
		e.FieldStart("staff1_mail")
		s.Staff1Mail.Encode(e)
	}
	{
		if s.Staff2LastName.Set {
			e.FieldStart("staff2_last_name")
			s.Staff2LastName.Encode(e)
		}
	}
	{
		if s.Staff2LastNameKana.Set {
			e.FieldStart("staff2_last_name_kana")
			s.Staff2LastNameKana.Encode(e)
		}
	}
	{
		if s.Staff2FirstName.Set {
			e.FieldStart("staff2_first_name")
			s.Staff2FirstName.Encode(e)
		}
	}
	{
		if s.Staff2FirstNameKana.Set {
			e.FieldStart("staff2_first_name_kana")
			s.Staff2FirstNameKana.Encode(e)
		}
	}
	{
		if s.Staff2CompanyName.Set {
			e.FieldStart("staff2_company_name")
			s.Staff2CompanyName.Encode(e)
		}
	}
	{
		if s.Staff2Belongs.Set {
			e.FieldStart("staff2_belongs")
			s.Staff2Belongs.Encode(e)
		}
	}
	{
		if s.Staff2Tel.Set {
			e.FieldStart("staff2_tel")
			s.Staff2Tel.Encode(e)
		}
	}
	{
		if s.Staff2Mail.Set {
			e.FieldStart("staff2_mail")
			s.Staff2Mail.Encode(e)
		}
	}
	{
		e.FieldStart("corporate")
		s.Corporate.Encode(e)
	}
	{
		if s.CorporateInfo.Set {
			e.FieldStart("corporate_info")
			s.CorporateInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfo = [36]string{
	0:  "representative_last_name",
	1:  "representative_last_name_kana",
	2:  "representative_first_name",
	3:  "representative_first_name_kana",
	4:  "representative_postal_code",
	5:  "representative_prefecture",
	6:  "representative_prefecture_kana",
	7:  "representative_address_municipality",
	8:  "representative_address_municipality_kana",
	9:  "representative_address_section",
	10: "representative_address_section_kana",
	11: "representative_address_chrome",
	12: "representative_address_chrome_kana",
	13: "representative_address_building_name",
	14: "representative_address_building_name_kana",
	15: "representative_tel",
	16: "representative_birthday",
	17: "representative_gender",
	18: "staff1_last_name",
	19: "staff1_last_name_kana",
	20: "staff1_first_name",
	21: "staff1_first_name_kana",
	22: "staff1_company_name",
	23: "staff1_belongs",
	24: "staff1_tel",
	25: "staff1_mail",
	26: "staff2_last_name",
	27: "staff2_last_name_kana",
	28: "staff2_first_name",
	29: "staff2_first_name_kana",
	30: "staff2_company_name",
	31: "staff2_belongs",
	32: "staff2_tel",
	33: "staff2_mail",
	34: "corporate",
	35: "corporate_info",
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfo from json.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseContractInfo to nil")
	}
	var requiredBitSet [5]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "representative_last_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name\"")
			}
		case "representative_last_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeLastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_last_name_kana\"")
			}
		case "representative_first_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name\"")
			}
		case "representative_first_name_kana":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeFirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_first_name_kana\"")
			}
		case "representative_postal_code":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativePostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_postal_code\"")
			}
		case "representative_prefecture":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.RepresentativePrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture\"")
			}
		case "representative_prefecture_kana":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.RepresentativePrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_prefecture_kana\"")
			}
		case "representative_address_municipality":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality\"")
			}
		case "representative_address_municipality_kana":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_municipality_kana\"")
			}
		case "representative_address_section":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section\"")
			}
		case "representative_address_section_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.RepresentativeAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_section_kana\"")
			}
		case "representative_address_chrome":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.RepresentativeAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome\"")
			}
		case "representative_address_chrome_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.RepresentativeAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_chrome_kana\"")
			}
		case "representative_address_building_name":
			if err := func() error {
				s.RepresentativeAddressBuildingName.Reset()
				if err := s.RepresentativeAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name\"")
			}
		case "representative_address_building_name_kana":
			if err := func() error {
				s.RepresentativeAddressBuildingNameKana.Reset()
				if err := s.RepresentativeAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_address_building_name_kana\"")
			}
		case "representative_tel":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.RepresentativeTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_tel\"")
			}
		case "representative_birthday":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.RepresentativeBirthday.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_birthday\"")
			}
		case "representative_gender":
			requiredBitSet[2] |= 1 << 1
			if err := func() error {
				if err := s.RepresentativeGender.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"representative_gender\"")
			}
		case "staff1_last_name":
			requiredBitSet[2] |= 1 << 2
			if err := func() error {
				if err := s.Staff1LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name\"")
			}
		case "staff1_last_name_kana":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.Staff1LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_last_name_kana\"")
			}
		case "staff1_first_name":
			requiredBitSet[2] |= 1 << 4
			if err := func() error {
				if err := s.Staff1FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name\"")
			}
		case "staff1_first_name_kana":
			requiredBitSet[2] |= 1 << 5
			if err := func() error {
				if err := s.Staff1FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_first_name_kana\"")
			}
		case "staff1_company_name":
			requiredBitSet[2] |= 1 << 6
			if err := func() error {
				if err := s.Staff1CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_company_name\"")
			}
		case "staff1_belongs":
			requiredBitSet[2] |= 1 << 7
			if err := func() error {
				if err := s.Staff1Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_belongs\"")
			}
		case "staff1_tel":
			requiredBitSet[3] |= 1 << 0
			if err := func() error {
				if err := s.Staff1Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_tel\"")
			}
		case "staff1_mail":
			requiredBitSet[3] |= 1 << 1
			if err := func() error {
				if err := s.Staff1Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff1_mail\"")
			}
		case "staff2_last_name":
			if err := func() error {
				s.Staff2LastName.Reset()
				if err := s.Staff2LastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name\"")
			}
		case "staff2_last_name_kana":
			if err := func() error {
				s.Staff2LastNameKana.Reset()
				if err := s.Staff2LastNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_last_name_kana\"")
			}
		case "staff2_first_name":
			if err := func() error {
				s.Staff2FirstName.Reset()
				if err := s.Staff2FirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name\"")
			}
		case "staff2_first_name_kana":
			if err := func() error {
				s.Staff2FirstNameKana.Reset()
				if err := s.Staff2FirstNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_first_name_kana\"")
			}
		case "staff2_company_name":
			if err := func() error {
				s.Staff2CompanyName.Reset()
				if err := s.Staff2CompanyName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_company_name\"")
			}
		case "staff2_belongs":
			if err := func() error {
				s.Staff2Belongs.Reset()
				if err := s.Staff2Belongs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_belongs\"")
			}
		case "staff2_tel":
			if err := func() error {
				s.Staff2Tel.Reset()
				if err := s.Staff2Tel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_tel\"")
			}
		case "staff2_mail":
			if err := func() error {
				s.Staff2Mail.Reset()
				if err := s.Staff2Mail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"staff2_mail\"")
			}
		case "corporate":
			requiredBitSet[4] |= 1 << 2
			if err := func() error {
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "corporate_info":
			if err := func() error {
				s.CorporateInfo.Reset()
				if err := s.CorporateInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseContractInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [5]uint8{
		0b11111111,
		0b10011111,
		0b11111111,
		0b00000011,
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("corporate_number")
		s.CorporateNumber.Encode(e)
	}
	{
		e.FieldStart("corporate_name")
		e.Str(s.CorporateName)
	}
	{
		e.FieldStart("corporate_name_kana")
		e.Str(s.CorporateNameKana)
	}
	{
		if s.Hp.Set {
			e.FieldStart("hp")
			s.Hp.Encode(e)
		}
	}
	{
		e.FieldStart("capital")
		s.Capital.Encode(e)
	}
	{
		e.FieldStart("established_at")
		s.EstablishedAt.Encode(e)
	}
	{
		e.FieldStart("yearly_sales")
		s.YearlySales.Encode(e)
	}
	{
		e.FieldStart("business_details")
		s.BusinessDetails.Encode(e)
	}
	{
		e.FieldStart("company_postal_code")
		s.CompanyPostalCode.Encode(e)
	}
	{
		e.FieldStart("company_prefecture")
		s.CompanyPrefecture.Encode(e)
	}
	{
		e.FieldStart("company_prefecture_kana")
		s.CompanyPrefectureKana.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality")
		s.CompanyAddressMunicipality.Encode(e)
	}
	{
		e.FieldStart("company_address_municipality_kana")
		s.CompanyAddressMunicipalityKana.Encode(e)
	}
	{
		e.FieldStart("company_address_section")
		s.CompanyAddressSection.Encode(e)
	}
	{
		e.FieldStart("company_address_section_kana")
		s.CompanyAddressSectionKana.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome")
		s.CompanyAddressChrome.Encode(e)
	}
	{
		e.FieldStart("company_address_chrome_kana")
		s.CompanyAddressChromeKana.Encode(e)
	}
	{
		if s.CompanyAddressBuildingName.Set {
			e.FieldStart("company_address_building_name")
			s.CompanyAddressBuildingName.Encode(e)
		}
	}
	{
		if s.CompanyAddressBuildingNameKana.Set {
			e.FieldStart("company_address_building_name_kana")
			s.CompanyAddressBuildingNameKana.Encode(e)
		}
	}
	{
		e.FieldStart("company_tel")
		s.CompanyTel.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfoCorporateInfo = [20]string{
	0:  "corporate_number",
	1:  "corporate_name",
	2:  "corporate_name_kana",
	3:  "hp",
	4:  "capital",
	5:  "established_at",
	6:  "yearly_sales",
	7:  "business_details",
	8:  "company_postal_code",
	9:  "company_prefecture",
	10: "company_prefecture_kana",
	11: "company_address_municipality",
	12: "company_address_municipality_kana",
	13: "company_address_section",
	14: "company_address_section_kana",
	15: "company_address_chrome",
	16: "company_address_chrome_kana",
	17: "company_address_building_name",
	18: "company_address_building_name_kana",
	19: "company_tel",
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo from json.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate_number":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.CorporateNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_number\"")
			}
		case "corporate_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.CorporateName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name\"")
			}
		case "corporate_name_kana":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.CorporateNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate_name_kana\"")
			}
		case "hp":
			if err := func() error {
				s.Hp.Reset()
				if err := s.Hp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hp\"")
			}
		case "capital":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.Capital.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capital\"")
			}
		case "established_at":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.EstablishedAt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"established_at\"")
			}
		case "yearly_sales":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.YearlySales.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"yearly_sales\"")
			}
		case "business_details":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.BusinessDetails.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"business_details\"")
			}
		case "company_postal_code":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.CompanyPostalCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_postal_code\"")
			}
		case "company_prefecture":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.CompanyPrefecture.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture\"")
			}
		case "company_prefecture_kana":
			requiredBitSet[1] |= 1 << 2
			if err := func() error {
				if err := s.CompanyPrefectureKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_prefecture_kana\"")
			}
		case "company_address_municipality":
			requiredBitSet[1] |= 1 << 3
			if err := func() error {
				if err := s.CompanyAddressMunicipality.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality\"")
			}
		case "company_address_municipality_kana":
			requiredBitSet[1] |= 1 << 4
			if err := func() error {
				if err := s.CompanyAddressMunicipalityKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_municipality_kana\"")
			}
		case "company_address_section":
			requiredBitSet[1] |= 1 << 5
			if err := func() error {
				if err := s.CompanyAddressSection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section\"")
			}
		case "company_address_section_kana":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.CompanyAddressSectionKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_section_kana\"")
			}
		case "company_address_chrome":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.CompanyAddressChrome.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome\"")
			}
		case "company_address_chrome_kana":
			requiredBitSet[2] |= 1 << 0
			if err := func() error {
				if err := s.CompanyAddressChromeKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_chrome_kana\"")
			}
		case "company_address_building_name":
			if err := func() error {
				s.CompanyAddressBuildingName.Reset()
				if err := s.CompanyAddressBuildingName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name\"")
			}
		case "company_address_building_name_kana":
			if err := func() error {
				s.CompanyAddressBuildingNameKana.Reset()
				if err := s.CompanyAddressBuildingNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_address_building_name_kana\"")
			}
		case "company_tel":
			requiredBitSet[2] |= 1 << 3
			if err := func() error {
				if err := s.CompanyTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"company_tel\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11110111,
		0b11111111,
		0b00001001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseContractInfoCorporateInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender as json.
func (s ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender from json.
func (s *ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("deposit_cycle_master_id")
		s.DepositCycleMasterID.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseDepositCycleInfo = [1]string{
	0: "deposit_cycle_master_id",
}

// Decode decodes ExaminationInfoV2UpdatingResponseDepositCycleInfo from json.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseDepositCycleInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "deposit_cycle_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.DepositCycleMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_cycle_master_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseDepositCycleInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseDepositCycleInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseDepositCycleInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID as json.
func (s ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID from json.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("shop_name")
		e.Str(s.ShopName)
	}
	{
		e.FieldStart("shop_name_kana")
		e.Str(s.ShopNameKana)
	}
	{
		e.FieldStart("shop_name_en")
		e.Str(s.ShopNameEn)
	}
	{
		e.FieldStart("support_mail")
		s.SupportMail.Encode(e)
	}
	{
		e.FieldStart("support_tel")
		s.SupportTel.Encode(e)
	}
	{
		if s.UnitPrice.Set {
			e.FieldStart("unit_price")
			s.UnitPrice.Encode(e)
		}
	}
	{
		e.FieldStart("deals_long_apply_content")
		s.DealsLongApplyContent.Encode(e)
	}
	{
		e.FieldStart("deals_insecure_content")
		s.DealsInsecureContent.Encode(e)
	}
	{
		e.FieldStart("lost_trial")
		s.LostTrial.Encode(e)
	}
	{
		e.FieldStart("use_of_fincode")
		s.UseOfFincode.Encode(e)
	}
	{
		if s.SitePublished.Set {
			e.FieldStart("site_published")
			s.SitePublished.Encode(e)
		}
	}
	{
		if s.SiteInfo.Set {
			e.FieldStart("site_info")
			s.SiteInfo.Encode(e)
		}
	}
	{
		if s.PrepaidPoint.Set {
			e.FieldStart("prepaid_point")
			s.PrepaidPoint.Encode(e)
		}
	}
	{
		if s.PrepaidPointInfo.Set {
			e.FieldStart("prepaid_point_info")
			s.PrepaidPointInfo.Encode(e)
		}
	}
	{
		e.FieldStart("provides")
		s.Provides.Encode(e)
	}
	{
		e.FieldStart("content_description")
		s.ContentDescription.Encode(e)
	}
	{
		if s.ProductContentInfo.Set {
			e.FieldStart("product_content_info")
			s.ProductContentInfo.Encode(e)
		}
	}
	{
		if s.ServiceContentInfo.Set {
			e.FieldStart("service_content_info")
			s.ServiceContentInfo.Encode(e)
		}
	}
	{
		if s.DigitalContentInfo.Set {
			e.FieldStart("digital_content_info")
			s.DigitalContentInfo.Encode(e)
		}
	}
	{
		if s.AdditionalInfo.Set {
			e.FieldStart("additional_info")
			s.AdditionalInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfo = [20]string{
	0:  "shop_name",
	1:  "shop_name_kana",
	2:  "shop_name_en",
	3:  "support_mail",
	4:  "support_tel",
	5:  "unit_price",
	6:  "deals_long_apply_content",
	7:  "deals_insecure_content",
	8:  "lost_trial",
	9:  "use_of_fincode",
	10: "site_published",
	11: "site_info",
	12: "prepaid_point",
	13: "prepaid_point_info",
	14: "provides",
	15: "content_description",
	16: "product_content_info",
	17: "service_content_info",
	18: "digital_content_info",
	19: "additional_info",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfo from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfo to nil")
	}
	var requiredBitSet [3]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_name":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.ShopName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.ShopNameKana = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_name_en":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.ShopNameEn = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_en\"")
			}
		case "support_mail":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				if err := s.SupportMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_mail\"")
			}
		case "support_tel":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.SupportTel.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"support_tel\"")
			}
		case "unit_price":
			if err := func() error {
				s.UnitPrice.Reset()
				if err := s.UnitPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"unit_price\"")
			}
		case "deals_long_apply_content":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.DealsLongApplyContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_long_apply_content\"")
			}
		case "deals_insecure_content":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				if err := s.DealsInsecureContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deals_insecure_content\"")
			}
		case "lost_trial":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.LostTrial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lost_trial\"")
			}
		case "use_of_fincode":
			requiredBitSet[1] |= 1 << 1
			if err := func() error {
				if err := s.UseOfFincode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"use_of_fincode\"")
			}
		case "site_published":
			if err := func() error {
				s.SitePublished.Reset()
				if err := s.SitePublished.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_published\"")
			}
		case "site_info":
			if err := func() error {
				s.SiteInfo.Reset()
				if err := s.SiteInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"site_info\"")
			}
		case "prepaid_point":
			if err := func() error {
				s.PrepaidPoint.Reset()
				if err := s.PrepaidPoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point\"")
			}
		case "prepaid_point_info":
			if err := func() error {
				s.PrepaidPointInfo.Reset()
				if err := s.PrepaidPointInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"prepaid_point_info\"")
			}
		case "provides":
			requiredBitSet[1] |= 1 << 6
			if err := func() error {
				if err := s.Provides.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provides\"")
			}
		case "content_description":
			requiredBitSet[1] |= 1 << 7
			if err := func() error {
				if err := s.ContentDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"content_description\"")
			}
		case "product_content_info":
			if err := func() error {
				s.ProductContentInfo.Reset()
				if err := s.ProductContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product_content_info\"")
			}
		case "service_content_info":
			if err := func() error {
				s.ServiceContentInfo.Reset()
				if err := s.ServiceContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service_content_info\"")
			}
		case "digital_content_info":
			if err := func() error {
				s.DigitalContentInfo.Reset()
				if err := s.DigitalContentInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content_info\"")
			}
		case "additional_info":
			if err := func() error {
				s.AdditionalInfo.Reset()
				if err := s.AdditionalInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"additional_info\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [3]uint8{
		0b11011111,
		0b11000011,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ShopSalesManagerName.Set {
			e.FieldStart("shop_sales_manager_name")
			s.ShopSalesManagerName.Encode(e)
		}
	}
	{
		e.FieldStart("shop_servoce_name")
		s.ShopServoceName.Encode(e)
	}
	{
		e.FieldStart("shop_how_to_pay")
		s.ShopHowToPay.Encode(e)
	}
	{
		if s.ShopChargeDescription.Set {
			e.FieldStart("shop_charge_description")
			s.ShopChargeDescription.Encode(e)
		}
	}
	{
		e.FieldStart("shop_product_delivery_time")
		s.ShopProductDeliveryTime.Encode(e)
	}
	{
		e.FieldStart("shop_return_goods_handing_conditions")
		s.ShopReturnGoodsHandingConditions.Encode(e)
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo = [6]string{
	0: "shop_sales_manager_name",
	1: "shop_servoce_name",
	2: "shop_how_to_pay",
	3: "shop_charge_description",
	4: "shop_product_delivery_time",
	5: "shop_return_goods_handing_conditions",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_sales_manager_name":
			if err := func() error {
				s.ShopSalesManagerName.Reset()
				if err := s.ShopSalesManagerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_sales_manager_name\"")
			}
		case "shop_servoce_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.ShopServoceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_servoce_name\"")
			}
		case "shop_how_to_pay":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.ShopHowToPay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_how_to_pay\"")
			}
		case "shop_charge_description":
			if err := func() error {
				s.ShopChargeDescription.Reset()
				if err := s.ShopChargeDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_charge_description\"")
			}
		case "shop_product_delivery_time":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.ShopProductDeliveryTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_product_delivery_time\"")
			}
		case "shop_return_goods_handing_conditions":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				if err := s.ShopReturnGoodsHandingConditions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_return_goods_handing_conditions\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00110110,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) encodeFields(e *jx.Encoder) {
	{
		if s.HowToUse.Set {
			e.FieldStart("how_to_use")
			s.HowToUse.Encode(e)
		}
	}
	{
		if s.AboutExpiration.Set {
			e.FieldStart("about_expiration")
			s.AboutExpiration.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo = [2]string{
	0: "how_to_use",
	1: "about_expiration",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "how_to_use":
			if err := func() error {
				s.HowToUse.Reset()
				if err := s.HowToUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"how_to_use\"")
			}
		case "about_expiration":
			if err := func() error {
				s.AboutExpiration.Reset()
				if err := s.AboutExpiration.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"about_expiration\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) encodeFields(e *jx.Encoder) {
	{
		if s.Product.Set {
			e.FieldStart("product")
			s.Product.Encode(e)
		}
	}
	{
		if s.Service.Set {
			e.FieldStart("service")
			s.Service.Encode(e)
		}
	}
	{
		if s.DigitalContent.Set {
			e.FieldStart("digital_content")
			s.DigitalContent.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoProvides = [3]string{
	0: "product",
	1: "service",
	2: "digital_content",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoProvides from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfoProvides to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "product":
			if err := func() error {
				s.Product.Reset()
				if err := s.Product.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"product\"")
			}
		case "service":
			if err := func() error {
				s.Service.Reset()
				if err := s.Service.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"service\"")
			}
		case "digital_content":
			if err := func() error {
				s.DigitalContent.Reset()
				if err := s.DigitalContent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"digital_content\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfoProvides")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoProvides) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("url")
		s.URL.Encode(e)
	}
	{
		if s.Credential.Set {
			e.FieldStart("credential")
			s.Credential.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoSiteInfo = [2]string{
	0: "url",
	1: "credential",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoSiteInfo from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfoSiteInfo to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "credential":
			if err := func() error {
				s.Credential.Reset()
				if err := s.Credential.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"credential\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfoSiteInfo")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoSiteInfo) {
					name = jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoSiteInfo[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) encodeFields(e *jx.Encoder) {
	{
		if s.UsedOnWeb.Set {
			e.FieldStart("used_on_web")
			s.UsedOnWeb.Encode(e)
		}
	}
	{
		if s.UsedOnApp.Set {
			e.FieldStart("used_on_app")
			s.UsedOnApp.Encode(e)
		}
	}
}

var jsonFieldsNameOfExaminationInfoV2UpdatingResponseShopInfoUseOfFincode = [2]string{
	0: "used_on_web",
	1: "used_on_app",
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode from json.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "used_on_web":
			if err := func() error {
				s.UsedOnWeb.Reset()
				if err := s.UsedOnWeb.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_web\"")
			}
		case "used_on_app":
			if err := func() error {
				s.UsedOnApp.Reset()
				if err := s.UsedOnApp.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_on_app\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseShopInfoUseOfFincode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseStatusCode as json.
func (s ExaminationInfoV2UpdatingResponseStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExaminationInfoV2UpdatingResponseStatusCode from json.
func (s *ExaminationInfoV2UpdatingResponseStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExaminationInfoV2UpdatingResponseStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExaminationInfoV2UpdatingResponseStatusCode(v) {
	case ExaminationInfoV2UpdatingResponseStatusCode101:
		*s = ExaminationInfoV2UpdatingResponseStatusCode101
	case ExaminationInfoV2UpdatingResponseStatusCode102:
		*s = ExaminationInfoV2UpdatingResponseStatusCode102
	case ExaminationInfoV2UpdatingResponseStatusCode103:
		*s = ExaminationInfoV2UpdatingResponseStatusCode103
	case ExaminationInfoV2UpdatingResponseStatusCode105:
		*s = ExaminationInfoV2UpdatingResponseStatusCode105
	case ExaminationInfoV2UpdatingResponseStatusCode106:
		*s = ExaminationInfoV2UpdatingResponseStatusCode106
	case ExaminationInfoV2UpdatingResponseStatusCode107:
		*s = ExaminationInfoV2UpdatingResponseStatusCode107
	default:
		*s = ExaminationInfoV2UpdatingResponseStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExaminationInfoV2UpdatingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExaminationInfoV2UpdatingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentAfter3DSecureOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentAfter3DSecureOK) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentAfter3DSecureOK = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes ExecutePaymentAfter3DSecureOK from json.
func (s *ExecutePaymentAfter3DSecureOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentAfter3DSecureOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentAfter3DSecureOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKBrand as json.
func (s ExecutePaymentAfter3DSecureOKBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKBrand from json.
func (s *ExecutePaymentAfter3DSecureOKBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKBrand(v) {
	case ExecutePaymentAfter3DSecureOKBrandVISA:
		*s = ExecutePaymentAfter3DSecureOKBrandVISA
	case ExecutePaymentAfter3DSecureOKBrandMASTER:
		*s = ExecutePaymentAfter3DSecureOKBrandMASTER
	case ExecutePaymentAfter3DSecureOKBrandJCB:
		*s = ExecutePaymentAfter3DSecureOKBrandJCB
	case ExecutePaymentAfter3DSecureOKBrandAMEX:
		*s = ExecutePaymentAfter3DSecureOKBrandAMEX
	case ExecutePaymentAfter3DSecureOKBrandDINERS:
		*s = ExecutePaymentAfter3DSecureOKBrandDINERS
	case ExecutePaymentAfter3DSecureOKBrandDISCOVER:
		*s = ExecutePaymentAfter3DSecureOKBrandDISCOVER
	case ExecutePaymentAfter3DSecureOKBrandEmpty:
		*s = ExecutePaymentAfter3DSecureOKBrandEmpty
	default:
		*s = ExecutePaymentAfter3DSecureOKBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKJobCode as json.
func (s ExecutePaymentAfter3DSecureOKJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKJobCode from json.
func (s *ExecutePaymentAfter3DSecureOKJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKJobCode(v) {
	case ExecutePaymentAfter3DSecureOKJobCodeCHECK:
		*s = ExecutePaymentAfter3DSecureOKJobCodeCHECK
	case ExecutePaymentAfter3DSecureOKJobCodeAUTH:
		*s = ExecutePaymentAfter3DSecureOKJobCodeAUTH
	case ExecutePaymentAfter3DSecureOKJobCodeCAPTURE:
		*s = ExecutePaymentAfter3DSecureOKJobCodeCAPTURE
	default:
		*s = ExecutePaymentAfter3DSecureOKJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKMethod as json.
func (s ExecutePaymentAfter3DSecureOKMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKMethod from json.
func (s *ExecutePaymentAfter3DSecureOKMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKMethod(v) {
	case ExecutePaymentAfter3DSecureOKMethod1:
		*s = ExecutePaymentAfter3DSecureOKMethod1
	case ExecutePaymentAfter3DSecureOKMethod2:
		*s = ExecutePaymentAfter3DSecureOKMethod2
	case ExecutePaymentAfter3DSecureOKMethod5:
		*s = ExecutePaymentAfter3DSecureOKMethod5
	default:
		*s = ExecutePaymentAfter3DSecureOKMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKPayTimes as json.
func (s ExecutePaymentAfter3DSecureOKPayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKPayTimes from json.
func (s *ExecutePaymentAfter3DSecureOKPayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKPayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKPayTimes(v) {
	case ExecutePaymentAfter3DSecureOKPayTimes3:
		*s = ExecutePaymentAfter3DSecureOKPayTimes3
	case ExecutePaymentAfter3DSecureOKPayTimes5:
		*s = ExecutePaymentAfter3DSecureOKPayTimes5
	case ExecutePaymentAfter3DSecureOKPayTimes6:
		*s = ExecutePaymentAfter3DSecureOKPayTimes6
	case ExecutePaymentAfter3DSecureOKPayTimes10:
		*s = ExecutePaymentAfter3DSecureOKPayTimes10
	case ExecutePaymentAfter3DSecureOKPayTimes12:
		*s = ExecutePaymentAfter3DSecureOKPayTimes12
	case ExecutePaymentAfter3DSecureOKPayTimes15:
		*s = ExecutePaymentAfter3DSecureOKPayTimes15
	case ExecutePaymentAfter3DSecureOKPayTimes18:
		*s = ExecutePaymentAfter3DSecureOKPayTimes18
	case ExecutePaymentAfter3DSecureOKPayTimes20:
		*s = ExecutePaymentAfter3DSecureOKPayTimes20
	case ExecutePaymentAfter3DSecureOKPayTimes24:
		*s = ExecutePaymentAfter3DSecureOKPayTimes24
	default:
		*s = ExecutePaymentAfter3DSecureOKPayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKPayType as json.
func (s ExecutePaymentAfter3DSecureOKPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKPayType from json.
func (s *ExecutePaymentAfter3DSecureOKPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKPayType(v) {
	case ExecutePaymentAfter3DSecureOKPayTypeCard:
		*s = ExecutePaymentAfter3DSecureOKPayTypeCard
	case ExecutePaymentAfter3DSecureOKPayTypeKonbini:
		*s = ExecutePaymentAfter3DSecureOKPayTypeKonbini
	case ExecutePaymentAfter3DSecureOKPayTypePaypay:
		*s = ExecutePaymentAfter3DSecureOKPayTypePaypay
	case ExecutePaymentAfter3DSecureOKPayTypeApplepay:
		*s = ExecutePaymentAfter3DSecureOKPayTypeApplepay
	case ExecutePaymentAfter3DSecureOKPayTypeDirectdebit:
		*s = ExecutePaymentAfter3DSecureOKPayTypeDirectdebit
	case ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount:
		*s = ExecutePaymentAfter3DSecureOKPayTypeVirtualaccount
	default:
		*s = ExecutePaymentAfter3DSecureOKPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKStatus as json.
func (s ExecutePaymentAfter3DSecureOKStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKStatus from json.
func (s *ExecutePaymentAfter3DSecureOKStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKStatus(v) {
	case ExecutePaymentAfter3DSecureOKStatusUNPROCESSED:
		*s = ExecutePaymentAfter3DSecureOKStatusUNPROCESSED
	case ExecutePaymentAfter3DSecureOKStatusCHECKED:
		*s = ExecutePaymentAfter3DSecureOKStatusCHECKED
	case ExecutePaymentAfter3DSecureOKStatusAUTHORIZED:
		*s = ExecutePaymentAfter3DSecureOKStatusAUTHORIZED
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentAfter3DSecureOKStatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentAfter3DSecureOKStatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentAfter3DSecureOKStatusCAPTURED:
		*s = ExecutePaymentAfter3DSecureOKStatusCAPTURED
	case ExecutePaymentAfter3DSecureOKStatusCANCELED:
		*s = ExecutePaymentAfter3DSecureOKStatusCANCELED
	case ExecutePaymentAfter3DSecureOKStatusEXPIRED:
		*s = ExecutePaymentAfter3DSecureOKStatusEXPIRED
	case ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED:
		*s = ExecutePaymentAfter3DSecureOKStatusAUTHENTICATED
	case ExecutePaymentAfter3DSecureOKStatusFAILED:
		*s = ExecutePaymentAfter3DSecureOKStatusFAILED
	default:
		*s = ExecutePaymentAfter3DSecureOKStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTds2Status as json.
func (s ExecutePaymentAfter3DSecureOKTds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTds2Status from json.
func (s *ExecutePaymentAfter3DSecureOKTds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKTds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKTds2Status(v) {
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATING
	case ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusCHALLENGE
	case ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED:
		*s = ExecutePaymentAfter3DSecureOKTds2StatusAUTHENTICATED
	default:
		*s = ExecutePaymentAfter3DSecureOKTds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTds2Type as json.
func (s ExecutePaymentAfter3DSecureOKTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTds2Type from json.
func (s *ExecutePaymentAfter3DSecureOKTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKTds2Type(v) {
	case ExecutePaymentAfter3DSecureOKTds2Type2:
		*s = ExecutePaymentAfter3DSecureOKTds2Type2
	case ExecutePaymentAfter3DSecureOKTds2Type3:
		*s = ExecutePaymentAfter3DSecureOKTds2Type3
	default:
		*s = ExecutePaymentAfter3DSecureOKTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTdsType as json.
func (s ExecutePaymentAfter3DSecureOKTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTdsType from json.
func (s *ExecutePaymentAfter3DSecureOKTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureOKTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureOKTdsType(v) {
	case ExecutePaymentAfter3DSecureOKTdsType0:
		*s = ExecutePaymentAfter3DSecureOKTdsType0
	case ExecutePaymentAfter3DSecureOKTdsType2:
		*s = ExecutePaymentAfter3DSecureOKTdsType2
	default:
		*s = ExecutePaymentAfter3DSecureOKTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentAfter3DSecureReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentAfter3DSecureReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		if s.PaRes.Set {
			e.FieldStart("pa_res")
			s.PaRes.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentAfter3DSecureReq = [3]string{
	0: "pay_type",
	1: "access_id",
	2: "pa_res",
}

// Decode decodes ExecutePaymentAfter3DSecureReq from json.
func (s *ExecutePaymentAfter3DSecureReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pa_res":
			if err := func() error {
				s.PaRes.Reset()
				if err := s.PaRes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pa_res\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentAfter3DSecureReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExecutePaymentAfter3DSecureReq) {
					name = jsonFieldsNameOfExecutePaymentAfter3DSecureReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentAfter3DSecureReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureReqPayType as json.
func (s ExecutePaymentAfter3DSecureReqPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentAfter3DSecureReqPayType from json.
func (s *ExecutePaymentAfter3DSecureReqPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentAfter3DSecureReqPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentAfter3DSecureReqPayType(v) {
	case ExecutePaymentAfter3DSecureReqPayTypeCard:
		*s = ExecutePaymentAfter3DSecureReqPayTypeCard
	case ExecutePaymentAfter3DSecureReqPayTypeKonbini:
		*s = ExecutePaymentAfter3DSecureReqPayTypeKonbini
	case ExecutePaymentAfter3DSecureReqPayTypePaypay:
		*s = ExecutePaymentAfter3DSecureReqPayTypePaypay
	case ExecutePaymentAfter3DSecureReqPayTypeApplepay:
		*s = ExecutePaymentAfter3DSecureReqPayTypeApplepay
	case ExecutePaymentAfter3DSecureReqPayTypeDirectdebit:
		*s = ExecutePaymentAfter3DSecureReqPayTypeDirectdebit
	case ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount:
		*s = ExecutePaymentAfter3DSecureReqPayTypeVirtualaccount
	default:
		*s = ExecutePaymentAfter3DSecureReqPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentAfter3DSecureReqPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentAfter3DSecureReqPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK as json.
func (s ExecutePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case ExecutePaymentOK0ExecutePaymentOK:
		s.ExecutePaymentOK0.Encode(e)
	case ExecutePaymentOK1ExecutePaymentOK:
		s.ExecutePaymentOK1.Encode(e)
	case ExecutePaymentOK2ExecutePaymentOK:
		s.ExecutePaymentOK2.Encode(e)
	case ExecutePaymentOK3ExecutePaymentOK:
		s.ExecutePaymentOK3.Encode(e)
	case ExecutePaymentOK4ExecutePaymentOK:
		s.ExecutePaymentOK4.Encode(e)
	}
}

func (s ExecutePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case ExecutePaymentOK0ExecutePaymentOK:
		s.ExecutePaymentOK0.encodeFields(e)
	case ExecutePaymentOK1ExecutePaymentOK:
		s.ExecutePaymentOK1.encodeFields(e)
	case ExecutePaymentOK2ExecutePaymentOK:
		s.ExecutePaymentOK2.encodeFields(e)
	case ExecutePaymentOK3ExecutePaymentOK:
		s.ExecutePaymentOK3.encodeFields(e)
	case ExecutePaymentOK4ExecutePaymentOK:
		s.ExecutePaymentOK4.encodeFields(e)
	}
}

// Decode decodes ExecutePaymentOK from json.
func (s *ExecutePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := ExecutePaymentOK0ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := ExecutePaymentOK1ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := ExecutePaymentOK2ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := ExecutePaymentOK3ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := ExecutePaymentOK4ExecutePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case ExecutePaymentOK0ExecutePaymentOK:
		if err := s.ExecutePaymentOK0.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentOK1ExecutePaymentOK:
		if err := s.ExecutePaymentOK1.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentOK2ExecutePaymentOK:
		if err := s.ExecutePaymentOK2.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentOK3ExecutePaymentOK:
		if err := s.ExecutePaymentOK3.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentOK4ExecutePaymentOK:
		if err := s.ExecutePaymentOK4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentOK0) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentOK0 = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes ExecutePaymentOK0 from json.
func (s *ExecutePaymentOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Brand as json.
func (s ExecutePaymentOK0Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0Brand from json.
func (s *ExecutePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0Brand(v) {
	case ExecutePaymentOK0BrandVISA:
		*s = ExecutePaymentOK0BrandVISA
	case ExecutePaymentOK0BrandMASTER:
		*s = ExecutePaymentOK0BrandMASTER
	case ExecutePaymentOK0BrandJCB:
		*s = ExecutePaymentOK0BrandJCB
	case ExecutePaymentOK0BrandAMEX:
		*s = ExecutePaymentOK0BrandAMEX
	case ExecutePaymentOK0BrandDINERS:
		*s = ExecutePaymentOK0BrandDINERS
	case ExecutePaymentOK0BrandDISCOVER:
		*s = ExecutePaymentOK0BrandDISCOVER
	case ExecutePaymentOK0BrandEmpty:
		*s = ExecutePaymentOK0BrandEmpty
	default:
		*s = ExecutePaymentOK0Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0JobCode as json.
func (s ExecutePaymentOK0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0JobCode from json.
func (s *ExecutePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0JobCode(v) {
	case ExecutePaymentOK0JobCodeCHECK:
		*s = ExecutePaymentOK0JobCodeCHECK
	case ExecutePaymentOK0JobCodeAUTH:
		*s = ExecutePaymentOK0JobCodeAUTH
	case ExecutePaymentOK0JobCodeCAPTURE:
		*s = ExecutePaymentOK0JobCodeCAPTURE
	default:
		*s = ExecutePaymentOK0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Method as json.
func (s ExecutePaymentOK0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0Method from json.
func (s *ExecutePaymentOK0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0Method(v) {
	case ExecutePaymentOK0Method1:
		*s = ExecutePaymentOK0Method1
	case ExecutePaymentOK0Method2:
		*s = ExecutePaymentOK0Method2
	case ExecutePaymentOK0Method5:
		*s = ExecutePaymentOK0Method5
	default:
		*s = ExecutePaymentOK0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0PayTimes as json.
func (s ExecutePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0PayTimes from json.
func (s *ExecutePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0PayTimes(v) {
	case ExecutePaymentOK0PayTimes3:
		*s = ExecutePaymentOK0PayTimes3
	case ExecutePaymentOK0PayTimes5:
		*s = ExecutePaymentOK0PayTimes5
	case ExecutePaymentOK0PayTimes6:
		*s = ExecutePaymentOK0PayTimes6
	case ExecutePaymentOK0PayTimes10:
		*s = ExecutePaymentOK0PayTimes10
	case ExecutePaymentOK0PayTimes12:
		*s = ExecutePaymentOK0PayTimes12
	case ExecutePaymentOK0PayTimes15:
		*s = ExecutePaymentOK0PayTimes15
	case ExecutePaymentOK0PayTimes18:
		*s = ExecutePaymentOK0PayTimes18
	case ExecutePaymentOK0PayTimes20:
		*s = ExecutePaymentOK0PayTimes20
	case ExecutePaymentOK0PayTimes24:
		*s = ExecutePaymentOK0PayTimes24
	default:
		*s = ExecutePaymentOK0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0PayType as json.
func (s ExecutePaymentOK0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0PayType from json.
func (s *ExecutePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0PayType(v) {
	case ExecutePaymentOK0PayTypeCard:
		*s = ExecutePaymentOK0PayTypeCard
	case ExecutePaymentOK0PayTypeKonbini:
		*s = ExecutePaymentOK0PayTypeKonbini
	case ExecutePaymentOK0PayTypePaypay:
		*s = ExecutePaymentOK0PayTypePaypay
	case ExecutePaymentOK0PayTypeApplepay:
		*s = ExecutePaymentOK0PayTypeApplepay
	case ExecutePaymentOK0PayTypeDirectdebit:
		*s = ExecutePaymentOK0PayTypeDirectdebit
	case ExecutePaymentOK0PayTypeVirtualaccount:
		*s = ExecutePaymentOK0PayTypeVirtualaccount
	default:
		*s = ExecutePaymentOK0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Status as json.
func (s ExecutePaymentOK0Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0Status from json.
func (s *ExecutePaymentOK0Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0Status(v) {
	case ExecutePaymentOK0StatusUNPROCESSED:
		*s = ExecutePaymentOK0StatusUNPROCESSED
	case ExecutePaymentOK0StatusCHECKED:
		*s = ExecutePaymentOK0StatusCHECKED
	case ExecutePaymentOK0StatusAUTHORIZED:
		*s = ExecutePaymentOK0StatusAUTHORIZED
	case ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentOK0StatusCAPTURED:
		*s = ExecutePaymentOK0StatusCAPTURED
	case ExecutePaymentOK0StatusCANCELED:
		*s = ExecutePaymentOK0StatusCANCELED
	case ExecutePaymentOK0StatusEXPIRED:
		*s = ExecutePaymentOK0StatusEXPIRED
	case ExecutePaymentOK0StatusAUTHENTICATED:
		*s = ExecutePaymentOK0StatusAUTHENTICATED
	case ExecutePaymentOK0StatusFAILED:
		*s = ExecutePaymentOK0StatusFAILED
	default:
		*s = ExecutePaymentOK0Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Tds2Status as json.
func (s ExecutePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0Tds2Status from json.
func (s *ExecutePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0Tds2Status(v) {
	case ExecutePaymentOK0Tds2StatusAUTHENTICATING:
		*s = ExecutePaymentOK0Tds2StatusAUTHENTICATING
	case ExecutePaymentOK0Tds2StatusCHALLENGE:
		*s = ExecutePaymentOK0Tds2StatusCHALLENGE
	case ExecutePaymentOK0Tds2StatusAUTHENTICATED:
		*s = ExecutePaymentOK0Tds2StatusAUTHENTICATED
	default:
		*s = ExecutePaymentOK0Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Tds2Type as json.
func (s ExecutePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0Tds2Type from json.
func (s *ExecutePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0Tds2Type(v) {
	case ExecutePaymentOK0Tds2Type2:
		*s = ExecutePaymentOK0Tds2Type2
	case ExecutePaymentOK0Tds2Type3:
		*s = ExecutePaymentOK0Tds2Type3
	default:
		*s = ExecutePaymentOK0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0TdsType as json.
func (s ExecutePaymentOK0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK0TdsType from json.
func (s *ExecutePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK0TdsType(v) {
	case ExecutePaymentOK0TdsType0:
		*s = ExecutePaymentOK0TdsType0
	case ExecutePaymentOK0TdsType2:
		*s = ExecutePaymentOK0TdsType2
	default:
		*s = ExecutePaymentOK0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentOK1) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentOK1 = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes ExecutePaymentOK1 from json.
func (s *ExecutePaymentOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Brand as json.
func (s ExecutePaymentOK1Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1Brand from json.
func (s *ExecutePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1Brand(v) {
	case ExecutePaymentOK1BrandVISA:
		*s = ExecutePaymentOK1BrandVISA
	case ExecutePaymentOK1BrandMASTER:
		*s = ExecutePaymentOK1BrandMASTER
	case ExecutePaymentOK1BrandJCB:
		*s = ExecutePaymentOK1BrandJCB
	case ExecutePaymentOK1BrandAMEX:
		*s = ExecutePaymentOK1BrandAMEX
	case ExecutePaymentOK1BrandDINERS:
		*s = ExecutePaymentOK1BrandDINERS
	case ExecutePaymentOK1BrandDISCOVER:
		*s = ExecutePaymentOK1BrandDISCOVER
	case ExecutePaymentOK1BrandEmpty:
		*s = ExecutePaymentOK1BrandEmpty
	default:
		*s = ExecutePaymentOK1Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1JobCode as json.
func (s ExecutePaymentOK1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1JobCode from json.
func (s *ExecutePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1JobCode(v) {
	case ExecutePaymentOK1JobCodeAUTH:
		*s = ExecutePaymentOK1JobCodeAUTH
	case ExecutePaymentOK1JobCodeCAPTURE:
		*s = ExecutePaymentOK1JobCodeCAPTURE
	default:
		*s = ExecutePaymentOK1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Method as json.
func (s ExecutePaymentOK1Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1Method from json.
func (s *ExecutePaymentOK1Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1Method(v) {
	case ExecutePaymentOK1Method1:
		*s = ExecutePaymentOK1Method1
	case ExecutePaymentOK1Method2:
		*s = ExecutePaymentOK1Method2
	case ExecutePaymentOK1Method5:
		*s = ExecutePaymentOK1Method5
	default:
		*s = ExecutePaymentOK1Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1PayTimes as json.
func (s ExecutePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1PayTimes from json.
func (s *ExecutePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1PayTimes(v) {
	case ExecutePaymentOK1PayTimes3:
		*s = ExecutePaymentOK1PayTimes3
	case ExecutePaymentOK1PayTimes5:
		*s = ExecutePaymentOK1PayTimes5
	case ExecutePaymentOK1PayTimes6:
		*s = ExecutePaymentOK1PayTimes6
	case ExecutePaymentOK1PayTimes10:
		*s = ExecutePaymentOK1PayTimes10
	case ExecutePaymentOK1PayTimes12:
		*s = ExecutePaymentOK1PayTimes12
	case ExecutePaymentOK1PayTimes15:
		*s = ExecutePaymentOK1PayTimes15
	case ExecutePaymentOK1PayTimes18:
		*s = ExecutePaymentOK1PayTimes18
	case ExecutePaymentOK1PayTimes20:
		*s = ExecutePaymentOK1PayTimes20
	case ExecutePaymentOK1PayTimes24:
		*s = ExecutePaymentOK1PayTimes24
	default:
		*s = ExecutePaymentOK1PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1PayType as json.
func (s ExecutePaymentOK1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1PayType from json.
func (s *ExecutePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1PayType(v) {
	case ExecutePaymentOK1PayTypeCard:
		*s = ExecutePaymentOK1PayTypeCard
	case ExecutePaymentOK1PayTypeKonbini:
		*s = ExecutePaymentOK1PayTypeKonbini
	case ExecutePaymentOK1PayTypePaypay:
		*s = ExecutePaymentOK1PayTypePaypay
	case ExecutePaymentOK1PayTypeApplepay:
		*s = ExecutePaymentOK1PayTypeApplepay
	case ExecutePaymentOK1PayTypeDirectdebit:
		*s = ExecutePaymentOK1PayTypeDirectdebit
	case ExecutePaymentOK1PayTypeVirtualaccount:
		*s = ExecutePaymentOK1PayTypeVirtualaccount
	default:
		*s = ExecutePaymentOK1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Status as json.
func (s ExecutePaymentOK1Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK1Status from json.
func (s *ExecutePaymentOK1Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK1Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK1Status(v) {
	case ExecutePaymentOK1StatusUNPROCESSED:
		*s = ExecutePaymentOK1StatusUNPROCESSED
	case ExecutePaymentOK1StatusCHECKED:
		*s = ExecutePaymentOK1StatusCHECKED
	case ExecutePaymentOK1StatusAUTHORIZED:
		*s = ExecutePaymentOK1StatusAUTHORIZED
	case ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentOK1StatusCAPTURED:
		*s = ExecutePaymentOK1StatusCAPTURED
	case ExecutePaymentOK1StatusCANCELED:
		*s = ExecutePaymentOK1StatusCANCELED
	case ExecutePaymentOK1StatusEXPIRED:
		*s = ExecutePaymentOK1StatusEXPIRED
	case ExecutePaymentOK1StatusAUTHENTICATED:
		*s = ExecutePaymentOK1StatusAUTHENTICATED
	case ExecutePaymentOK1StatusFAILED:
		*s = ExecutePaymentOK1StatusFAILED
	default:
		*s = ExecutePaymentOK1Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentOK2) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentOK2 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes ExecutePaymentOK2 from json.
func (s *ExecutePaymentOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2 to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2BarcodeFormat as json.
func (s ExecutePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2BarcodeFormat from json.
func (s *ExecutePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2BarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2BarcodeFormat(v) {
	case ExecutePaymentOK2BarcodeFormatJPG:
		*s = ExecutePaymentOK2BarcodeFormatJPG
	case ExecutePaymentOK2BarcodeFormatPNG:
		*s = ExecutePaymentOK2BarcodeFormatPNG
	case ExecutePaymentOK2BarcodeFormatBmp:
		*s = ExecutePaymentOK2BarcodeFormatBmp
	default:
		*s = ExecutePaymentOK2BarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2CancelOverpaymentFlag as json.
func (s ExecutePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2CancelOverpaymentFlag from json.
func (s *ExecutePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2CancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2CancelOverpaymentFlag(v) {
	case ExecutePaymentOK2CancelOverpaymentFlag0:
		*s = ExecutePaymentOK2CancelOverpaymentFlag0
	case ExecutePaymentOK2CancelOverpaymentFlag1:
		*s = ExecutePaymentOK2CancelOverpaymentFlag1
	default:
		*s = ExecutePaymentOK2CancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2KonbiniCode as json.
func (s ExecutePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2KonbiniCode from json.
func (s *ExecutePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2KonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2KonbiniCode(v) {
	case ExecutePaymentOK2KonbiniCode00010:
		*s = ExecutePaymentOK2KonbiniCode00010
	case ExecutePaymentOK2KonbiniCode00020:
		*s = ExecutePaymentOK2KonbiniCode00020
	case ExecutePaymentOK2KonbiniCode00030:
		*s = ExecutePaymentOK2KonbiniCode00030
	case ExecutePaymentOK2KonbiniCode00080:
		*s = ExecutePaymentOK2KonbiniCode00080
	case ExecutePaymentOK2KonbiniCode00760:
		*s = ExecutePaymentOK2KonbiniCode00760
	default:
		*s = ExecutePaymentOK2KonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2OverpaymentFlag as json.
func (s ExecutePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2OverpaymentFlag from json.
func (s *ExecutePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2OverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2OverpaymentFlag(v) {
	case ExecutePaymentOK2OverpaymentFlag0:
		*s = ExecutePaymentOK2OverpaymentFlag0
	case ExecutePaymentOK2OverpaymentFlag1:
		*s = ExecutePaymentOK2OverpaymentFlag1
	default:
		*s = ExecutePaymentOK2OverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2PayType as json.
func (s ExecutePaymentOK2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2PayType from json.
func (s *ExecutePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2PayType(v) {
	case ExecutePaymentOK2PayTypeCard:
		*s = ExecutePaymentOK2PayTypeCard
	case ExecutePaymentOK2PayTypeKonbini:
		*s = ExecutePaymentOK2PayTypeKonbini
	case ExecutePaymentOK2PayTypePaypay:
		*s = ExecutePaymentOK2PayTypePaypay
	case ExecutePaymentOK2PayTypeApplepay:
		*s = ExecutePaymentOK2PayTypeApplepay
	case ExecutePaymentOK2PayTypeDirectdebit:
		*s = ExecutePaymentOK2PayTypeDirectdebit
	case ExecutePaymentOK2PayTypeVirtualaccount:
		*s = ExecutePaymentOK2PayTypeVirtualaccount
	default:
		*s = ExecutePaymentOK2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2Result as json.
func (s ExecutePaymentOK2Result) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2Result from json.
func (s *ExecutePaymentOK2Result) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2Result to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2Result(v) {
	case ExecutePaymentOK2Result000:
		*s = ExecutePaymentOK2Result000
	case ExecutePaymentOK2Result001:
		*s = ExecutePaymentOK2Result001
	case ExecutePaymentOK2Result002:
		*s = ExecutePaymentOK2Result002
	case ExecutePaymentOK2Result003:
		*s = ExecutePaymentOK2Result003
	case ExecutePaymentOK2Result004:
		*s = ExecutePaymentOK2Result004
	case ExecutePaymentOK2Result005:
		*s = ExecutePaymentOK2Result005
	case ExecutePaymentOK2Result006:
		*s = ExecutePaymentOK2Result006
	case ExecutePaymentOK2Result007:
		*s = ExecutePaymentOK2Result007
	case ExecutePaymentOK2Result008:
		*s = ExecutePaymentOK2Result008
	case ExecutePaymentOK2Result009:
		*s = ExecutePaymentOK2Result009
	case ExecutePaymentOK2Result010:
		*s = ExecutePaymentOK2Result010
	case ExecutePaymentOK2Result011:
		*s = ExecutePaymentOK2Result011
	case ExecutePaymentOK2Result012:
		*s = ExecutePaymentOK2Result012
	case ExecutePaymentOK2Result013:
		*s = ExecutePaymentOK2Result013
	case ExecutePaymentOK2Result900:
		*s = ExecutePaymentOK2Result900
	default:
		*s = ExecutePaymentOK2Result(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2Status as json.
func (s ExecutePaymentOK2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK2Status from json.
func (s *ExecutePaymentOK2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK2Status(v) {
	case ExecutePaymentOK2StatusUNPROCESSED:
		*s = ExecutePaymentOK2StatusUNPROCESSED
	case ExecutePaymentOK2StatusCHECKED:
		*s = ExecutePaymentOK2StatusCHECKED
	case ExecutePaymentOK2StatusAUTHORIZED:
		*s = ExecutePaymentOK2StatusAUTHORIZED
	case ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentOK2StatusCAPTURED:
		*s = ExecutePaymentOK2StatusCAPTURED
	case ExecutePaymentOK2StatusCANCELED:
		*s = ExecutePaymentOK2StatusCANCELED
	case ExecutePaymentOK2StatusEXPIRED:
		*s = ExecutePaymentOK2StatusEXPIRED
	case ExecutePaymentOK2StatusAUTHENTICATED:
		*s = ExecutePaymentOK2StatusAUTHENTICATED
	case ExecutePaymentOK2StatusFAILED:
		*s = ExecutePaymentOK2StatusFAILED
	default:
		*s = ExecutePaymentOK2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentOK3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentOK3) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentOK3 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes ExecutePaymentOK3 from json.
func (s *ExecutePaymentOK3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentOK3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentOK3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3JobCode as json.
func (s ExecutePaymentOK3JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK3JobCode from json.
func (s *ExecutePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK3JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK3JobCode(v) {
	case ExecutePaymentOK3JobCodeAUTH:
		*s = ExecutePaymentOK3JobCodeAUTH
	case ExecutePaymentOK3JobCodeCAPTURE:
		*s = ExecutePaymentOK3JobCodeCAPTURE
	default:
		*s = ExecutePaymentOK3JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3PayType as json.
func (s ExecutePaymentOK3PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK3PayType from json.
func (s *ExecutePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK3PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK3PayType(v) {
	case ExecutePaymentOK3PayTypeCard:
		*s = ExecutePaymentOK3PayTypeCard
	case ExecutePaymentOK3PayTypeKonbini:
		*s = ExecutePaymentOK3PayTypeKonbini
	case ExecutePaymentOK3PayTypePaypay:
		*s = ExecutePaymentOK3PayTypePaypay
	case ExecutePaymentOK3PayTypeApplepay:
		*s = ExecutePaymentOK3PayTypeApplepay
	case ExecutePaymentOK3PayTypeDirectdebit:
		*s = ExecutePaymentOK3PayTypeDirectdebit
	case ExecutePaymentOK3PayTypeVirtualaccount:
		*s = ExecutePaymentOK3PayTypeVirtualaccount
	default:
		*s = ExecutePaymentOK3PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3RedirectType as json.
func (s ExecutePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK3RedirectType from json.
func (s *ExecutePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK3RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK3RedirectType(v) {
	case ExecutePaymentOK3RedirectType1:
		*s = ExecutePaymentOK3RedirectType1
	case ExecutePaymentOK3RedirectType2:
		*s = ExecutePaymentOK3RedirectType2
	default:
		*s = ExecutePaymentOK3RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3Status as json.
func (s ExecutePaymentOK3Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK3Status from json.
func (s *ExecutePaymentOK3Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK3Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK3Status(v) {
	case ExecutePaymentOK3StatusUNPROCESSED:
		*s = ExecutePaymentOK3StatusUNPROCESSED
	case ExecutePaymentOK3StatusCHECKED:
		*s = ExecutePaymentOK3StatusCHECKED
	case ExecutePaymentOK3StatusAUTHORIZED:
		*s = ExecutePaymentOK3StatusAUTHORIZED
	case ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentOK3StatusCAPTURED:
		*s = ExecutePaymentOK3StatusCAPTURED
	case ExecutePaymentOK3StatusCANCELED:
		*s = ExecutePaymentOK3StatusCANCELED
	case ExecutePaymentOK3StatusEXPIRED:
		*s = ExecutePaymentOK3StatusEXPIRED
	case ExecutePaymentOK3StatusAUTHENTICATED:
		*s = ExecutePaymentOK3StatusAUTHENTICATED
	case ExecutePaymentOK3StatusFAILED:
		*s = ExecutePaymentOK3StatusFAILED
	default:
		*s = ExecutePaymentOK3Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentOK4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentOK4) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentOK4 = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes ExecutePaymentOK4 from json.
func (s *ExecutePaymentOK4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK4 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentOK4")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentOK4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4PayType as json.
func (s ExecutePaymentOK4PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK4PayType from json.
func (s *ExecutePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK4PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK4PayType(v) {
	case ExecutePaymentOK4PayTypeCard:
		*s = ExecutePaymentOK4PayTypeCard
	case ExecutePaymentOK4PayTypeKonbini:
		*s = ExecutePaymentOK4PayTypeKonbini
	case ExecutePaymentOK4PayTypePaypay:
		*s = ExecutePaymentOK4PayTypePaypay
	case ExecutePaymentOK4PayTypeApplepay:
		*s = ExecutePaymentOK4PayTypeApplepay
	case ExecutePaymentOK4PayTypeDirectdebit:
		*s = ExecutePaymentOK4PayTypeDirectdebit
	case ExecutePaymentOK4PayTypeVirtualaccount:
		*s = ExecutePaymentOK4PayTypeVirtualaccount
	default:
		*s = ExecutePaymentOK4PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4ResultCode as json.
func (s ExecutePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK4ResultCode from json.
func (s *ExecutePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK4ResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK4ResultCode(v) {
	case ExecutePaymentOK4ResultCode0:
		*s = ExecutePaymentOK4ResultCode0
	case ExecutePaymentOK4ResultCode1:
		*s = ExecutePaymentOK4ResultCode1
	case ExecutePaymentOK4ResultCode2:
		*s = ExecutePaymentOK4ResultCode2
	case ExecutePaymentOK4ResultCode3:
		*s = ExecutePaymentOK4ResultCode3
	case ExecutePaymentOK4ResultCode4:
		*s = ExecutePaymentOK4ResultCode4
	case ExecutePaymentOK4ResultCode8:
		*s = ExecutePaymentOK4ResultCode8
	case ExecutePaymentOK4ResultCode9:
		*s = ExecutePaymentOK4ResultCode9
	case ExecutePaymentOK4ResultCodeE:
		*s = ExecutePaymentOK4ResultCodeE
	case ExecutePaymentOK4ResultCodeN:
		*s = ExecutePaymentOK4ResultCodeN
	default:
		*s = ExecutePaymentOK4ResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4Status as json.
func (s ExecutePaymentOK4Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentOK4Status from json.
func (s *ExecutePaymentOK4Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentOK4Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentOK4Status(v) {
	case ExecutePaymentOK4StatusUNPROCESSED:
		*s = ExecutePaymentOK4StatusUNPROCESSED
	case ExecutePaymentOK4StatusCHECKED:
		*s = ExecutePaymentOK4StatusCHECKED
	case ExecutePaymentOK4StatusAUTHORIZED:
		*s = ExecutePaymentOK4StatusAUTHORIZED
	case ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = ExecutePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
	case ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = ExecutePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
	case ExecutePaymentOK4StatusCAPTURED:
		*s = ExecutePaymentOK4StatusCAPTURED
	case ExecutePaymentOK4StatusCANCELED:
		*s = ExecutePaymentOK4StatusCANCELED
	case ExecutePaymentOK4StatusEXPIRED:
		*s = ExecutePaymentOK4StatusEXPIRED
	case ExecutePaymentOK4StatusAUTHENTICATED:
		*s = ExecutePaymentOK4StatusAUTHENTICATED
	case ExecutePaymentOK4StatusFAILED:
		*s = ExecutePaymentOK4StatusFAILED
	default:
		*s = ExecutePaymentOK4Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq as json.
func (s ExecutePaymentReq) Encode(e *jx.Encoder) {
	switch s.Type {
	case ExecutePaymentReq0ExecutePaymentReq:
		s.ExecutePaymentReq0.Encode(e)
	case ExecutePaymentReq1ExecutePaymentReq:
		s.ExecutePaymentReq1.Encode(e)
	case ExecutePaymentReq2ExecutePaymentReq:
		s.ExecutePaymentReq2.Encode(e)
	case ExecutePaymentReq3ExecutePaymentReq:
		s.ExecutePaymentReq3.Encode(e)
	case ExecutePaymentReq4ExecutePaymentReq:
		s.ExecutePaymentReq4.Encode(e)
	}
}

func (s ExecutePaymentReq) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case ExecutePaymentReq0ExecutePaymentReq:
		s.ExecutePaymentReq0.encodeFields(e)
	case ExecutePaymentReq1ExecutePaymentReq:
		s.ExecutePaymentReq1.encodeFields(e)
	case ExecutePaymentReq2ExecutePaymentReq:
		s.ExecutePaymentReq2.encodeFields(e)
	case ExecutePaymentReq3ExecutePaymentReq:
		s.ExecutePaymentReq3.encodeFields(e)
	case ExecutePaymentReq4ExecutePaymentReq:
		s.ExecutePaymentReq4.encodeFields(e)
	}
}

// Decode decodes ExecutePaymentReq from json.
func (s *ExecutePaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "method":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pay_times":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_change":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_date":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ch_acc_pw_change":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_nb_purchase_account":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_payment_acc_age":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_provision_attempts_day":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_address_usage":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_name_ind":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_suspicious_acc_activity":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_txn_activity_day":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_txn_activity_year":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_three_ds_req_auth_data":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_three_ds_req_auth_method":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_addr_match":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_country":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_state":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_city":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_1":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_2":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_line_3":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_bill_addr_post_code":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_country":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_state":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_city":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_1":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_2":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_line_3":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_addr_post_code":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ship_ind":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_delivery_email_address":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_home_phone_cc":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_home_phone_no":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_mobile_phone_cc":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_mobile_phone_no":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_work_phone_cc":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_work_phone_no":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_delivery_timeframe":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_pre_order_date":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_pre_order_purchase_ind":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_reorder_items_ind":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_recurring_expiry":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_recurring_frequency":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_amount":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_count":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_gift_card_curr":
				match := ExecutePaymentReq0ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "pixel_ratio":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_size_type":
				match := ExecutePaymentReq2ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := ExecutePaymentReq3ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := ExecutePaymentReq3ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "user_agent":
				match := ExecutePaymentReq3ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := ExecutePaymentReq4ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := ExecutePaymentReq4ExecutePaymentReq
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		s.Type = ExecutePaymentReq1ExecutePaymentReq
	}
	switch s.Type {
	case ExecutePaymentReq0ExecutePaymentReq:
		if err := s.ExecutePaymentReq0.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentReq1ExecutePaymentReq:
		if err := s.ExecutePaymentReq1.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentReq2ExecutePaymentReq:
		if err := s.ExecutePaymentReq2.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentReq3ExecutePaymentReq:
		if err := s.ExecutePaymentReq3.Decode(d); err != nil {
			return err
		}
	case ExecutePaymentReq4ExecutePaymentReq:
		if err := s.ExecutePaymentReq4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentReq0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentReq0) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		if s.Token.Set {
			e.FieldStart("token")
			s.Token.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange.Set {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate.Set {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange.Set {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount.Set {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge.Set {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay.Set {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage.Set {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd.Set {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity.Set {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay.Set {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear.Set {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData.Set {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod.Set {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch.Set {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry.Set {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState.Set {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity.Set {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1.Set {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2.Set {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode.Set {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry.Set {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState.Set {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity.Set {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1.Set {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2.Set {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3.Set {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode.Set {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd.Set {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress.Set {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc.Set {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo.Set {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc.Set {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo.Set {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc.Set {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo.Set {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe.Set {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate.Set {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd.Set {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd.Set {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry.Set {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency.Set {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount.Set {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount.Set {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr.Set {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentReq0 = [53]string{
	0:  "pay_type",
	1:  "access_id",
	2:  "token",
	3:  "customer_id",
	4:  "card_id",
	5:  "method",
	6:  "pay_times",
	7:  "tds2_ret_url",
	8:  "tds2_ch_acc_change",
	9:  "tds2_ch_acc_date",
	10: "tds2_ch_acc_pw_change",
	11: "tds2_nb_purchase_account",
	12: "tds2_payment_acc_age",
	13: "tds2_provision_attempts_day",
	14: "tds2_ship_address_usage",
	15: "tds2_ship_name_ind",
	16: "tds2_suspicious_acc_activity",
	17: "tds2_txn_activity_day",
	18: "tds2_txn_activity_year",
	19: "tds2_three_ds_req_auth_data",
	20: "tds2_three_ds_req_auth_method",
	21: "tds2_addr_match",
	22: "tds2_bill_addr_country",
	23: "tds2_bill_addr_state",
	24: "tds2_bill_addr_city",
	25: "tds2_bill_addr_line_1",
	26: "tds2_bill_addr_line_2",
	27: "tds2_bill_addr_line_3",
	28: "tds2_bill_addr_post_code",
	29: "tds2_ship_addr_country",
	30: "tds2_ship_addr_state",
	31: "tds2_ship_addr_city",
	32: "tds2_ship_addr_line_1",
	33: "tds2_ship_addr_line_2",
	34: "tds2_ship_addr_line_3",
	35: "tds2_ship_addr_post_code",
	36: "tds2_ship_ind",
	37: "tds2_delivery_email_address",
	38: "tds2_home_phone_cc",
	39: "tds2_home_phone_no",
	40: "tds2_mobile_phone_cc",
	41: "tds2_mobile_phone_no",
	42: "tds2_work_phone_cc",
	43: "tds2_work_phone_no",
	44: "tds2_delivery_timeframe",
	45: "tds2_pre_order_date",
	46: "tds2_pre_order_purchase_ind",
	47: "tds2_reorder_items_ind",
	48: "tds2_recurring_expiry",
	49: "tds2_recurring_frequency",
	50: "tds2_gift_card_amount",
	51: "tds2_gift_card_count",
	52: "tds2_gift_card_curr",
}

// Decode decodes ExecutePaymentReq0 from json.
func (s *ExecutePaymentReq0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0 to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "token":
			if err := func() error {
				s.Token.Reset()
				if err := s.Token.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange.Reset()
				if err := s.Tds2ChAccChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate.Reset()
				if err := s.Tds2ChAccDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange.Reset()
				if err := s.Tds2ChAccPwChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount.Reset()
				if err := s.Tds2NbPurchaseAccount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge.Reset()
				if err := s.Tds2PaymentAccAge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay.Reset()
				if err := s.Tds2ProvisionAttemptsDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage.Reset()
				if err := s.Tds2ShipAddressUsage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd.Reset()
				if err := s.Tds2ShipNameInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity.Reset()
				if err := s.Tds2SuspiciousAccActivity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay.Reset()
				if err := s.Tds2TxnActivityDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear.Reset()
				if err := s.Tds2TxnActivityYear.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData.Reset()
				if err := s.Tds2ThreeDsReqAuthData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod.Reset()
				if err := s.Tds2ThreeDsReqAuthMethod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch.Reset()
				if err := s.Tds2AddrMatch.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry.Reset()
				if err := s.Tds2BillAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState.Reset()
				if err := s.Tds2BillAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity.Reset()
				if err := s.Tds2BillAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1.Reset()
				if err := s.Tds2BillAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2.Reset()
				if err := s.Tds2BillAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode.Reset()
				if err := s.Tds2BillAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry.Reset()
				if err := s.Tds2ShipAddrCountry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState.Reset()
				if err := s.Tds2ShipAddrState.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity.Reset()
				if err := s.Tds2ShipAddrCity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1.Reset()
				if err := s.Tds2ShipAddrLine1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2.Reset()
				if err := s.Tds2ShipAddrLine2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3.Reset()
				if err := s.Tds2ShipAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode.Reset()
				if err := s.Tds2ShipAddrPostCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd.Reset()
				if err := s.Tds2ShipInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress.Reset()
				if err := s.Tds2DeliveryEmailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc.Reset()
				if err := s.Tds2HomePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo.Reset()
				if err := s.Tds2HomePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc.Reset()
				if err := s.Tds2MobilePhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo.Reset()
				if err := s.Tds2MobilePhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc.Reset()
				if err := s.Tds2WorkPhoneCc.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo.Reset()
				if err := s.Tds2WorkPhoneNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe.Reset()
				if err := s.Tds2DeliveryTimeframe.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate.Reset()
				if err := s.Tds2PreOrderDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd.Reset()
				if err := s.Tds2PreOrderPurchaseInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd.Reset()
				if err := s.Tds2ReorderItemsInd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry.Reset()
				if err := s.Tds2RecurringExpiry.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency.Reset()
				if err := s.Tds2RecurringFrequency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount.Reset()
				if err := s.Tds2GiftCardAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount.Reset()
				if err := s.Tds2GiftCardCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr.Reset()
				if err := s.Tds2GiftCardCurr.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentReq0")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000011,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExecutePaymentReq0) {
					name = jsonFieldsNameOfExecutePaymentReq0[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentReq0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Method as json.
func (s ExecutePaymentReq0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Method from json.
func (s *ExecutePaymentReq0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Method(v) {
	case ExecutePaymentReq0Method1:
		*s = ExecutePaymentReq0Method1
	case ExecutePaymentReq0Method2:
		*s = ExecutePaymentReq0Method2
	case ExecutePaymentReq0Method5:
		*s = ExecutePaymentReq0Method5
	default:
		*s = ExecutePaymentReq0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0PayTimes as json.
func (s ExecutePaymentReq0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0PayTimes from json.
func (s *ExecutePaymentReq0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0PayTimes(v) {
	case ExecutePaymentReq0PayTimes3:
		*s = ExecutePaymentReq0PayTimes3
	case ExecutePaymentReq0PayTimes5:
		*s = ExecutePaymentReq0PayTimes5
	case ExecutePaymentReq0PayTimes6:
		*s = ExecutePaymentReq0PayTimes6
	case ExecutePaymentReq0PayTimes10:
		*s = ExecutePaymentReq0PayTimes10
	case ExecutePaymentReq0PayTimes12:
		*s = ExecutePaymentReq0PayTimes12
	case ExecutePaymentReq0PayTimes15:
		*s = ExecutePaymentReq0PayTimes15
	case ExecutePaymentReq0PayTimes18:
		*s = ExecutePaymentReq0PayTimes18
	case ExecutePaymentReq0PayTimes20:
		*s = ExecutePaymentReq0PayTimes20
	case ExecutePaymentReq0PayTimes24:
		*s = ExecutePaymentReq0PayTimes24
	default:
		*s = ExecutePaymentReq0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0PayType as json.
func (s ExecutePaymentReq0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0PayType from json.
func (s *ExecutePaymentReq0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0PayType(v) {
	case ExecutePaymentReq0PayTypeCard:
		*s = ExecutePaymentReq0PayTypeCard
	case ExecutePaymentReq0PayTypeKonbini:
		*s = ExecutePaymentReq0PayTypeKonbini
	case ExecutePaymentReq0PayTypePaypay:
		*s = ExecutePaymentReq0PayTypePaypay
	case ExecutePaymentReq0PayTypeApplepay:
		*s = ExecutePaymentReq0PayTypeApplepay
	case ExecutePaymentReq0PayTypeDirectdebit:
		*s = ExecutePaymentReq0PayTypeDirectdebit
	case ExecutePaymentReq0PayTypeVirtualaccount:
		*s = ExecutePaymentReq0PayTypeVirtualaccount
	default:
		*s = ExecutePaymentReq0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2AddrMatch as json.
func (s ExecutePaymentReq0Tds2AddrMatch) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2AddrMatch from json.
func (s *ExecutePaymentReq0Tds2AddrMatch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2AddrMatch to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2AddrMatch(v) {
	case ExecutePaymentReq0Tds2AddrMatchY:
		*s = ExecutePaymentReq0Tds2AddrMatchY
	case ExecutePaymentReq0Tds2AddrMatchN:
		*s = ExecutePaymentReq0Tds2AddrMatchN
	default:
		*s = ExecutePaymentReq0Tds2AddrMatch(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2DeliveryTimeframe as json.
func (s ExecutePaymentReq0Tds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2DeliveryTimeframe from json.
func (s *ExecutePaymentReq0Tds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2DeliveryTimeframe to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2DeliveryTimeframe(v) {
	case ExecutePaymentReq0Tds2DeliveryTimeframe01:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe01
	case ExecutePaymentReq0Tds2DeliveryTimeframe02:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe02
	case ExecutePaymentReq0Tds2DeliveryTimeframe03:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe03
	case ExecutePaymentReq0Tds2DeliveryTimeframe04:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe04
	default:
		*s = ExecutePaymentReq0Tds2DeliveryTimeframe(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2PreOrderPurchaseInd as json.
func (s ExecutePaymentReq0Tds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2PreOrderPurchaseInd from json.
func (s *ExecutePaymentReq0Tds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2PreOrderPurchaseInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2PreOrderPurchaseInd(v) {
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd01:
		*s = ExecutePaymentReq0Tds2PreOrderPurchaseInd01
	case ExecutePaymentReq0Tds2PreOrderPurchaseInd02:
		*s = ExecutePaymentReq0Tds2PreOrderPurchaseInd02
	default:
		*s = ExecutePaymentReq0Tds2PreOrderPurchaseInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ReorderItemsInd as json.
func (s ExecutePaymentReq0Tds2ReorderItemsInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2ReorderItemsInd from json.
func (s *ExecutePaymentReq0Tds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2ReorderItemsInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2ReorderItemsInd(v) {
	case ExecutePaymentReq0Tds2ReorderItemsInd01:
		*s = ExecutePaymentReq0Tds2ReorderItemsInd01
	case ExecutePaymentReq0Tds2ReorderItemsInd02:
		*s = ExecutePaymentReq0Tds2ReorderItemsInd02
	default:
		*s = ExecutePaymentReq0Tds2ReorderItemsInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ShipInd as json.
func (s ExecutePaymentReq0Tds2ShipInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2ShipInd from json.
func (s *ExecutePaymentReq0Tds2ShipInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2ShipInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2ShipInd(v) {
	case ExecutePaymentReq0Tds2ShipInd01:
		*s = ExecutePaymentReq0Tds2ShipInd01
	case ExecutePaymentReq0Tds2ShipInd02:
		*s = ExecutePaymentReq0Tds2ShipInd02
	case ExecutePaymentReq0Tds2ShipInd03:
		*s = ExecutePaymentReq0Tds2ShipInd03
	case ExecutePaymentReq0Tds2ShipInd04:
		*s = ExecutePaymentReq0Tds2ShipInd04
	case ExecutePaymentReq0Tds2ShipInd05:
		*s = ExecutePaymentReq0Tds2ShipInd05
	case ExecutePaymentReq0Tds2ShipInd06:
		*s = ExecutePaymentReq0Tds2ShipInd06
	case ExecutePaymentReq0Tds2ShipInd07:
		*s = ExecutePaymentReq0Tds2ShipInd07
	default:
		*s = ExecutePaymentReq0Tds2ShipInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ShipNameInd as json.
func (s ExecutePaymentReq0Tds2ShipNameInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2ShipNameInd from json.
func (s *ExecutePaymentReq0Tds2ShipNameInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2ShipNameInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2ShipNameInd(v) {
	case ExecutePaymentReq0Tds2ShipNameInd01:
		*s = ExecutePaymentReq0Tds2ShipNameInd01
	case ExecutePaymentReq0Tds2ShipNameInd02:
		*s = ExecutePaymentReq0Tds2ShipNameInd02
	default:
		*s = ExecutePaymentReq0Tds2ShipNameInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2SuspiciousAccActivity as json.
func (s ExecutePaymentReq0Tds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2SuspiciousAccActivity from json.
func (s *ExecutePaymentReq0Tds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2SuspiciousAccActivity to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2SuspiciousAccActivity(v) {
	case ExecutePaymentReq0Tds2SuspiciousAccActivity01:
		*s = ExecutePaymentReq0Tds2SuspiciousAccActivity01
	case ExecutePaymentReq0Tds2SuspiciousAccActivity02:
		*s = ExecutePaymentReq0Tds2SuspiciousAccActivity02
	default:
		*s = ExecutePaymentReq0Tds2SuspiciousAccActivity(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ThreeDsReqAuthMethod as json.
func (s ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq0Tds2ThreeDsReqAuthMethod from json.
func (s *ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq0Tds2ThreeDsReqAuthMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq0Tds2ThreeDsReqAuthMethod(v) {
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod01
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod02
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod03
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod04
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod05
	case ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod06
	default:
		*s = ExecutePaymentReq0Tds2ThreeDsReqAuthMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentReq1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentReq1) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("token")
		e.Str(s.Token)
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentReq1 = [4]string{
	0: "pay_type",
	1: "access_id",
	2: "token",
	3: "customer_id",
}

// Decode decodes ExecutePaymentReq1 from json.
func (s *ExecutePaymentReq1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq1 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "token":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Token = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"token\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentReq1")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExecutePaymentReq1) {
					name = jsonFieldsNameOfExecutePaymentReq1[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentReq1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq1PayType as json.
func (s ExecutePaymentReq1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq1PayType from json.
func (s *ExecutePaymentReq1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq1PayType(v) {
	case ExecutePaymentReq1PayTypeCard:
		*s = ExecutePaymentReq1PayTypeCard
	case ExecutePaymentReq1PayTypeKonbini:
		*s = ExecutePaymentReq1PayTypeKonbini
	case ExecutePaymentReq1PayTypePaypay:
		*s = ExecutePaymentReq1PayTypePaypay
	case ExecutePaymentReq1PayTypeApplepay:
		*s = ExecutePaymentReq1PayTypeApplepay
	case ExecutePaymentReq1PayTypeDirectdebit:
		*s = ExecutePaymentReq1PayTypeDirectdebit
	case ExecutePaymentReq1PayTypeVirtualaccount:
		*s = ExecutePaymentReq1PayTypeVirtualaccount
	default:
		*s = ExecutePaymentReq1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentReq2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentReq2) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentTermDay != nil {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		e.FieldStart("device_name")
		e.Str(s.DeviceName)
	}
	{
		e.FieldStart("win_width")
		e.Str(s.WinWidth)
	}
	{
		e.FieldStart("win_height")
		e.Str(s.WinHeight)
	}
	{
		e.FieldStart("pixel_ratio")
		e.Str(s.PixelRatio)
	}
	{
		e.FieldStart("win_size_type")
		s.WinSizeType.Encode(e)
	}
}

var jsonFieldsNameOfExecutePaymentReq2 = [9]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "payment_term_day",
	4: "device_name",
	5: "win_width",
	6: "win_height",
	7: "pixel_ratio",
	8: "win_size_type",
}

// Decode decodes ExecutePaymentReq2 from json.
func (s *ExecutePaymentReq2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq2 to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentTermDay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "device_name":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.DeviceName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "win_width":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.WinWidth = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.WinHeight = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "pixel_ratio":
			requiredBitSet[0] |= 1 << 7
			if err := func() error {
				v, err := d.Str()
				s.PixelRatio = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pixel_ratio\"")
			}
		case "win_size_type":
			requiredBitSet[1] |= 1 << 0
			if err := func() error {
				if err := s.WinSizeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_size_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentReq2")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b11110011,
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExecutePaymentReq2) {
					name = jsonFieldsNameOfExecutePaymentReq2[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentReq2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq2PayType as json.
func (s ExecutePaymentReq2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq2PayType from json.
func (s *ExecutePaymentReq2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq2PayType(v) {
	case ExecutePaymentReq2PayTypeCard:
		*s = ExecutePaymentReq2PayTypeCard
	case ExecutePaymentReq2PayTypeKonbini:
		*s = ExecutePaymentReq2PayTypeKonbini
	case ExecutePaymentReq2PayTypePaypay:
		*s = ExecutePaymentReq2PayTypePaypay
	case ExecutePaymentReq2PayTypeApplepay:
		*s = ExecutePaymentReq2PayTypeApplepay
	case ExecutePaymentReq2PayTypeDirectdebit:
		*s = ExecutePaymentReq2PayTypeDirectdebit
	case ExecutePaymentReq2PayTypeVirtualaccount:
		*s = ExecutePaymentReq2PayTypeVirtualaccount
	default:
		*s = ExecutePaymentReq2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq2WinSizeType as json.
func (s ExecutePaymentReq2WinSizeType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq2WinSizeType from json.
func (s *ExecutePaymentReq2WinSizeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq2WinSizeType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq2WinSizeType(v) {
	case ExecutePaymentReq2WinSizeType1:
		*s = ExecutePaymentReq2WinSizeType1
	case ExecutePaymentReq2WinSizeType2:
		*s = ExecutePaymentReq2WinSizeType2
	default:
		*s = ExecutePaymentReq2WinSizeType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq2WinSizeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq2WinSizeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentReq3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentReq3) encodeFields(e *jx.Encoder) {
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.RedirectURL != nil {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType != nil {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.UserAgent.Set {
			e.FieldStart("user_agent")
			s.UserAgent.Encode(e)
		}
	}
}

var jsonFieldsNameOfExecutePaymentReq3 = [6]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "redirect_url",
	4: "redirect_type",
	5: "user_agent",
}

// Decode decodes ExecutePaymentReq3 from json.
func (s *ExecutePaymentReq3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RedirectURL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType = nil
				var elem NilExecutePaymentReq3RedirectType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.RedirectType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "user_agent":
			if err := func() error {
				s.UserAgent.Reset()
				if err := s.UserAgent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_agent\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentReq3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentReq3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq3PayType as json.
func (s ExecutePaymentReq3PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq3PayType from json.
func (s *ExecutePaymentReq3PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq3PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq3PayType(v) {
	case ExecutePaymentReq3PayTypeCard:
		*s = ExecutePaymentReq3PayTypeCard
	case ExecutePaymentReq3PayTypeKonbini:
		*s = ExecutePaymentReq3PayTypeKonbini
	case ExecutePaymentReq3PayTypePaypay:
		*s = ExecutePaymentReq3PayTypePaypay
	case ExecutePaymentReq3PayTypeApplepay:
		*s = ExecutePaymentReq3PayTypeApplepay
	case ExecutePaymentReq3PayTypeDirectdebit:
		*s = ExecutePaymentReq3PayTypeDirectdebit
	case ExecutePaymentReq3PayTypeVirtualaccount:
		*s = ExecutePaymentReq3PayTypeVirtualaccount
	default:
		*s = ExecutePaymentReq3PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq3RedirectType as json.
func (s ExecutePaymentReq3RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq3RedirectType from json.
func (s *ExecutePaymentReq3RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq3RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq3RedirectType(v) {
	case ExecutePaymentReq3RedirectType1:
		*s = ExecutePaymentReq3RedirectType1
	case ExecutePaymentReq3RedirectType2:
		*s = ExecutePaymentReq3RedirectType2
	default:
		*s = ExecutePaymentReq3RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ExecutePaymentReq4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ExecutePaymentReq4) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("customer_id")
		e.Str(s.CustomerID)
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		e.FieldStart("target_date")
		s.TargetDate.Encode(e)
	}
}

var jsonFieldsNameOfExecutePaymentReq4 = [5]string{
	0: "pay_type",
	1: "access_id",
	2: "customer_id",
	3: "payment_method_id",
	4: "target_date",
}

// Decode decodes ExecutePaymentReq4 from json.
func (s *ExecutePaymentReq4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq4 to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "customer_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.CustomerID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "target_date":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ExecutePaymentReq4")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00010111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfExecutePaymentReq4) {
					name = jsonFieldsNameOfExecutePaymentReq4[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ExecutePaymentReq4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq4PayType as json.
func (s ExecutePaymentReq4PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ExecutePaymentReq4PayType from json.
func (s *ExecutePaymentReq4PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ExecutePaymentReq4PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ExecutePaymentReq4PayType(v) {
	case ExecutePaymentReq4PayTypeCard:
		*s = ExecutePaymentReq4PayTypeCard
	case ExecutePaymentReq4PayTypeKonbini:
		*s = ExecutePaymentReq4PayTypeKonbini
	case ExecutePaymentReq4PayTypePaypay:
		*s = ExecutePaymentReq4PayTypePaypay
	case ExecutePaymentReq4PayTypeApplepay:
		*s = ExecutePaymentReq4PayTypeApplepay
	case ExecutePaymentReq4PayTypeDirectdebit:
		*s = ExecutePaymentReq4PayTypeDirectdebit
	case ExecutePaymentReq4PayTypeVirtualaccount:
		*s = ExecutePaymentReq4PayTypeVirtualaccount
	default:
		*s = ExecutePaymentReq4PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ExecutePaymentReq4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ExecutePaymentReq4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FincodeAPIError) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FincodeAPIError) encodeFields(e *jx.Encoder) {
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ErrorMessage.Set {
			e.FieldStart("error_message")
			s.ErrorMessage.Encode(e)
		}
	}
}

var jsonFieldsNameOfFincodeAPIError = [2]string{
	0: "error_code",
	1: "error_message",
}

// Decode decodes FincodeAPIError from json.
func (s *FincodeAPIError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FincodeAPIError to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_message\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FincodeAPIError")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FincodeAPIError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FincodeAPIError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FincodeAPIErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FincodeAPIErrorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfFincodeAPIErrorResponse = [1]string{
	0: "errors",
}

// Decode decodes FincodeAPIErrorResponse from json.
func (s *FincodeAPIErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FincodeAPIErrorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "errors":
			if err := func() error {
				s.Errors = make([]FincodeAPIError, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem FincodeAPIError
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FincodeAPIErrorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FincodeAPIErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FincodeAPIErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenerateBarcodeOfPaymentOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenerateBarcodeOfPaymentOK) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfGenerateBarcodeOfPaymentOK = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes GenerateBarcodeOfPaymentOK from json.
func (s *GenerateBarcodeOfPaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOK to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenerateBarcodeOfPaymentOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenerateBarcodeOfPaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKBarcodeFormat as json.
func (s GenerateBarcodeOfPaymentOKBarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKBarcodeFormat from json.
func (s *GenerateBarcodeOfPaymentOKBarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKBarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKBarcodeFormat(v) {
	case GenerateBarcodeOfPaymentOKBarcodeFormatJPG:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatJPG
	case GenerateBarcodeOfPaymentOKBarcodeFormatPNG:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatPNG
	case GenerateBarcodeOfPaymentOKBarcodeFormatBmp:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormatBmp
	default:
		*s = GenerateBarcodeOfPaymentOKBarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKCancelOverpaymentFlag as json.
func (s GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKCancelOverpaymentFlag from json.
func (s *GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKCancelOverpaymentFlag(v) {
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0:
		*s = GenerateBarcodeOfPaymentOKCancelOverpaymentFlag0
	case GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1:
		*s = GenerateBarcodeOfPaymentOKCancelOverpaymentFlag1
	default:
		*s = GenerateBarcodeOfPaymentOKCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKKonbiniCode as json.
func (s GenerateBarcodeOfPaymentOKKonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKKonbiniCode from json.
func (s *GenerateBarcodeOfPaymentOKKonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKKonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKKonbiniCode(v) {
	case GenerateBarcodeOfPaymentOKKonbiniCode00010:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00010
	case GenerateBarcodeOfPaymentOKKonbiniCode00020:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00020
	case GenerateBarcodeOfPaymentOKKonbiniCode00030:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00030
	case GenerateBarcodeOfPaymentOKKonbiniCode00080:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00080
	case GenerateBarcodeOfPaymentOKKonbiniCode00760:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode00760
	default:
		*s = GenerateBarcodeOfPaymentOKKonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKKonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKKonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKOverpaymentFlag as json.
func (s GenerateBarcodeOfPaymentOKOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKOverpaymentFlag from json.
func (s *GenerateBarcodeOfPaymentOKOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKOverpaymentFlag(v) {
	case GenerateBarcodeOfPaymentOKOverpaymentFlag0:
		*s = GenerateBarcodeOfPaymentOKOverpaymentFlag0
	case GenerateBarcodeOfPaymentOKOverpaymentFlag1:
		*s = GenerateBarcodeOfPaymentOKOverpaymentFlag1
	default:
		*s = GenerateBarcodeOfPaymentOKOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKPayType as json.
func (s GenerateBarcodeOfPaymentOKPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKPayType from json.
func (s *GenerateBarcodeOfPaymentOKPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKPayType(v) {
	case GenerateBarcodeOfPaymentOKPayTypeCard:
		*s = GenerateBarcodeOfPaymentOKPayTypeCard
	case GenerateBarcodeOfPaymentOKPayTypeKonbini:
		*s = GenerateBarcodeOfPaymentOKPayTypeKonbini
	case GenerateBarcodeOfPaymentOKPayTypePaypay:
		*s = GenerateBarcodeOfPaymentOKPayTypePaypay
	case GenerateBarcodeOfPaymentOKPayTypeApplepay:
		*s = GenerateBarcodeOfPaymentOKPayTypeApplepay
	case GenerateBarcodeOfPaymentOKPayTypeDirectdebit:
		*s = GenerateBarcodeOfPaymentOKPayTypeDirectdebit
	case GenerateBarcodeOfPaymentOKPayTypeVirtualaccount:
		*s = GenerateBarcodeOfPaymentOKPayTypeVirtualaccount
	default:
		*s = GenerateBarcodeOfPaymentOKPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKResult as json.
func (s GenerateBarcodeOfPaymentOKResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKResult from json.
func (s *GenerateBarcodeOfPaymentOKResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKResult(v) {
	case GenerateBarcodeOfPaymentOKResult000:
		*s = GenerateBarcodeOfPaymentOKResult000
	case GenerateBarcodeOfPaymentOKResult001:
		*s = GenerateBarcodeOfPaymentOKResult001
	case GenerateBarcodeOfPaymentOKResult002:
		*s = GenerateBarcodeOfPaymentOKResult002
	case GenerateBarcodeOfPaymentOKResult003:
		*s = GenerateBarcodeOfPaymentOKResult003
	case GenerateBarcodeOfPaymentOKResult004:
		*s = GenerateBarcodeOfPaymentOKResult004
	case GenerateBarcodeOfPaymentOKResult005:
		*s = GenerateBarcodeOfPaymentOKResult005
	case GenerateBarcodeOfPaymentOKResult006:
		*s = GenerateBarcodeOfPaymentOKResult006
	case GenerateBarcodeOfPaymentOKResult007:
		*s = GenerateBarcodeOfPaymentOKResult007
	case GenerateBarcodeOfPaymentOKResult008:
		*s = GenerateBarcodeOfPaymentOKResult008
	case GenerateBarcodeOfPaymentOKResult009:
		*s = GenerateBarcodeOfPaymentOKResult009
	case GenerateBarcodeOfPaymentOKResult010:
		*s = GenerateBarcodeOfPaymentOKResult010
	case GenerateBarcodeOfPaymentOKResult011:
		*s = GenerateBarcodeOfPaymentOKResult011
	case GenerateBarcodeOfPaymentOKResult012:
		*s = GenerateBarcodeOfPaymentOKResult012
	case GenerateBarcodeOfPaymentOKResult013:
		*s = GenerateBarcodeOfPaymentOKResult013
	case GenerateBarcodeOfPaymentOKResult900:
		*s = GenerateBarcodeOfPaymentOKResult900
	default:
		*s = GenerateBarcodeOfPaymentOKResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKStatus as json.
func (s GenerateBarcodeOfPaymentOKStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentOKStatus from json.
func (s *GenerateBarcodeOfPaymentOKStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentOKStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentOKStatus(v) {
	case GenerateBarcodeOfPaymentOKStatusUNPROCESSED:
		*s = GenerateBarcodeOfPaymentOKStatusUNPROCESSED
	case GenerateBarcodeOfPaymentOKStatusCHECKED:
		*s = GenerateBarcodeOfPaymentOKStatusCHECKED
	case GenerateBarcodeOfPaymentOKStatusAUTHORIZED:
		*s = GenerateBarcodeOfPaymentOKStatusAUTHORIZED
	case GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT:
		*s = GenerateBarcodeOfPaymentOKStatusAWAITINGCUSTOMERPAYMENT
	case GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL:
		*s = GenerateBarcodeOfPaymentOKStatusAWAITINGPAYMENTAPPROVAL
	case GenerateBarcodeOfPaymentOKStatusCAPTURED:
		*s = GenerateBarcodeOfPaymentOKStatusCAPTURED
	case GenerateBarcodeOfPaymentOKStatusCANCELED:
		*s = GenerateBarcodeOfPaymentOKStatusCANCELED
	case GenerateBarcodeOfPaymentOKStatusEXPIRED:
		*s = GenerateBarcodeOfPaymentOKStatusEXPIRED
	case GenerateBarcodeOfPaymentOKStatusAUTHENTICATED:
		*s = GenerateBarcodeOfPaymentOKStatusAUTHENTICATED
	case GenerateBarcodeOfPaymentOKStatusFAILED:
		*s = GenerateBarcodeOfPaymentOKStatusFAILED
	default:
		*s = GenerateBarcodeOfPaymentOKStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GenerateBarcodeOfPaymentReq) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GenerateBarcodeOfPaymentReq) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("access_id")
		e.Str(s.AccessID)
	}
	{
		e.FieldStart("device_name")
		e.Str(s.DeviceName)
	}
	{
		e.FieldStart("win_width")
		e.Str(s.WinWidth)
	}
	{
		e.FieldStart("win_height")
		e.Str(s.WinHeight)
	}
	{
		e.FieldStart("pixel_ratio")
		e.Str(s.PixelRatio)
	}
	{
		e.FieldStart("win_size_type")
		s.WinSizeType.Encode(e)
	}
}

var jsonFieldsNameOfGenerateBarcodeOfPaymentReq = [7]string{
	0: "pay_type",
	1: "access_id",
	2: "device_name",
	3: "win_width",
	4: "win_height",
	5: "pixel_ratio",
	6: "win_size_type",
}

// Decode decodes GenerateBarcodeOfPaymentReq from json.
func (s *GenerateBarcodeOfPaymentReq) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentReq to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "access_id":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.AccessID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "device_name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.DeviceName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "win_width":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.WinWidth = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			requiredBitSet[0] |= 1 << 4
			if err := func() error {
				v, err := d.Str()
				s.WinHeight = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "pixel_ratio":
			requiredBitSet[0] |= 1 << 5
			if err := func() error {
				v, err := d.Str()
				s.PixelRatio = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pixel_ratio\"")
			}
		case "win_size_type":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				if err := s.WinSizeType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_size_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GenerateBarcodeOfPaymentReq")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b01111111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfGenerateBarcodeOfPaymentReq) {
					name = jsonFieldsNameOfGenerateBarcodeOfPaymentReq[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GenerateBarcodeOfPaymentReq) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentReq) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentReqPayType as json.
func (s GenerateBarcodeOfPaymentReqPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentReqPayType from json.
func (s *GenerateBarcodeOfPaymentReqPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentReqPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentReqPayType(v) {
	case GenerateBarcodeOfPaymentReqPayTypeCard:
		*s = GenerateBarcodeOfPaymentReqPayTypeCard
	case GenerateBarcodeOfPaymentReqPayTypeKonbini:
		*s = GenerateBarcodeOfPaymentReqPayTypeKonbini
	case GenerateBarcodeOfPaymentReqPayTypePaypay:
		*s = GenerateBarcodeOfPaymentReqPayTypePaypay
	case GenerateBarcodeOfPaymentReqPayTypeApplepay:
		*s = GenerateBarcodeOfPaymentReqPayTypeApplepay
	case GenerateBarcodeOfPaymentReqPayTypeDirectdebit:
		*s = GenerateBarcodeOfPaymentReqPayTypeDirectdebit
	case GenerateBarcodeOfPaymentReqPayTypeVirtualaccount:
		*s = GenerateBarcodeOfPaymentReqPayTypeVirtualaccount
	default:
		*s = GenerateBarcodeOfPaymentReqPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentReqPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentReqPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentReqWinSizeType as json.
func (s GenerateBarcodeOfPaymentReqWinSizeType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes GenerateBarcodeOfPaymentReqWinSizeType from json.
func (s *GenerateBarcodeOfPaymentReqWinSizeType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GenerateBarcodeOfPaymentReqWinSizeType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch GenerateBarcodeOfPaymentReqWinSizeType(v) {
	case GenerateBarcodeOfPaymentReqWinSizeType1:
		*s = GenerateBarcodeOfPaymentReqWinSizeType1
	case GenerateBarcodeOfPaymentReqWinSizeType2:
		*s = GenerateBarcodeOfPaymentReqWinSizeType2
	default:
		*s = GenerateBarcodeOfPaymentReqWinSizeType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s GenerateBarcodeOfPaymentReqWinSizeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GenerateBarcodeOfPaymentReqWinSizeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTds2Type as json.
func (o NilAuthorizePaymentOKTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKTds2Type from json.
func (o *NilAuthorizePaymentOKTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilAuthorizePaymentOKTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentOKTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilAuthorizePaymentOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilAuthorizePaymentOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTdsType as json.
func (o NilAuthorizePaymentOKTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKTdsType from json.
func (o *NilAuthorizePaymentOKTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilAuthorizePaymentOKTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentOKTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilAuthorizePaymentOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilAuthorizePaymentOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o NilBool) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *NilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Tds2Type as json.
func (o NilCapturePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0Tds2Type from json.
func (o *NilCapturePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCapturePaymentOK0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCapturePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCapturePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0TdsType as json.
func (o NilCapturePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0TdsType from json.
func (o *NilCapturePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCapturePaymentOK0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCapturePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCapturePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2AddrMatch as json.
func (o NilCardRegistrationSessionCreatingRequestTds2AddrMatch) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2AddrMatch from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2AddrMatch to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2AddrMatch
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe as json.
func (o NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd as json.
func (o NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ReorderItemsInd as json.
func (o NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ReorderItemsInd from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2ReorderItemsInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ShipInd as json.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ShipInd from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2ShipInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2ShipInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ShipNameInd as json.
func (o NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ShipNameInd from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2ShipNameInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2ShipNameInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity as json.
func (o NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod as json.
func (o NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTds2Type as json.
func (o NilCardRegistrationSessionCreatingRequestTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTds2Type from json.
func (o *NilCardRegistrationSessionCreatingRequestTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestTdsType as json.
func (o NilCardRegistrationSessionCreatingRequestTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestTdsType from json.
func (o *NilCardRegistrationSessionCreatingRequestTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCardRegistrationSessionCreatingRequestTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CardRegistrationSessionCreatingRequestTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCardRegistrationSessionCreatingRequestTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCardRegistrationSessionCreatingRequestTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Tds2Type as json.
func (o NilChangeAmountOfPaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0Tds2Type from json.
func (o *NilChangeAmountOfPaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilChangeAmountOfPaymentOK0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilChangeAmountOfPaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilChangeAmountOfPaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0TdsType as json.
func (o NilChangeAmountOfPaymentOK0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0TdsType from json.
func (o *NilChangeAmountOfPaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilChangeAmountOfPaymentOK0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilChangeAmountOfPaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilChangeAmountOfPaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailRepresentativeGender as json.
func (o NilContractsRetrievingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractDetailRepresentativeGender from json.
func (o *NilContractsRetrievingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilContractsRetrievingResponseContractDetailRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractsRetrievingResponseContractDetailRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilContractsRetrievingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilContractsRetrievingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseSharedCustomerFlag as json.
func (o NilContractsRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseSharedCustomerFlag from json.
func (o *NilContractsRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilContractsRetrievingResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractsRetrievingResponseSharedCustomerFlag
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilContractsRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilContractsRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseShopType as json.
func (o NilContractsRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseShopType from json.
func (o *NilContractsRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilContractsRetrievingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractsRetrievingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilContractsRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilContractsRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Tds2Type as json.
func (o NilCreatePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0Tds2Type from json.
func (o *NilCreatePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCreatePaymentOK0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCreatePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCreatePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0TdsType as json.
func (o NilCreatePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0TdsType from json.
func (o *NilCreatePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCreatePaymentOK0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCreatePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCreatePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0Tds2Type as json.
func (o NilCreatePaymentReq0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentReq0Tds2Type from json.
func (o *NilCreatePaymentReq0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCreatePaymentReq0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentReq0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCreatePaymentReq0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCreatePaymentReq0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentReq0TdsType as json.
func (o NilCreatePaymentReq0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentReq0TdsType from json.
func (o *NilCreatePaymentReq0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCreatePaymentReq0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentReq0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCreatePaymentReq0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCreatePaymentReq0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2AddrMatch as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2AddrMatch from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2AddrMatch
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ShipInd as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ShipInd from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2ShipInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTds2Type as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTds2Type from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCardTdsType as json.
func (o NilCustomerPaymentMethodCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestCardTdsType from json.
func (o *NilCustomerPaymentMethodCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestCardTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCardTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebitAccountType as json.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitAccountType from json.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestDirectdebitAccountType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebitApplicationType as json.
func (o NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitApplicationType from json.
func (o *NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestDirectdebitApplicationType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingRequestDirectdebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardBrand as json.
func (o NilCustomerPaymentMethodCreatingResponseCardBrand) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardBrand from json.
func (o *NilCustomerPaymentMethodCreatingResponseCardBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingResponseCardBrand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseCardBrand
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingResponseCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingResponseCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardTds2Type as json.
func (o NilCustomerPaymentMethodCreatingResponseCardTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardTds2Type from json.
func (o *NilCustomerPaymentMethodCreatingResponseCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingResponseCardTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseCardTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingResponseCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingResponseCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardTdsType as json.
func (o NilCustomerPaymentMethodCreatingResponseCardTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardTdsType from json.
func (o *NilCustomerPaymentMethodCreatingResponseCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingResponseCardTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseCardTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingResponseCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingResponseCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCardType as json.
func (o NilCustomerPaymentMethodCreatingResponseCardType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseCardType from json.
func (o *NilCustomerPaymentMethodCreatingResponseCardType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodCreatingResponseCardType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseCardType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodCreatingResponseCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodCreatingResponseCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardBrand as json.
func (o NilCustomerPaymentMethodRetrievingResponseCardBrand) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardBrand from json.
func (o *NilCustomerPaymentMethodRetrievingResponseCardBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodRetrievingResponseCardBrand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseCardBrand
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodRetrievingResponseCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodRetrievingResponseCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardTds2Type as json.
func (o NilCustomerPaymentMethodRetrievingResponseCardTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardTds2Type from json.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodRetrievingResponseCardTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseCardTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodRetrievingResponseCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodRetrievingResponseCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardTdsType as json.
func (o NilCustomerPaymentMethodRetrievingResponseCardTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardTdsType from json.
func (o *NilCustomerPaymentMethodRetrievingResponseCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodRetrievingResponseCardTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseCardTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodRetrievingResponseCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodRetrievingResponseCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCardType as json.
func (o NilCustomerPaymentMethodRetrievingResponseCardType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCardType from json.
func (o *NilCustomerPaymentMethodRetrievingResponseCardType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilCustomerPaymentMethodRetrievingResponseCardType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseCardType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilCustomerPaymentMethodRetrievingResponseCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilCustomerPaymentMethodRetrievingResponseCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailRepresentativeGender as json.
func (o NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailRepresentativeGender from json.
func (o *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoRetrievingResponseContractDetailRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoRetrievingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseShopType as json.
func (o NilExaminationInfoRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseShopType from json.
func (o *NilExaminationInfoRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoRetrievingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoRetrievingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailRepresentativeGender as json.
func (o NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailRepresentativeGender from json.
func (o *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoUpdatingRequestContractDetailRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoUpdatingRequestContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailRepresentativeGender as json.
func (o NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailRepresentativeGender from json.
func (o *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoUpdatingResponseContractDetailRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoUpdatingResponseContractDetailRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseShopType as json.
func (o NilExaminationInfoUpdatingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseShopType from json.
func (o *NilExaminationInfoUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoUpdatingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoUpdatingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender as json.
func (o NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender from json.
func (o *NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender as json.
func (o NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender from json.
func (o *NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender as json.
func (o NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender from json.
func (o *NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTds2Type as json.
func (o NilExecutePaymentAfter3DSecureOKTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTds2Type from json.
func (o *NilExecutePaymentAfter3DSecureOKTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentAfter3DSecureOKTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentAfter3DSecureOKTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentAfter3DSecureOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentAfter3DSecureOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTdsType as json.
func (o NilExecutePaymentAfter3DSecureOKTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTdsType from json.
func (o *NilExecutePaymentAfter3DSecureOKTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentAfter3DSecureOKTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentAfter3DSecureOKTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentAfter3DSecureOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentAfter3DSecureOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Tds2Type as json.
func (o NilExecutePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0Tds2Type from json.
func (o *NilExecutePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentOK0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0TdsType as json.
func (o NilExecutePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0TdsType from json.
func (o *NilExecutePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentOK0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2AddrMatch as json.
func (o NilExecutePaymentReq0Tds2AddrMatch) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2AddrMatch from json.
func (o *NilExecutePaymentReq0Tds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2AddrMatch to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2AddrMatch
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2DeliveryTimeframe as json.
func (o NilExecutePaymentReq0Tds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2DeliveryTimeframe from json.
func (o *NilExecutePaymentReq0Tds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2DeliveryTimeframe to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2DeliveryTimeframe
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2PreOrderPurchaseInd as json.
func (o NilExecutePaymentReq0Tds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2PreOrderPurchaseInd from json.
func (o *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2PreOrderPurchaseInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2PreOrderPurchaseInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ReorderItemsInd as json.
func (o NilExecutePaymentReq0Tds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2ReorderItemsInd from json.
func (o *NilExecutePaymentReq0Tds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2ReorderItemsInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2ReorderItemsInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ShipInd as json.
func (o NilExecutePaymentReq0Tds2ShipInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2ShipInd from json.
func (o *NilExecutePaymentReq0Tds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2ShipInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2ShipInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ShipNameInd as json.
func (o NilExecutePaymentReq0Tds2ShipNameInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2ShipNameInd from json.
func (o *NilExecutePaymentReq0Tds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2ShipNameInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2ShipNameInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2SuspiciousAccActivity as json.
func (o NilExecutePaymentReq0Tds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2SuspiciousAccActivity from json.
func (o *NilExecutePaymentReq0Tds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2SuspiciousAccActivity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2SuspiciousAccActivity
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Tds2ThreeDsReqAuthMethod as json.
func (o NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Tds2ThreeDsReqAuthMethod from json.
func (o *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0Tds2ThreeDsReqAuthMethod
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq3RedirectType as json.
func (o NilExecutePaymentReq3RedirectType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq3RedirectType from json.
func (o *NilExecutePaymentReq3RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilExecutePaymentReq3RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq3RedirectType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilExecutePaymentReq3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilExecutePaymentReq3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o NilFloat64) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *NilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o NilInt) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *NilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o NilInt32) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *NilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseAPIKeyDisplayFlag as json.
func (o NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTJoinTenantsResponseAPIKeyDisplayFlag from json.
func (o *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPOSTJoinTenantsResponseAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v POSTJoinTenantsResponseAPIKeyDisplayFlag
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPOSTJoinTenantsResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseSharedCustomerFlag as json.
func (o NilPOSTJoinTenantsResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTJoinTenantsResponseSharedCustomerFlag from json.
func (o *NilPOSTJoinTenantsResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPOSTJoinTenantsResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v POSTJoinTenantsResponseSharedCustomerFlag
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPOSTJoinTenantsResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPOSTJoinTenantsResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseShopType as json.
func (o NilPOSTJoinTenantsResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTJoinTenantsResponseShopType from json.
func (o *NilPOSTJoinTenantsResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPOSTJoinTenantsResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v POSTJoinTenantsResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPOSTJoinTenantsResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPOSTJoinTenantsResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardBrand as json.
func (o NilPaymentMethodCardBrand) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodCardBrand from json.
func (o *NilPaymentMethodCardBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentMethodCardBrand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCardBrand
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentMethodCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentMethodCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardTds2Type as json.
func (o NilPaymentMethodCardTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodCardTds2Type from json.
func (o *NilPaymentMethodCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentMethodCardTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCardTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentMethodCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentMethodCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardTdsType as json.
func (o NilPaymentMethodCardTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodCardTdsType from json.
func (o *NilPaymentMethodCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentMethodCardTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCardTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentMethodCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentMethodCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardType as json.
func (o NilPaymentMethodCardType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodCardType from json.
func (o *NilPaymentMethodCardType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentMethodCardType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCardType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentMethodCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentMethodCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardJobCode as json.
func (o NilPaymentSessionCreatingRequestCardJobCode) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardJobCode from json.
func (o *NilPaymentSessionCreatingRequestCardJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardJobCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardJobCode
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2AddrMatch as json.
func (o NilPaymentSessionCreatingRequestCardTds2AddrMatch) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2AddrMatch from json.
func (o *NilPaymentSessionCreatingRequestCardTds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2AddrMatch to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2AddrMatch
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2DeliveryTimeframe as json.
func (o NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2DeliveryTimeframe from json.
func (o *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2DeliveryTimeframe
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd as json.
func (o NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd from json.
func (o *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ReorderItemsInd as json.
func (o NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ReorderItemsInd from json.
func (o *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2ReorderItemsInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ShipInd as json.
func (o NilPaymentSessionCreatingRequestCardTds2ShipInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ShipInd from json.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2ShipInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2ShipInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ShipNameInd as json.
func (o NilPaymentSessionCreatingRequestCardTds2ShipNameInd) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ShipNameInd from json.
func (o *NilPaymentSessionCreatingRequestCardTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2ShipNameInd to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2ShipNameInd
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity as json.
func (o NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity from json.
func (o *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod as json.
func (o NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod from json.
func (o *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2Type as json.
func (o NilPaymentSessionCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2Type from json.
func (o *NilPaymentSessionCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTdsType as json.
func (o NilPaymentSessionCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestCardTdsType from json.
func (o *NilPaymentSessionCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestCardTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCardTdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag as json.
func (o NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag from json.
func (o *NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestPaypayJobCode as json.
func (o NilPaymentSessionCreatingRequestPaypayJobCode) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestPaypayJobCode from json.
func (o *NilPaymentSessionCreatingRequestPaypayJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPaymentSessionCreatingRequestPaypayJobCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestPaypayJobCode
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPaymentSessionCreatingRequestPaypayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPaymentSessionCreatingRequestPaypayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseShopType as json.
func (o NilPlatformShopRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopRetrievingResponseShopType from json.
func (o *NilPlatformShopRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPlatformShopRetrievingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopRetrievingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPlatformShopRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPlatformShopRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseShopType as json.
func (o NilPlatformShopUpdatingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopUpdatingResponseShopType from json.
func (o *NilPlatformShopUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilPlatformShopUpdatingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopUpdatingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilPlatformShopUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilPlatformShopUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Tds2Type as json.
func (o NilRetrievePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0Tds2Type from json.
func (o *NilRetrievePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilRetrievePaymentOK0Tds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK0Tds2Type
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilRetrievePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilRetrievePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0TdsType as json.
func (o NilRetrievePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0TdsType from json.
func (o *NilRetrievePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilRetrievePaymentOK0TdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK0TdsType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilRetrievePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilRetrievePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopShopType as json.
func (o NilShopShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopShopType from json.
func (o *NilShopShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilShopShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilShopShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilShopShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseShopType as json.
func (o NilTenantShopRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopRetrievingResponseShopType from json.
func (o *NilTenantShopRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTenantShopRetrievingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopRetrievingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTenantShopRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTenantShopRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestAPIKeyDisplayFlag as json.
func (o NilTenantShopUpdatingRequestAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingRequestAPIKeyDisplayFlag from json.
func (o *NilTenantShopUpdatingRequestAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTenantShopUpdatingRequestAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopUpdatingRequestAPIKeyDisplayFlag
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTenantShopUpdatingRequestAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTenantShopUpdatingRequestAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestPaypayContentCategoryType as json.
func (o NilTenantShopUpdatingRequestPaypayContentCategoryType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingRequestPaypayContentCategoryType from json.
func (o *NilTenantShopUpdatingRequestPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTenantShopUpdatingRequestPaypayContentCategoryType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopUpdatingRequestPaypayContentCategoryType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTenantShopUpdatingRequestPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTenantShopUpdatingRequestPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseShopType as json.
func (o NilTenantShopUpdatingResponseShopType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingResponseShopType from json.
func (o *NilTenantShopUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilTenantShopUpdatingResponseShopType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopUpdatingResponseShopType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilTenantShopUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilTenantShopUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodApplicationType as json.
func (o NilWebhookEventCustomerPaymentMethodApplicationType) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCustomerPaymentMethodApplicationType from json.
func (o *NilWebhookEventCustomerPaymentMethodApplicationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilWebhookEventCustomerPaymentMethodApplicationType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventCustomerPaymentMethodApplicationType
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilWebhookEventCustomerPaymentMethodApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilWebhookEventCustomerPaymentMethodApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailTradeType as json.
func (o OptAccountDetailTradeType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailTradeType from json.
func (o *OptAccountDetailTradeType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountDetailTradeType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountDetailTradeType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountDetailTradeType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountListItemStatusCode as json.
func (o OptAccountListItemStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountListItemStatusCode from json.
func (o *OptAccountListItemStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountListItemStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountListItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountListItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountPaymentMethod as json.
func (o OptAccountPaymentMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AccountPaymentMethod from json.
func (o *OptAccountPaymentMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountPaymentMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountRetrievingResponseDepositDestination as json.
func (o OptAccountRetrievingResponseDepositDestination) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes AccountRetrievingResponseDepositDestination from json.
func (o *OptAccountRetrievingResponseDepositDestination) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountRetrievingResponseDepositDestination to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountRetrievingResponseDepositDestination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountRetrievingResponseDepositDestination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountRetrievingResponseDepositDestinationAccountKind as json.
func (o OptAccountRetrievingResponseDepositDestinationAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AccountRetrievingResponseDepositDestinationAccountKind from json.
func (o *OptAccountRetrievingResponseDepositDestinationAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAccountRetrievingResponseDepositDestinationAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAccountRetrievingResponseDepositDestinationAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAccountRetrievingResponseDepositDestinationAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKJobCode as json.
func (o OptAuthorizePaymentOKJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKJobCode from json.
func (o *OptAuthorizePaymentOKJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthorizePaymentOKJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthorizePaymentOKJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthorizePaymentOKJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKMethod as json.
func (o OptAuthorizePaymentOKMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKMethod from json.
func (o *OptAuthorizePaymentOKMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthorizePaymentOKMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthorizePaymentOKMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthorizePaymentOKMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKPayType as json.
func (o OptAuthorizePaymentOKPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKPayType from json.
func (o *OptAuthorizePaymentOKPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthorizePaymentOKPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthorizePaymentOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthorizePaymentOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKStatus as json.
func (o OptAuthorizePaymentOKStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKStatus from json.
func (o *OptAuthorizePaymentOKStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptAuthorizePaymentOKStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptAuthorizePaymentOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptAuthorizePaymentOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0JobCode as json.
func (o OptCapturePaymentOK0JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0JobCode from json.
func (o *OptCapturePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK0JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Method as json.
func (o OptCapturePaymentOK0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0Method from json.
func (o *OptCapturePaymentOK0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0PayType as json.
func (o OptCapturePaymentOK0PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0PayType from json.
func (o *OptCapturePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK0PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Status as json.
func (o OptCapturePaymentOK0Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0Status from json.
func (o *OptCapturePaymentOK0Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK0Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1JobCode as json.
func (o OptCapturePaymentOK1JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1JobCode from json.
func (o *OptCapturePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK1JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Method as json.
func (o OptCapturePaymentOK1Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1Method from json.
func (o *OptCapturePaymentOK1Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK1Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1PayType as json.
func (o OptCapturePaymentOK1PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1PayType from json.
func (o *OptCapturePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK1PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Status as json.
func (o OptCapturePaymentOK1Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1Status from json.
func (o *OptCapturePaymentOK1Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK1Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2JobCode as json.
func (o OptCapturePaymentOK2JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK2JobCode from json.
func (o *OptCapturePaymentOK2JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK2JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK2JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK2JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2PayType as json.
func (o OptCapturePaymentOK2PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK2PayType from json.
func (o *OptCapturePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK2PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2Status as json.
func (o OptCapturePaymentOK2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK2Status from json.
func (o *OptCapturePaymentOK2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentOK2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq0Method as json.
func (o OptCapturePaymentReq0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentReq0Method from json.
func (o *OptCapturePaymentReq0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCapturePaymentReq0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCapturePaymentReq0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCapturePaymentReq0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardBrand as json.
func (o OptCardBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardBrand from json.
func (o *OptCardBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardDefaultFlag as json.
func (o OptCardDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardDefaultFlag from json.
func (o *OptCardDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardPaymentSessionJobCode as json.
func (o OptCardPaymentSessionJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardPaymentSessionJobCode from json.
func (o *OptCardPaymentSessionJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardPaymentSessionJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardPaymentSessionJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardPaymentSessionJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestCompletionMailSendFlag as json.
func (o OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestCompletionMailSendFlag from json.
func (o *OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCreatingRequestCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingRequestGuideMailSendFlag as json.
func (o OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingRequestGuideMailSendFlag from json.
func (o *OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCreatingRequestGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCreatingRequestGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseCompletionMailSendFlag as json.
func (o OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingResponseCompletionMailSendFlag from json.
func (o *OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCreatingResponseCompletionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseGuideMailSendFlag as json.
func (o OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingResponseGuideMailSendFlag from json.
func (o *OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCreatingResponseGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCreatingResponseGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardRegistrationSessionCreatingResponseStatus as json.
func (o OptCardRegistrationSessionCreatingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardRegistrationSessionCreatingResponseStatus from json.
func (o *OptCardRegistrationSessionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardRegistrationSessionCreatingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardRegistrationSessionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardRegistrationSessionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CardType as json.
func (o OptCardType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CardType from json.
func (o *OptCardType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCardType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0JobCode as json.
func (o OptChangeAmountOfPaymentOK0JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0JobCode from json.
func (o *OptChangeAmountOfPaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK0JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Method as json.
func (o OptChangeAmountOfPaymentOK0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0Method from json.
func (o *OptChangeAmountOfPaymentOK0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0PayType as json.
func (o OptChangeAmountOfPaymentOK0PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0PayType from json.
func (o *OptChangeAmountOfPaymentOK0PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK0PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Status as json.
func (o OptChangeAmountOfPaymentOK0Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0Status from json.
func (o *OptChangeAmountOfPaymentOK0Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK0Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1JobCode as json.
func (o OptChangeAmountOfPaymentOK1JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK1JobCode from json.
func (o *OptChangeAmountOfPaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK1JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1PayType as json.
func (o OptChangeAmountOfPaymentOK1PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK1PayType from json.
func (o *OptChangeAmountOfPaymentOK1PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK1PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1Status as json.
func (o OptChangeAmountOfPaymentOK1Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK1Status from json.
func (o *OptChangeAmountOfPaymentOK1Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK1Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2PayType as json.
func (o OptChangeAmountOfPaymentOK2PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK2PayType from json.
func (o *OptChangeAmountOfPaymentOK2PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK2PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2Status as json.
func (o OptChangeAmountOfPaymentOK2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK2Status from json.
func (o *OptChangeAmountOfPaymentOK2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptChangeAmountOfPaymentOK2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptChangeAmountOfPaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptChangeAmountOfPaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContentInfoV2 as json.
func (o OptContentInfoV2) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContentInfoV2 from json.
func (o *OptContentInfoV2) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContentInfoV2 to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContentInfoV2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContentInfoV2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseAvailableStatusCode as json.
func (o OptContractsRetrievingResponseAvailableStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractsRetrievingResponseAvailableStatusCode from json.
func (o *OptContractsRetrievingResponseAvailableStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseAvailableStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseAvailableStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseAvailableStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractBankAccount as json.
func (o OptContractsRetrievingResponseContractBankAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractsRetrievingResponseContractBankAccount from json.
func (o *OptContractsRetrievingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractBankAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractBankAccountAccountKind as json.
func (o OptContractsRetrievingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractBankAccountAccountKind from json.
func (o *OptContractsRetrievingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractBankAccountAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetail as json.
func (o OptContractsRetrievingResponseContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractsRetrievingResponseContractDetail from json.
func (o *OptContractsRetrievingResponseContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailPayBy as json.
func (o OptContractsRetrievingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractDetailPayBy from json.
func (o *OptContractsRetrievingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractDetailPayBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractDetailSiteExisting as json.
func (o OptContractsRetrievingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractDetailSiteExisting from json.
func (o *OptContractsRetrievingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractVirtualBank as json.
func (o OptContractsRetrievingResponseContractVirtualBank) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractsRetrievingResponseContractVirtualBank from json.
func (o *OptContractsRetrievingResponseContractVirtualBank) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractVirtualBank to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractVirtualBank) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractVirtualBank) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractVirtualBankAccountKind as json.
func (o OptContractsRetrievingResponseContractVirtualBankAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractVirtualBankAccountKind from json.
func (o *OptContractsRetrievingResponseContractVirtualBankAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseContractVirtualBankAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseContractVirtualBankAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseContractVirtualBankAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseCreditCardSetting as json.
func (o OptContractsRetrievingResponseCreditCardSetting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractsRetrievingResponseCreditCardSetting from json.
func (o *OptContractsRetrievingResponseCreditCardSetting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseCreditCardSetting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseCreditCardSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseCreditCardSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseExaminationItemExaminationMasterID as json.
func (o OptContractsRetrievingResponseExaminationItemExaminationMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseExaminationItemExaminationMasterID from json.
func (o *OptContractsRetrievingResponseExaminationItemExaminationMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseExaminationItemExaminationMasterID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseExaminationItemExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseExaminationItemExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseExaminationItemStatusCode as json.
func (o OptContractsRetrievingResponseExaminationItemStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseExaminationItemStatusCode from json.
func (o *OptContractsRetrievingResponseExaminationItemStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseExaminationItemStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseExaminationItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseExaminationItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseOfficialRegisteredCorporateInfo as json.
func (o OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ContractsRetrievingResponseOfficialRegisteredCorporateInfo from json.
func (o *OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseOfficialRegisteredCorporateInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseOfficialRegisteredCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseStatusCode as json.
func (o OptContractsRetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseStatusCode from json.
func (o *OptContractsRetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptContractsRetrievingResponseStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptContractsRetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptContractsRetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0JobCode as json.
func (o OptCreatePaymentOK0JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0JobCode from json.
func (o *OptCreatePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK0JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Method as json.
func (o OptCreatePaymentOK0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0Method from json.
func (o *OptCreatePaymentOK0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0PayType as json.
func (o OptCreatePaymentOK0PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0PayType from json.
func (o *OptCreatePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK0PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Status as json.
func (o OptCreatePaymentOK0Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0Status from json.
func (o *OptCreatePaymentOK0Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK0Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1JobCode as json.
func (o OptCreatePaymentOK1JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1JobCode from json.
func (o *OptCreatePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK1JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Method as json.
func (o OptCreatePaymentOK1Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1Method from json.
func (o *OptCreatePaymentOK1Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK1Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1PayType as json.
func (o OptCreatePaymentOK1PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1PayType from json.
func (o *OptCreatePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK1PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Status as json.
func (o OptCreatePaymentOK1Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1Status from json.
func (o *OptCreatePaymentOK1Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK1Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2CancelOverpaymentFlag as json.
func (o OptCreatePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2CancelOverpaymentFlag from json.
func (o *OptCreatePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK2CancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2OverpaymentFlag as json.
func (o OptCreatePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2OverpaymentFlag from json.
func (o *OptCreatePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK2OverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2PayType as json.
func (o OptCreatePaymentOK2PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2PayType from json.
func (o *OptCreatePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK2PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2Result as json.
func (o OptCreatePaymentOK2Result) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2Result from json.
func (o *OptCreatePaymentOK2Result) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK2Result to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2Status as json.
func (o OptCreatePaymentOK2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2Status from json.
func (o *OptCreatePaymentOK2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3JobCode as json.
func (o OptCreatePaymentOK3JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK3JobCode from json.
func (o *OptCreatePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK3JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3PayType as json.
func (o OptCreatePaymentOK3PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK3PayType from json.
func (o *OptCreatePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK3PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3Status as json.
func (o OptCreatePaymentOK3Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK3Status from json.
func (o *OptCreatePaymentOK3Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK3Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4PayType as json.
func (o OptCreatePaymentOK4PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK4PayType from json.
func (o *OptCreatePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK4PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4Status as json.
func (o OptCreatePaymentOK4Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK4Status from json.
func (o *OptCreatePaymentOK4Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCreatePaymentOK4Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCreatePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCreatePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseBrand as json.
func (o OptCustomerCardCreatingResponseBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardCreatingResponseBrand from json.
func (o *OptCustomerCardCreatingResponseBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardCreatingResponseBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardCreatingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardCreatingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseDefaultFlag as json.
func (o OptCustomerCardCreatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardCreatingResponseDefaultFlag from json.
func (o *OptCustomerCardCreatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardCreatingResponseDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardCreatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardCreatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardCreatingResponseType as json.
func (o OptCustomerCardCreatingResponseType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardCreatingResponseType from json.
func (o *OptCustomerCardCreatingResponseType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardCreatingResponseType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardCreatingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardCreatingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardDeletingResponseDeleteFlag as json.
func (o OptCustomerCardDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardDeletingResponseDeleteFlag from json.
func (o *OptCustomerCardDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseBrand as json.
func (o OptCustomerCardRetrievingResponseBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardRetrievingResponseBrand from json.
func (o *OptCustomerCardRetrievingResponseBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardRetrievingResponseBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardRetrievingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardRetrievingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseDefaultFlag as json.
func (o OptCustomerCardRetrievingResponseDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardRetrievingResponseDefaultFlag from json.
func (o *OptCustomerCardRetrievingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardRetrievingResponseDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardRetrievingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardRetrievingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRetrievingResponseType as json.
func (o OptCustomerCardRetrievingResponseType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardRetrievingResponseType from json.
func (o *OptCustomerCardRetrievingResponseType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardRetrievingResponseType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardRetrievingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardRetrievingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingRequestDefaultFlag as json.
func (o OptCustomerCardUpdatingRequestDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardUpdatingRequestDefaultFlag from json.
func (o *OptCustomerCardUpdatingRequestDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardUpdatingRequestDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardUpdatingRequestDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardUpdatingRequestDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseBrand as json.
func (o OptCustomerCardUpdatingResponseBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardUpdatingResponseBrand from json.
func (o *OptCustomerCardUpdatingResponseBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardUpdatingResponseBrand to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardUpdatingResponseBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardUpdatingResponseBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseDefaultFlag as json.
func (o OptCustomerCardUpdatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardUpdatingResponseDefaultFlag from json.
func (o *OptCustomerCardUpdatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardUpdatingResponseDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardUpdatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardUpdatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardUpdatingResponseType as json.
func (o OptCustomerCardUpdatingResponseType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardUpdatingResponseType from json.
func (o *OptCustomerCardUpdatingResponseType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerCardUpdatingResponseType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerCardUpdatingResponseType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerCardUpdatingResponseType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDeletingResponseDeleteFlag as json.
func (o OptCustomerDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerDeletingResponseDeleteFlag from json.
func (o *OptCustomerDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication as json.
func (o OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication from json.
func (o *OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDefaultFlag as json.
func (o OptCustomerPaymentMethodCreatingResponseDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDefaultFlag from json.
func (o *OptCustomerPaymentMethodCreatingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodCreatingResponseDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodCreatingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodCreatingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDeleteFlag as json.
func (o OptCustomerPaymentMethodCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDeleteFlag from json.
func (o *OptCustomerPaymentMethodCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodCreatingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponsePayType as json.
func (o OptCustomerPaymentMethodCreatingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponsePayType from json.
func (o *OptCustomerPaymentMethodCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodCreatingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodDeletingResponseDeleteFlag as json.
func (o OptCustomerPaymentMethodDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodDeletingResponseDeleteFlag from json.
func (o *OptCustomerPaymentMethodDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDefaultFlag as json.
func (o OptCustomerPaymentMethodRetrievingResponseDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDefaultFlag from json.
func (o *OptCustomerPaymentMethodRetrievingResponseDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodRetrievingResponseDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodRetrievingResponseDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodRetrievingResponseDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDeleteFlag as json.
func (o OptCustomerPaymentMethodRetrievingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDeleteFlag from json.
func (o *OptCustomerPaymentMethodRetrievingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodRetrievingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodRetrievingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodRetrievingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponsePayType as json.
func (o OptCustomerPaymentMethodRetrievingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponsePayType from json.
func (o *OptCustomerPaymentMethodRetrievingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCustomerPaymentMethodRetrievingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCustomerPaymentMethodRetrievingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCustomerPaymentMethodRetrievingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DepositStatusCode as json.
func (o OptDepositStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes DepositStatusCode from json.
func (o *OptDepositStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDepositStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileUploadingRequestMultipartType as json.
func (o OptExaminationFileUploadingRequestMultipartType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationFileUploadingRequestMultipartType from json.
func (o *OptExaminationFileUploadingRequestMultipartType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationFileUploadingRequestMultipartType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationFileUploadingRequestMultipartType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationFileUploadingRequestMultipartType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationFileUploadingResponseExaminationFilesItemType as json.
func (o OptExaminationFileUploadingResponseExaminationFilesItemType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationFileUploadingResponseExaminationFilesItemType from json.
func (o *OptExaminationFileUploadingResponseExaminationFilesItemType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationFileUploadingResponseExaminationFilesItemType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationFileUploadingResponseExaminationFilesItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationFileUploadingResponseExaminationFilesItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractBankAccount as json.
func (o OptExaminationInfoRetrievingResponseContractBankAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoRetrievingResponseContractBankAccount from json.
func (o *OptExaminationInfoRetrievingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractBankAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractBankAccountAccountKind as json.
func (o OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseContractBankAccountAccountKind from json.
func (o *OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractBankAccountAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetail as json.
func (o OptExaminationInfoRetrievingResponseContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetail from json.
func (o *OptExaminationInfoRetrievingResponseContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailPayBy as json.
func (o OptExaminationInfoRetrievingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailPayBy from json.
func (o *OptExaminationInfoRetrievingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractDetailPayBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractDetailSiteExisting as json.
func (o OptExaminationInfoRetrievingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseContractDetailSiteExisting from json.
func (o *OptExaminationInfoRetrievingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractInputStatus as json.
func (o OptExaminationInfoRetrievingResponseContractInputStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoRetrievingResponseContractInputStatus from json.
func (o *OptExaminationInfoRetrievingResponseContractInputStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractInputStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseContractInputStatusStatusCode as json.
func (o OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseContractInputStatusStatusCode from json.
func (o *OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseContractInputStatusStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseContractInputStatusStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseDepositCycleMasterID as json.
func (o OptExaminationInfoRetrievingResponseDepositCycleMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseDepositCycleMasterID from json.
func (o *OptExaminationInfoRetrievingResponseDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseDepositCycleMasterID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseShopItemDetailItemType as json.
func (o OptExaminationInfoRetrievingResponseShopItemDetailItemType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseShopItemDetailItemType from json.
func (o *OptExaminationInfoRetrievingResponseShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseShopItemDetailItemType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoRetrievingResponseStatusCode as json.
func (o OptExaminationInfoRetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoRetrievingResponseStatusCode from json.
func (o *OptExaminationInfoRetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoRetrievingResponseStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoRetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoRetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractBankAccount as json.
func (o OptExaminationInfoUpdatingRequestContractBankAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingRequestContractBankAccount from json.
func (o *OptExaminationInfoUpdatingRequestContractBankAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractBankAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractBankAccountAccountKind as json.
func (o OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestContractBankAccountAccountKind from json.
func (o *OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractBankAccountAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetail as json.
func (o OptExaminationInfoUpdatingRequestContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetail from json.
func (o *OptExaminationInfoUpdatingRequestContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailPayBy as json.
func (o OptExaminationInfoUpdatingRequestContractDetailPayBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailPayBy from json.
func (o *OptExaminationInfoUpdatingRequestContractDetailPayBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractDetailPayBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestContractDetailSiteExisting as json.
func (o OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestContractDetailSiteExisting from json.
func (o *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestDepositCycleMasterID as json.
func (o OptExaminationInfoUpdatingRequestDepositCycleMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestDepositCycleMasterID from json.
func (o *OptExaminationInfoUpdatingRequestDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestDepositCycleMasterID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingRequestShopItemDetailItemType as json.
func (o OptExaminationInfoUpdatingRequestShopItemDetailItemType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingRequestShopItemDetailItemType from json.
func (o *OptExaminationInfoUpdatingRequestShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingRequestShopItemDetailItemType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingRequestShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingRequestShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractBankAccount as json.
func (o OptExaminationInfoUpdatingResponseContractBankAccount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingResponseContractBankAccount from json.
func (o *OptExaminationInfoUpdatingResponseContractBankAccount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractBankAccount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractBankAccount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractBankAccount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractBankAccountAccountKind as json.
func (o OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseContractBankAccountAccountKind from json.
func (o *OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractBankAccountAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractBankAccountAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetail as json.
func (o OptExaminationInfoUpdatingResponseContractDetail) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetail from json.
func (o *OptExaminationInfoUpdatingResponseContractDetail) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractDetail to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailPayBy as json.
func (o OptExaminationInfoUpdatingResponseContractDetailPayBy) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailPayBy from json.
func (o *OptExaminationInfoUpdatingResponseContractDetailPayBy) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractDetailPayBy to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractDetailPayBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractDetailPayBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractDetailSiteExisting as json.
func (o OptExaminationInfoUpdatingResponseContractDetailSiteExisting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseContractDetailSiteExisting from json.
func (o *OptExaminationInfoUpdatingResponseContractDetailSiteExisting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractDetailSiteExisting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractDetailSiteExisting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractDetailSiteExisting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractInputStatus as json.
func (o OptExaminationInfoUpdatingResponseContractInputStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoUpdatingResponseContractInputStatus from json.
func (o *OptExaminationInfoUpdatingResponseContractInputStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractInputStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractInputStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractInputStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseContractInputStatusStatusCode as json.
func (o OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseContractInputStatusStatusCode from json.
func (o *OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseContractInputStatusStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseContractInputStatusStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseDepositCycleMasterID as json.
func (o OptExaminationInfoUpdatingResponseDepositCycleMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseDepositCycleMasterID from json.
func (o *OptExaminationInfoUpdatingResponseDepositCycleMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseDepositCycleMasterID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseDepositCycleMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseDepositCycleMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseShopItemDetailItemType as json.
func (o OptExaminationInfoUpdatingResponseShopItemDetailItemType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseShopItemDetailItemType from json.
func (o *OptExaminationInfoUpdatingResponseShopItemDetailItemType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseShopItemDetailItemType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseShopItemDetailItemType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseShopItemDetailItemType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoUpdatingResponseStatusCode as json.
func (o OptExaminationInfoUpdatingResponseStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoUpdatingResponseStatusCode from json.
func (o *OptExaminationInfoUpdatingResponseStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoUpdatingResponseStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoUpdatingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoUpdatingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseBankAccountInfo as json.
func (o OptExaminationInfoV2RetrievingResponseBankAccountInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseBankAccountInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseBankAccountInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseBankAccountInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseContractInfo as json.
func (o OptExaminationInfoV2RetrievingResponseContractInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseContractInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseContractInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseDepositCycleInfo as json.
func (o OptExaminationInfoV2RetrievingResponseDepositCycleInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseDepositCycleInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseDepositCycleInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseDepositCycleInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseShopInfo as json.
func (o OptExaminationInfoV2RetrievingResponseShopInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseShopInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseShopInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo as json.
func (o OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseShopInfoSiteInfo as json.
func (o OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoSiteInfo from json.
func (o *OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseStatusCode as json.
func (o OptExaminationInfoV2RetrievingResponseStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoV2RetrievingResponseStatusCode from json.
func (o *OptExaminationInfoV2RetrievingResponseStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2RetrievingResponseStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2RetrievingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2RetrievingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestBankAccountInfo as json.
func (o OptExaminationInfoV2UpdatingRequestBankAccountInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestBankAccountInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestBankAccountInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestBankAccountInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestContractInfo as json.
func (o OptExaminationInfoV2UpdatingRequestContractInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestContractInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestContractInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestDepositCycleInfo as json.
func (o OptExaminationInfoV2UpdatingRequestDepositCycleInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestDepositCycleInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestDepositCycleInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestDepositCycleInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestShopInfo as json.
func (o OptExaminationInfoV2UpdatingRequestShopInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestShopInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestShopInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo as json.
func (o OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestShopInfoSiteInfo as json.
func (o OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoSiteInfo from json.
func (o *OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingRequestShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseBankAccountInfo as json.
func (o OptExaminationInfoV2UpdatingResponseBankAccountInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseBankAccountInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseBankAccountInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseBankAccountInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseBankAccountInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseBankAccountInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseContractInfo as json.
func (o OptExaminationInfoV2UpdatingResponseContractInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseContractInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseContractInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseContractInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseContractInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseDepositCycleInfo as json.
func (o OptExaminationInfoV2UpdatingResponseDepositCycleInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseDepositCycleInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseDepositCycleInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseDepositCycleInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseDepositCycleInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseDepositCycleInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseShopInfo as json.
func (o OptExaminationInfoV2UpdatingResponseShopInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseShopInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseShopInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseShopInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseShopInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo as json.
func (o OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseShopInfoSiteInfo as json.
func (o OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoSiteInfo from json.
func (o *OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseShopInfoSiteInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseStatusCode as json.
func (o OptExaminationInfoV2UpdatingResponseStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExaminationInfoV2UpdatingResponseStatusCode from json.
func (o *OptExaminationInfoV2UpdatingResponseStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExaminationInfoV2UpdatingResponseStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExaminationInfoV2UpdatingResponseStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExaminationInfoV2UpdatingResponseStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKJobCode as json.
func (o OptExecutePaymentAfter3DSecureOKJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKJobCode from json.
func (o *OptExecutePaymentAfter3DSecureOKJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentAfter3DSecureOKJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentAfter3DSecureOKJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentAfter3DSecureOKJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKMethod as json.
func (o OptExecutePaymentAfter3DSecureOKMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKMethod from json.
func (o *OptExecutePaymentAfter3DSecureOKMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentAfter3DSecureOKMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentAfter3DSecureOKMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentAfter3DSecureOKMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKPayType as json.
func (o OptExecutePaymentAfter3DSecureOKPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKPayType from json.
func (o *OptExecutePaymentAfter3DSecureOKPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentAfter3DSecureOKPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentAfter3DSecureOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentAfter3DSecureOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKStatus as json.
func (o OptExecutePaymentAfter3DSecureOKStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKStatus from json.
func (o *OptExecutePaymentAfter3DSecureOKStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentAfter3DSecureOKStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentAfter3DSecureOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentAfter3DSecureOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0JobCode as json.
func (o OptExecutePaymentOK0JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0JobCode from json.
func (o *OptExecutePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK0JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Method as json.
func (o OptExecutePaymentOK0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0Method from json.
func (o *OptExecutePaymentOK0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0PayType as json.
func (o OptExecutePaymentOK0PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0PayType from json.
func (o *OptExecutePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK0PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Status as json.
func (o OptExecutePaymentOK0Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0Status from json.
func (o *OptExecutePaymentOK0Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK0Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1JobCode as json.
func (o OptExecutePaymentOK1JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1JobCode from json.
func (o *OptExecutePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK1JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Method as json.
func (o OptExecutePaymentOK1Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1Method from json.
func (o *OptExecutePaymentOK1Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK1Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1PayType as json.
func (o OptExecutePaymentOK1PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1PayType from json.
func (o *OptExecutePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK1PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Status as json.
func (o OptExecutePaymentOK1Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1Status from json.
func (o *OptExecutePaymentOK1Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK1Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2CancelOverpaymentFlag as json.
func (o OptExecutePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2CancelOverpaymentFlag from json.
func (o *OptExecutePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK2CancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2OverpaymentFlag as json.
func (o OptExecutePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2OverpaymentFlag from json.
func (o *OptExecutePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK2OverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2PayType as json.
func (o OptExecutePaymentOK2PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2PayType from json.
func (o *OptExecutePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK2PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2Result as json.
func (o OptExecutePaymentOK2Result) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2Result from json.
func (o *OptExecutePaymentOK2Result) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK2Result to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2Status as json.
func (o OptExecutePaymentOK2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2Status from json.
func (o *OptExecutePaymentOK2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3JobCode as json.
func (o OptExecutePaymentOK3JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK3JobCode from json.
func (o *OptExecutePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK3JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3PayType as json.
func (o OptExecutePaymentOK3PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK3PayType from json.
func (o *OptExecutePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK3PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3Status as json.
func (o OptExecutePaymentOK3Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK3Status from json.
func (o *OptExecutePaymentOK3Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK3Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4PayType as json.
func (o OptExecutePaymentOK4PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK4PayType from json.
func (o *OptExecutePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK4PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4Status as json.
func (o OptExecutePaymentOK4Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK4Status from json.
func (o *OptExecutePaymentOK4Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentOK4Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0Method as json.
func (o OptExecutePaymentReq0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0Method from json.
func (o *OptExecutePaymentReq0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentReq0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentReq0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentReq0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq3PayType as json.
func (o OptExecutePaymentReq3PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq3PayType from json.
func (o *OptExecutePaymentReq3PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptExecutePaymentReq3PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptExecutePaymentReq3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptExecutePaymentReq3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKCancelOverpaymentFlag as json.
func (o OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKCancelOverpaymentFlag from json.
func (o *OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGenerateBarcodeOfPaymentOKCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKOverpaymentFlag as json.
func (o OptGenerateBarcodeOfPaymentOKOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKOverpaymentFlag from json.
func (o *OptGenerateBarcodeOfPaymentOKOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGenerateBarcodeOfPaymentOKOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGenerateBarcodeOfPaymentOKOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGenerateBarcodeOfPaymentOKOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKPayType as json.
func (o OptGenerateBarcodeOfPaymentOKPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKPayType from json.
func (o *OptGenerateBarcodeOfPaymentOKPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGenerateBarcodeOfPaymentOKPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGenerateBarcodeOfPaymentOKPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGenerateBarcodeOfPaymentOKPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKResult as json.
func (o OptGenerateBarcodeOfPaymentOKResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKResult from json.
func (o *OptGenerateBarcodeOfPaymentOKResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGenerateBarcodeOfPaymentOKResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGenerateBarcodeOfPaymentOKResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGenerateBarcodeOfPaymentOKResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKStatus as json.
func (o OptGenerateBarcodeOfPaymentOKStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKStatus from json.
func (o *OptGenerateBarcodeOfPaymentOKStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptGenerateBarcodeOfPaymentOKStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptGenerateBarcodeOfPaymentOKStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptGenerateBarcodeOfPaymentOKStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt to nil")
	}
	o.Set = true
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyType as json.
func (o OptNilAccountDetailApplyType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailApplyType from json.
func (o *OptNilAccountDetailApplyType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountDetailApplyType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountDetailApplyType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountDetailApplyType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountDetailApplyType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AccountDetailApplyTypeForPlatformFee as json.
func (o OptNilAccountDetailApplyTypeForPlatformFee) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes AccountDetailApplyTypeForPlatformFee from json.
func (o *OptNilAccountDetailApplyTypeForPlatformFee) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAccountDetailApplyTypeForPlatformFee to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AccountDetailApplyTypeForPlatformFee
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAccountDetailApplyTypeForPlatformFee) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAccountDetailApplyTypeForPlatformFee) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKBrand as json.
func (o OptNilAuthorizePaymentOKBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKBrand from json.
func (o *OptNilAuthorizePaymentOKBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentOKBrand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentOKBrand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKPayTimes as json.
func (o OptNilAuthorizePaymentOKPayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKPayTimes from json.
func (o *OptNilAuthorizePaymentOKPayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentOKPayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentOKPayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentOKPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentOKPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentOKTds2Status as json.
func (o OptNilAuthorizePaymentOKTds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentOKTds2Status from json.
func (o *OptNilAuthorizePaymentOKTds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentOKTds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentOKTds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentOKTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentOKTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilAuthorizePaymentOKTds2Type as json.
func (o OptNilAuthorizePaymentOKTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilAuthorizePaymentOKTds2Type from json.
func (o *OptNilAuthorizePaymentOKTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentOKTds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilAuthorizePaymentOKTdsType as json.
func (o OptNilAuthorizePaymentOKTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilAuthorizePaymentOKTdsType from json.
func (o *OptNilAuthorizePaymentOKTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentOKTdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes AuthorizePaymentReqPayTimes as json.
func (o OptNilAuthorizePaymentReqPayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes AuthorizePaymentReqPayTimes from json.
func (o *OptNilAuthorizePaymentReqPayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilAuthorizePaymentReqPayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v AuthorizePaymentReqPayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilAuthorizePaymentReqPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilAuthorizePaymentReqPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptNilBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptNilBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBool to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v bool
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Brand as json.
func (o OptNilCapturePaymentOK0Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0Brand from json.
func (o *OptNilCapturePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK0Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK0Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0PayTimes as json.
func (o OptNilCapturePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0PayTimes from json.
func (o *OptNilCapturePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK0Tds2Status as json.
func (o OptNilCapturePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK0Tds2Status from json.
func (o *OptNilCapturePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK0Tds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK0Tds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCapturePaymentOK0Tds2Type as json.
func (o OptNilCapturePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCapturePaymentOK0Tds2Type from json.
func (o *OptNilCapturePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCapturePaymentOK0TdsType as json.
func (o OptNilCapturePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCapturePaymentOK0TdsType from json.
func (o *OptNilCapturePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1Brand as json.
func (o OptNilCapturePaymentOK1Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1Brand from json.
func (o *OptNilCapturePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK1Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK1Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK1PayTimes as json.
func (o OptNilCapturePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK1PayTimes from json.
func (o *OptNilCapturePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK1PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK1PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentOK2RedirectType as json.
func (o OptNilCapturePaymentOK2RedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentOK2RedirectType from json.
func (o *OptNilCapturePaymentOK2RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentOK2RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentOK2RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentOK2RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentOK2RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CapturePaymentReq0PayTimes as json.
func (o OptNilCapturePaymentReq0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CapturePaymentReq0PayTimes from json.
func (o *OptNilCapturePaymentReq0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCapturePaymentReq0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CapturePaymentReq0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCapturePaymentReq0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCapturePaymentReq0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Brand as json.
func (o OptNilChangeAmountOfPaymentOK0Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0Brand from json.
func (o *OptNilChangeAmountOfPaymentOK0Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK0Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK0Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0PayTimes as json.
func (o OptNilChangeAmountOfPaymentOK0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0PayTimes from json.
func (o *OptNilChangeAmountOfPaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK0Tds2Status as json.
func (o OptNilChangeAmountOfPaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK0Tds2Status from json.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK0Tds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK0Tds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilChangeAmountOfPaymentOK0Tds2Type as json.
func (o OptNilChangeAmountOfPaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilChangeAmountOfPaymentOK0Tds2Type from json.
func (o *OptNilChangeAmountOfPaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilChangeAmountOfPaymentOK0TdsType as json.
func (o OptNilChangeAmountOfPaymentOK0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilChangeAmountOfPaymentOK0TdsType from json.
func (o *OptNilChangeAmountOfPaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK1RedirectType as json.
func (o OptNilChangeAmountOfPaymentOK1RedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK1RedirectType from json.
func (o *OptNilChangeAmountOfPaymentOK1RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK1RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK1RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK1RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK1RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ChangeAmountOfPaymentOK2ResultCode as json.
func (o OptNilChangeAmountOfPaymentOK2ResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ChangeAmountOfPaymentOK2ResultCode from json.
func (o *OptNilChangeAmountOfPaymentOK2ResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilChangeAmountOfPaymentOK2ResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ChangeAmountOfPaymentOK2ResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilChangeAmountOfPaymentOK2ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilChangeAmountOfPaymentOK2ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID as json.
func (o OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID from json.
func (o *OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ContractsRetrievingResponseSalesDepositStatusCode as json.
func (o OptNilContractsRetrievingResponseSalesDepositStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes ContractsRetrievingResponseSalesDepositStatusCode from json.
func (o *OptNilContractsRetrievingResponseSalesDepositStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilContractsRetrievingResponseSalesDepositStatusCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ContractsRetrievingResponseSalesDepositStatusCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilContractsRetrievingResponseSalesDepositStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilContractsRetrievingResponseSalesDepositStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilContractsRetrievingResponseShopType as json.
func (o OptNilContractsRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilContractsRetrievingResponseShopType from json.
func (o *OptNilContractsRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilContractsRetrievingResponseShopType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilContractsRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilContractsRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Brand as json.
func (o OptNilCreatePaymentOK0Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0Brand from json.
func (o *OptNilCreatePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK0Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK0Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0PayTimes as json.
func (o OptNilCreatePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0PayTimes from json.
func (o *OptNilCreatePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK0Tds2Status as json.
func (o OptNilCreatePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK0Tds2Status from json.
func (o *OptNilCreatePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK0Tds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK0Tds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCreatePaymentOK0Tds2Type as json.
func (o OptNilCreatePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCreatePaymentOK0Tds2Type from json.
func (o *OptNilCreatePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCreatePaymentOK0TdsType as json.
func (o OptNilCreatePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCreatePaymentOK0TdsType from json.
func (o *OptNilCreatePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1Brand as json.
func (o OptNilCreatePaymentOK1Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1Brand from json.
func (o *OptNilCreatePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK1Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK1Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK1PayTimes as json.
func (o OptNilCreatePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK1PayTimes from json.
func (o *OptNilCreatePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK1PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK1PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2BarcodeFormat as json.
func (o OptNilCreatePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2BarcodeFormat from json.
func (o *OptNilCreatePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK2BarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK2BarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK2KonbiniCode as json.
func (o OptNilCreatePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK2KonbiniCode from json.
func (o *OptNilCreatePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK2KonbiniCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK2KonbiniCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK3RedirectType as json.
func (o OptNilCreatePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK3RedirectType from json.
func (o *OptNilCreatePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK3RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK3RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CreatePaymentOK4ResultCode as json.
func (o OptNilCreatePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CreatePaymentOK4ResultCode from json.
func (o *OptNilCreatePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentOK4ResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CreatePaymentOK4ResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCreatePaymentReq0Tds2Type as json.
func (o OptNilCreatePaymentReq0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCreatePaymentReq0Tds2Type from json.
func (o *OptNilCreatePaymentReq0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentReq0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentReq0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentReq0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCreatePaymentReq0TdsType as json.
func (o OptNilCreatePaymentReq0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCreatePaymentReq0TdsType from json.
func (o *OptNilCreatePaymentReq0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCreatePaymentReq0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCreatePaymentReq0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCreatePaymentReq0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCardRegistration as json.
func (o OptNilCustomerCardRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCardRegistration from json.
func (o *OptNilCustomerCardRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerCardRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerCardRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCreatingResponseCardRegistration as json.
func (o OptNilCustomerCreatingResponseCardRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCreatingResponseCardRegistration from json.
func (o *OptNilCustomerCreatingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerCreatingResponseCardRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerCreatingResponseCardRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerCreatingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerCreatingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerCreatingResponseDirectdebitRegistration as json.
func (o OptNilCustomerCreatingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerCreatingResponseDirectdebitRegistration from json.
func (o *OptNilCustomerCreatingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerCreatingResponseDirectdebitRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerCreatingResponseDirectdebitRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerCreatingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerCreatingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerDirectdebitRegistration as json.
func (o OptNilCustomerDirectdebitRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerDirectdebitRegistration from json.
func (o *OptNilCustomerDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerDirectdebitRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerDirectdebitRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestCard as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingRequestCard from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2ShipInd from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTds2Type as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTds2Type from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestCardTdsType as json.
func (o OptNilCustomerPaymentMethodCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestCardTdsType from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestCardTdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingRequestDirectdebit as json.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingRequestDirectdebit from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingRequestDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType as json.
func (o OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilCustomerPaymentMethodCreatingRequestDirectdebitAccountType from json.
func (o *OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingRequestDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseCard as json.
func (o OptNilCustomerPaymentMethodCreatingResponseCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingResponseCard from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebit as json.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebit from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebitAccountType as json.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitAccountType from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseDirectdebitAccountType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebitBankType as json.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitBankType from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseDirectdebitBankType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication as json.
func (o OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag as json.
func (o OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag from json.
func (o *OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseCard as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodRetrievingResponseCard from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebit as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebit from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebitAccountType as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitAccountType from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseDirectdebitAccountType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebitBankType as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitBankType from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseDirectdebitBankType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag as json.
func (o OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag from json.
func (o *OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerRetrievingResponseCardRegistration as json.
func (o OptNilCustomerRetrievingResponseCardRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerRetrievingResponseCardRegistration from json.
func (o *OptNilCustomerRetrievingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerRetrievingResponseCardRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerRetrievingResponseCardRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerRetrievingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerRetrievingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerRetrievingResponseDirectdebitRegistration as json.
func (o OptNilCustomerRetrievingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerRetrievingResponseDirectdebitRegistration from json.
func (o *OptNilCustomerRetrievingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerRetrievingResponseDirectdebitRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerRetrievingResponseDirectdebitRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerRetrievingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerRetrievingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerUpdatingResponseCardRegistration as json.
func (o OptNilCustomerUpdatingResponseCardRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerUpdatingResponseCardRegistration from json.
func (o *OptNilCustomerUpdatingResponseCardRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerUpdatingResponseCardRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerUpdatingResponseCardRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerUpdatingResponseCardRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerUpdatingResponseCardRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes CustomerUpdatingResponseDirectdebitRegistration as json.
func (o OptNilCustomerUpdatingResponseDirectdebitRegistration) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes CustomerUpdatingResponseDirectdebitRegistration from json.
func (o *OptNilCustomerUpdatingResponseDirectdebitRegistration) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilCustomerUpdatingResponseDirectdebitRegistration to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v CustomerUpdatingResponseDirectdebitRegistration
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilCustomerUpdatingResponseDirectdebitRegistration) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilCustomerUpdatingResponseDirectdebitRegistration) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitApplicationType as json.
func (o OptNilDirectDebitApplicationType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitApplicationType from json.
func (o *OptNilDirectDebitApplicationType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDirectDebitApplicationType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DirectDebitApplicationType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDirectDebitApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDirectDebitApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DirectDebitLastResultCode as json.
func (o OptNilDirectDebitLastResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes DirectDebitLastResultCode from json.
func (o *OptNilDirectDebitLastResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDirectDebitLastResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v DirectDebitLastResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDirectDebitLastResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDirectDebitLastResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExaminationInfoRetrievingResponseShopType as json.
func (o OptNilExaminationInfoRetrievingResponseShopType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExaminationInfoRetrievingResponseShopType from json.
func (o *OptNilExaminationInfoRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoRetrievingResponseShopType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExaminationInfoUpdatingResponseShopType as json.
func (o OptNilExaminationInfoUpdatingResponseShopType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExaminationInfoUpdatingResponseShopType from json.
func (o *OptNilExaminationInfoUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoUpdatingResponseShopType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo as json.
func (o OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo from json.
func (o *OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo as json.
func (o OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo from json.
func (o *OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo as json.
func (o OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo from json.
func (o *OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo as json.
func (o OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo from json.
func (o *OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo as json.
func (o OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo from json.
func (o *OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo as json.
func (o OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo from json.
func (o *OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKBrand as json.
func (o OptNilExecutePaymentAfter3DSecureOKBrand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKBrand from json.
func (o *OptNilExecutePaymentAfter3DSecureOKBrand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentAfter3DSecureOKBrand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentAfter3DSecureOKBrand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentAfter3DSecureOKBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentAfter3DSecureOKBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKPayTimes as json.
func (o OptNilExecutePaymentAfter3DSecureOKPayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKPayTimes from json.
func (o *OptNilExecutePaymentAfter3DSecureOKPayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentAfter3DSecureOKPayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentAfter3DSecureOKPayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentAfter3DSecureOKPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentAfter3DSecureOKPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentAfter3DSecureOKTds2Status as json.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentAfter3DSecureOKTds2Status from json.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentAfter3DSecureOKTds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentAfter3DSecureOKTds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentAfter3DSecureOKTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentAfter3DSecureOKTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentAfter3DSecureOKTds2Type as json.
func (o OptNilExecutePaymentAfter3DSecureOKTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentAfter3DSecureOKTds2Type from json.
func (o *OptNilExecutePaymentAfter3DSecureOKTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentAfter3DSecureOKTds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentAfter3DSecureOKTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentAfter3DSecureOKTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentAfter3DSecureOKTdsType as json.
func (o OptNilExecutePaymentAfter3DSecureOKTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentAfter3DSecureOKTdsType from json.
func (o *OptNilExecutePaymentAfter3DSecureOKTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentAfter3DSecureOKTdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentAfter3DSecureOKTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentAfter3DSecureOKTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Brand as json.
func (o OptNilExecutePaymentOK0Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0Brand from json.
func (o *OptNilExecutePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK0Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK0Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0PayTimes as json.
func (o OptNilExecutePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0PayTimes from json.
func (o *OptNilExecutePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK0Tds2Status as json.
func (o OptNilExecutePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK0Tds2Status from json.
func (o *OptNilExecutePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK0Tds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK0Tds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentOK0Tds2Type as json.
func (o OptNilExecutePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentOK0Tds2Type from json.
func (o *OptNilExecutePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentOK0TdsType as json.
func (o OptNilExecutePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentOK0TdsType from json.
func (o *OptNilExecutePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1Brand as json.
func (o OptNilExecutePaymentOK1Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1Brand from json.
func (o *OptNilExecutePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK1Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK1Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK1PayTimes as json.
func (o OptNilExecutePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK1PayTimes from json.
func (o *OptNilExecutePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK1PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK1PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2BarcodeFormat as json.
func (o OptNilExecutePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2BarcodeFormat from json.
func (o *OptNilExecutePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK2BarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK2BarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK2KonbiniCode as json.
func (o OptNilExecutePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK2KonbiniCode from json.
func (o *OptNilExecutePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK2KonbiniCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK2KonbiniCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK3RedirectType as json.
func (o OptNilExecutePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK3RedirectType from json.
func (o *OptNilExecutePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK3RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK3RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentOK4ResultCode as json.
func (o OptNilExecutePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentOK4ResultCode from json.
func (o *OptNilExecutePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentOK4ResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentOK4ResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ExecutePaymentReq0PayTimes as json.
func (o OptNilExecutePaymentReq0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ExecutePaymentReq0PayTimes from json.
func (o *OptNilExecutePaymentReq0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ExecutePaymentReq0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2AddrMatch as json.
func (o OptNilExecutePaymentReq0Tds2AddrMatch) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2AddrMatch from json.
func (o *OptNilExecutePaymentReq0Tds2AddrMatch) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2AddrMatch to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2DeliveryTimeframe as json.
func (o OptNilExecutePaymentReq0Tds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2DeliveryTimeframe from json.
func (o *OptNilExecutePaymentReq0Tds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2DeliveryTimeframe to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2PreOrderPurchaseInd as json.
func (o OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2PreOrderPurchaseInd from json.
func (o *OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2ReorderItemsInd as json.
func (o OptNilExecutePaymentReq0Tds2ReorderItemsInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2ReorderItemsInd from json.
func (o *OptNilExecutePaymentReq0Tds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2ReorderItemsInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2ShipInd as json.
func (o OptNilExecutePaymentReq0Tds2ShipInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2ShipInd from json.
func (o *OptNilExecutePaymentReq0Tds2ShipInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2ShipInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2ShipNameInd as json.
func (o OptNilExecutePaymentReq0Tds2ShipNameInd) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2ShipNameInd from json.
func (o *OptNilExecutePaymentReq0Tds2ShipNameInd) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2ShipNameInd to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2SuspiciousAccActivity as json.
func (o OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2SuspiciousAccActivity from json.
func (o *OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2SuspiciousAccActivity to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod as json.
func (o OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilExecutePaymentReq0Tds2ThreeDsReqAuthMethod from json.
func (o *OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilExecutePaymentReq0Tds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptNilFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptNilFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFloat64 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v float64
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKBarcodeFormat as json.
func (o OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKBarcodeFormat from json.
func (o *OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGenerateBarcodeOfPaymentOKBarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GenerateBarcodeOfPaymentOKBarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGenerateBarcodeOfPaymentOKBarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes GenerateBarcodeOfPaymentOKKonbiniCode as json.
func (o OptNilGenerateBarcodeOfPaymentOKKonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes GenerateBarcodeOfPaymentOKKonbiniCode from json.
func (o *OptNilGenerateBarcodeOfPaymentOKKonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilGenerateBarcodeOfPaymentOKKonbiniCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v GenerateBarcodeOfPaymentOKKonbiniCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilGenerateBarcodeOfPaymentOKKonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilGenerateBarcodeOfPaymentOKKonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int as json.
func (o OptNilInt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes int from json.
func (o *OptNilInt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int()
	if err != nil {
		return err
	}
	o.Value = int(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptNilInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptNilInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilInt32 to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v int32
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCard as json.
func (o OptNilPaymentMethodCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodCard from json.
func (o *OptNilPaymentMethodCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebit as json.
func (o OptNilPaymentMethodDirectdebit) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodDirectdebit from json.
func (o *OptNilPaymentMethodDirectdebit) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebit to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebit
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitAccountType as json.
func (o OptNilPaymentMethodDirectdebitAccountType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDirectdebitAccountType from json.
func (o *OptNilPaymentMethodDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitAccountType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitAccountType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitBankType as json.
func (o OptNilPaymentMethodDirectdebitBankType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDirectdebitBankType from json.
func (o *OptNilPaymentMethodDirectdebitBankType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitBankType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitBankType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitPaperApplication as json.
func (o OptNilPaymentMethodDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentMethodDirectdebitPaperApplication from json.
func (o *OptNilPaymentMethodDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodDirectdebitPaperApplication to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodDirectdebitPaperApplication
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodRedirectURLAccessedFlag as json.
func (o OptNilPaymentMethodRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodRedirectURLAccessedFlag from json.
func (o *OptNilPaymentMethodRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentMethodRedirectURLAccessedFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentMethodRedirectURLAccessedFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentMethodRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentMethodRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCard as json.
func (o OptNilPaymentSessionCreatingRequestCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestCard from json.
func (o *OptNilPaymentSessionCreatingRequestCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestCard to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestCard
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilPaymentSessionCreatingRequestCardTds2Type as json.
func (o OptNilPaymentSessionCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilPaymentSessionCreatingRequestCardTds2Type from json.
func (o *OptNilPaymentSessionCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestCardTds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilPaymentSessionCreatingRequestCardTdsType as json.
func (o OptNilPaymentSessionCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilPaymentSessionCreatingRequestCardTdsType from json.
func (o *OptNilPaymentSessionCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestCardTdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestGuideMailSendFlag as json.
func (o OptNilPaymentSessionCreatingRequestGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestGuideMailSendFlag from json.
func (o *OptNilPaymentSessionCreatingRequestGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestGuideMailSendFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestGuideMailSendFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestKonbini as json.
func (o OptNilPaymentSessionCreatingRequestKonbini) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestKonbini from json.
func (o *OptNilPaymentSessionCreatingRequestKonbini) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestKonbini to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestKonbini
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestPaypay as json.
func (o OptNilPaymentSessionCreatingRequestPaypay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingRequestPaypay from json.
func (o *OptNilPaymentSessionCreatingRequestPaypay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestPaypay to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestPaypay
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestPaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestPaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestThanksMailSendFlag as json.
func (o OptNilPaymentSessionCreatingRequestThanksMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingRequestThanksMailSendFlag from json.
func (o *OptNilPaymentSessionCreatingRequestThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestThanksMailSendFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingRequestThanksMailSendFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []PaymentSessionCreatingRequestTransactionPayTypeItem as json.
func (o OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []PaymentSessionCreatingRequestTransactionPayTypeItem from json.
func (o *OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []PaymentSessionCreatingRequestTransactionPayTypeItem
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]PaymentSessionCreatingRequestTransactionPayTypeItem, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem PaymentSessionCreatingRequestTransactionPayTypeItem
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingRequestTransactionPayTypeItemArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponsePaypayJobCode as json.
func (o OptNilPaymentSessionCreatingResponsePaypayJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingResponsePaypayJobCode from json.
func (o *OptNilPaymentSessionCreatingResponsePaypayJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPaymentSessionCreatingResponsePaypayJobCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PaymentSessionCreatingResponsePaypayJobCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPaymentSessionCreatingResponsePaypayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPaymentSessionCreatingResponsePaypayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigPaypayContentCategoryType as json.
func (o OptNilPlatformRateConfigPaypayContentCategoryType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Int(int(o.Value))
}

// Decode decodes PlatformRateConfigPaypayContentCategoryType from json.
func (o *OptNilPlatformRateConfigPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformRateConfigPaypayContentCategoryType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformRateConfigPaypayContentCategoryType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformRateConfigPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformRateConfigPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseAPIKeyDisplayFlag as json.
func (o OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopRetrievingResponseAPIKeyDisplayFlag from json.
func (o *OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopRetrievingResponseAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseSharedCustomerFlag as json.
func (o OptNilPlatformShopRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopRetrievingResponseSharedCustomerFlag from json.
func (o *OptNilPlatformShopRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformShopRetrievingResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopRetrievingResponseSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformShopRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformShopRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseAPIKeyDisplayFlag as json.
func (o OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopUpdatingResponseAPIKeyDisplayFlag from json.
func (o *OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopUpdatingResponseAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseSharedCustomerFlag as json.
func (o OptNilPlatformShopUpdatingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformShopUpdatingResponseSharedCustomerFlag from json.
func (o *OptNilPlatformShopUpdatingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPlatformShopUpdatingResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v PlatformShopUpdatingResponseSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPlatformShopUpdatingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPlatformShopUpdatingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Brand as json.
func (o OptNilRetrievePaymentOK0Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0Brand from json.
func (o *OptNilRetrievePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK0Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK0Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0PayTimes as json.
func (o OptNilRetrievePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0PayTimes from json.
func (o *OptNilRetrievePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK0PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK0PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Tds2Status as json.
func (o OptNilRetrievePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0Tds2Status from json.
func (o *OptNilRetrievePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK0Tds2Status to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK0Tds2Status
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilRetrievePaymentOK0Tds2Type as json.
func (o OptNilRetrievePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilRetrievePaymentOK0Tds2Type from json.
func (o *OptNilRetrievePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK0Tds2Type to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NilRetrievePaymentOK0TdsType as json.
func (o OptNilRetrievePaymentOK0TdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NilRetrievePaymentOK0TdsType from json.
func (o *OptNilRetrievePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK0TdsType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Brand as json.
func (o OptNilRetrievePaymentOK1Brand) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1Brand from json.
func (o *OptNilRetrievePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK1Brand to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK1Brand
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1PayTimes as json.
func (o OptNilRetrievePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1PayTimes from json.
func (o *OptNilRetrievePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK1PayTimes to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK1PayTimes
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2BarcodeFormat as json.
func (o OptNilRetrievePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2BarcodeFormat from json.
func (o *OptNilRetrievePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK2BarcodeFormat to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK2BarcodeFormat
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2KonbiniCode as json.
func (o OptNilRetrievePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2KonbiniCode from json.
func (o *OptNilRetrievePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK2KonbiniCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK2KonbiniCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3RedirectType as json.
func (o OptNilRetrievePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK3RedirectType from json.
func (o *OptNilRetrievePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK3RedirectType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK3RedirectType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4ResultCode as json.
func (o OptNilRetrievePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK4ResultCode from json.
func (o *OptNilRetrievePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilRetrievePaymentOK4ResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v RetrievePaymentOK4ResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilRetrievePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilRetrievePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopAPIKeyDisplayFlag as json.
func (o OptNilShopAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopAPIKeyDisplayFlag from json.
func (o *OptNilShopAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopSharedCustomerFlag as json.
func (o OptNilShopSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ShopSharedCustomerFlag from json.
func (o *OptNilShopSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilShopSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ShopSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilShopSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilShopSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Type as json.
func (o OptNilTds2Type) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2Type from json.
func (o *OptNilTds2Type) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTds2Type to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v Tds2Type
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdsType as json.
func (o OptNilTdsType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TdsType from json.
func (o *OptNilTdsType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTdsType to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TdsType
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseAPIKeyDisplayFlag as json.
func (o OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopRetrievingResponseAPIKeyDisplayFlag from json.
func (o *OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopRetrievingResponseAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTenantShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseSharedCustomerFlag as json.
func (o OptNilTenantShopRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopRetrievingResponseSharedCustomerFlag from json.
func (o *OptNilTenantShopRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTenantShopRetrievingResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopRetrievingResponseSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTenantShopRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTenantShopRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseAPIKeyDisplayFlag as json.
func (o OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingResponseAPIKeyDisplayFlag from json.
func (o *OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopUpdatingResponseAPIKeyDisplayFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTenantShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseSharedCustomerFlag as json.
func (o OptNilTenantShopUpdatingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingResponseSharedCustomerFlag from json.
func (o *OptNilTenantShopUpdatingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilTenantShopUpdatingResponseSharedCustomerFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v TenantShopUpdatingResponseSharedCustomerFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilTenantShopUpdatingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilTenantShopUpdatingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitResultCode as json.
func (o OptNilWebhookEventPaymentDirectDebitResultCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentDirectDebitResultCode from json.
func (o *OptNilWebhookEventPaymentDirectDebitResultCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventPaymentDirectDebitResultCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventPaymentDirectDebitResultCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventPaymentDirectDebitResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventPaymentDirectDebitResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniCancelOverpaymentFlag as json.
func (o OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniCancelOverpaymentFlag from json.
func (o *OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventPaymentKonbiniCancelOverpaymentFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventPaymentKonbiniCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniKonbiniCode as json.
func (o OptNilWebhookEventPaymentKonbiniKonbiniCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniKonbiniCode from json.
func (o *OptNilWebhookEventPaymentKonbiniKonbiniCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventPaymentKonbiniKonbiniCode to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventPaymentKonbiniKonbiniCode
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventPaymentKonbiniKonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventPaymentKonbiniKonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniOverpaymentFlag as json.
func (o OptNilWebhookEventPaymentKonbiniOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniOverpaymentFlag from json.
func (o *OptNilWebhookEventPaymentKonbiniOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventPaymentKonbiniOverpaymentFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventPaymentKonbiniOverpaymentFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventPaymentKonbiniOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventPaymentKonbiniOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardDefaultCardFlag as json.
func (o OptNilWebhookEventSubscriptionCardDefaultCardFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionCardDefaultCardFlag from json.
func (o *OptNilWebhookEventSubscriptionCardDefaultCardFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventSubscriptionCardDefaultCardFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventSubscriptionCardDefaultCardFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventSubscriptionCardDefaultCardFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventSubscriptionCardDefaultCardFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardEndMonthFlag as json.
func (o OptNilWebhookEventSubscriptionCardEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionCardEndMonthFlag from json.
func (o *OptNilWebhookEventSubscriptionCardEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventSubscriptionCardEndMonthFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventSubscriptionCardEndMonthFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventSubscriptionCardEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventSubscriptionCardEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitDefaultFlag as json.
func (o OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionDirectDebitDefaultFlag from json.
func (o *OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventSubscriptionDirectDebitDefaultFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventSubscriptionDirectDebitDefaultFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventSubscriptionDirectDebitDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitEndMonthFlag as json.
func (o OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionDirectDebitEndMonthFlag from json.
func (o *OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v WebhookEventSubscriptionDirectDebitEndMonthFlag
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilWebhookEventSubscriptionDirectDebitEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsRequestMultipartEnableImmediateUse as json.
func (o OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes POSTContractsExaminationsRequestMultipartEnableImmediateUse from json.
func (o *OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTContractsExaminationsRequestMultipartEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsResponseEnableImmediateUse as json.
func (o OptPOSTContractsExaminationsResponseEnableImmediateUse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes POSTContractsExaminationsResponseEnableImmediateUse from json.
func (o *OptPOSTContractsExaminationsResponseEnableImmediateUse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTContractsExaminationsResponseEnableImmediateUse to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTContractsExaminationsResponseEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTContractsExaminationsResponseEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTProviderReserveResponseReservationListItemProvider as json.
func (o OptPOSTProviderReserveResponseReservationListItemProvider) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTProviderReserveResponseReservationListItemProvider from json.
func (o *OptPOSTProviderReserveResponseReservationListItemProvider) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTProviderReserveResponseReservationListItemProvider to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTProviderReserveResponseReservationListItemProvider) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTProviderReserveResponseReservationListItemProvider) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserData as json.
func (o OptPOSTTenantEntriesResponseUserData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes POSTTenantEntriesResponseUserData from json.
func (o *OptPOSTTenantEntriesResponseUserData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataAccountStatus as json.
func (o OptPOSTTenantEntriesResponseUserDataAccountStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataAccountStatus from json.
func (o *OptPOSTTenantEntriesResponseUserDataAccountStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataAccountStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataAccountStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataAccountStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataInviteStatus as json.
func (o OptPOSTTenantEntriesResponseUserDataInviteStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataInviteStatus from json.
func (o *OptPOSTTenantEntriesResponseUserDataInviteStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataInviteStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataInviteStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataInviteStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataMailAuthStatus as json.
func (o OptPOSTTenantEntriesResponseUserDataMailAuthStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataMailAuthStatus from json.
func (o *OptPOSTTenantEntriesResponseUserDataMailAuthStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataMailAuthStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataMailAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataMailAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataPasswordLockStatus as json.
func (o OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataPasswordLockStatus from json.
func (o *OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataPasswordLockStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataPasswordLockStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataTwoFactorAuthStatus as json.
func (o OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataTwoFactorAuthStatus from json.
func (o *OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataTwoFactorAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataType as json.
func (o OptPOSTTenantEntriesResponseUserDataType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes POSTTenantEntriesResponseUserDataType from json.
func (o *OptPOSTTenantEntriesResponseUserDataType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPOSTTenantEntriesResponseUserDataType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPOSTTenantEntriesResponseUserDataType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPOSTTenantEntriesResponseUserDataType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponseDeleteFlag as json.
func (o OptPaymentBulkCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkCreatingResponseDeleteFlag from json.
func (o *OptPaymentBulkCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkCreatingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponsePayType as json.
func (o OptPaymentBulkCreatingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkCreatingResponsePayType from json.
func (o *OptPaymentBulkCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkCreatingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponseStatus as json.
func (o OptPaymentBulkCreatingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkCreatingResponseStatus from json.
func (o *OptPaymentBulkCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkCreatingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDeleteFlag as json.
func (o OptPaymentBulkDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDeleteFlag from json.
func (o *OptPaymentBulkDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDeletingResponseDeleteFlag as json.
func (o OptPaymentBulkDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDeletingResponseDeleteFlag from json.
func (o *OptPaymentBulkDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailJobCode as json.
func (o OptPaymentBulkDetailJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDetailJobCode from json.
func (o *OptPaymentBulkDetailJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDetailJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDetailJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDetailJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailMethod as json.
func (o OptPaymentBulkDetailMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDetailMethod from json.
func (o *OptPaymentBulkDetailMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDetailMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDetailMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDetailMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailPayTimes as json.
func (o OptPaymentBulkDetailPayTimes) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkDetailPayTimes from json.
func (o *OptPaymentBulkDetailPayTimes) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkDetailPayTimes to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkDetailPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkDetailPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPayType as json.
func (o OptPaymentBulkPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkPayType from json.
func (o *OptPaymentBulkPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkStatus as json.
func (o OptPaymentBulkStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentBulkStatus from json.
func (o *OptPaymentBulkStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentBulkStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentBulkStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentBulkStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDefaultFlag as json.
func (o OptPaymentMethodDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDefaultFlag from json.
func (o *OptPaymentMethodDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDeleteFlag as json.
func (o OptPaymentMethodDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodDeleteFlag from json.
func (o *OptPaymentMethodDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPayType as json.
func (o OptPaymentMethodPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodPayType from json.
func (o *OptPaymentMethodPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodStatus as json.
func (o OptPaymentMethodStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentMethodStatus from json.
func (o *OptPaymentMethodStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentMethodStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseCard as json.
func (o OptPaymentSessionCreatingResponseCard) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingResponseCard from json.
func (o *OptPaymentSessionCreatingResponseCard) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseCard to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseGuideMailSendFlag as json.
func (o OptPaymentSessionCreatingResponseGuideMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingResponseGuideMailSendFlag from json.
func (o *OptPaymentSessionCreatingResponseGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseGuideMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseKonbini as json.
func (o OptPaymentSessionCreatingResponseKonbini) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingResponseKonbini from json.
func (o *OptPaymentSessionCreatingResponseKonbini) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseKonbini to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag as json.
func (o OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag from json.
func (o *OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponsePaypay as json.
func (o OptPaymentSessionCreatingResponsePaypay) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingResponsePaypay from json.
func (o *OptPaymentSessionCreatingResponsePaypay) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponsePaypay to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponsePaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponsePaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseStatus as json.
func (o OptPaymentSessionCreatingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingResponseStatus from json.
func (o *OptPaymentSessionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseThanksMailSendFlag as json.
func (o OptPaymentSessionCreatingResponseThanksMailSendFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PaymentSessionCreatingResponseThanksMailSendFlag from json.
func (o *OptPaymentSessionCreatingResponseThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseThanksMailSendFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseTransaction as json.
func (o OptPaymentSessionCreatingResponseTransaction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PaymentSessionCreatingResponseTransaction from json.
func (o *OptPaymentSessionCreatingResponseTransaction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPaymentSessionCreatingResponseTransaction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPaymentSessionCreatingResponseTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPaymentSessionCreatingResponseTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingRequestIntervalCount as json.
func (o OptPlanCreatingRequestIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanCreatingRequestIntervalCount from json.
func (o *OptPlanCreatingRequestIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingRequestIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingRequestIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingRequestIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingRequestIntervalPattern as json.
func (o OptPlanCreatingRequestIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanCreatingRequestIntervalPattern from json.
func (o *OptPlanCreatingRequestIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingRequestIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingRequestIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingRequestIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseDeleteFlag as json.
func (o OptPlanCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanCreatingResponseDeleteFlag from json.
func (o *OptPlanCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseIntervalCount as json.
func (o OptPlanCreatingResponseIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanCreatingResponseIntervalCount from json.
func (o *OptPlanCreatingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingResponseIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseIntervalPattern as json.
func (o OptPlanCreatingResponseIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanCreatingResponseIntervalPattern from json.
func (o *OptPlanCreatingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingResponseIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseUsedFlag as json.
func (o OptPlanCreatingResponseUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanCreatingResponseUsedFlag from json.
func (o *OptPlanCreatingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanCreatingResponseUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanCreatingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanCreatingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeleteFlag as json.
func (o OptPlanDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanDeleteFlag from json.
func (o *OptPlanDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseDeleteFlag as json.
func (o OptPlanDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanDeletingResponseDeleteFlag from json.
func (o *OptPlanDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseIntervalCount as json.
func (o OptPlanDeletingResponseIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanDeletingResponseIntervalCount from json.
func (o *OptPlanDeletingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanDeletingResponseIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanDeletingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanDeletingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseIntervalPattern as json.
func (o OptPlanDeletingResponseIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanDeletingResponseIntervalPattern from json.
func (o *OptPlanDeletingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanDeletingResponseIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanDeletingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanDeletingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseUsedFlag as json.
func (o OptPlanDeletingResponseUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanDeletingResponseUsedFlag from json.
func (o *OptPlanDeletingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanDeletingResponseUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanDeletingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanDeletingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalCount as json.
func (o OptPlanIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanIntervalCount from json.
func (o *OptPlanIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalPattern as json.
func (o OptPlanIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanIntervalPattern from json.
func (o *OptPlanIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseDeleteFlag as json.
func (o OptPlanRetrievingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanRetrievingResponseDeleteFlag from json.
func (o *OptPlanRetrievingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanRetrievingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanRetrievingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanRetrievingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseIntervalCount as json.
func (o OptPlanRetrievingResponseIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanRetrievingResponseIntervalCount from json.
func (o *OptPlanRetrievingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanRetrievingResponseIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanRetrievingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanRetrievingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseIntervalPattern as json.
func (o OptPlanRetrievingResponseIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanRetrievingResponseIntervalPattern from json.
func (o *OptPlanRetrievingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanRetrievingResponseIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanRetrievingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanRetrievingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseUsedFlag as json.
func (o OptPlanRetrievingResponseUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanRetrievingResponseUsedFlag from json.
func (o *OptPlanRetrievingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanRetrievingResponseUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanRetrievingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanRetrievingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingRequestIntervalCount as json.
func (o OptPlanUpdatingRequestIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUpdatingRequestIntervalCount from json.
func (o *OptPlanUpdatingRequestIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingRequestIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingRequestIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingRequestIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingRequestIntervalPattern as json.
func (o OptPlanUpdatingRequestIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUpdatingRequestIntervalPattern from json.
func (o *OptPlanUpdatingRequestIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingRequestIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingRequestIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingRequestIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseDeleteFlag as json.
func (o OptPlanUpdatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUpdatingResponseDeleteFlag from json.
func (o *OptPlanUpdatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseIntervalCount as json.
func (o OptPlanUpdatingResponseIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes PlanUpdatingResponseIntervalCount from json.
func (o *OptPlanUpdatingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingResponseIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseIntervalPattern as json.
func (o OptPlanUpdatingResponseIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUpdatingResponseIntervalPattern from json.
func (o *OptPlanUpdatingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingResponseIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseUsedFlag as json.
func (o OptPlanUpdatingResponseUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUpdatingResponseUsedFlag from json.
func (o *OptPlanUpdatingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUpdatingResponseUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUpdatingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUpdatingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUsedFlag as json.
func (o OptPlanUsedFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlanUsedFlag from json.
func (o *OptPlanUsedFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlanUsedFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlanUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlanUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountRetrievingResponseDepositDestination as json.
func (o OptPlatformAccountRetrievingResponseDepositDestination) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes PlatformAccountRetrievingResponseDepositDestination from json.
func (o *OptPlatformAccountRetrievingResponseDepositDestination) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlatformAccountRetrievingResponseDepositDestination to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlatformAccountRetrievingResponseDepositDestination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlatformAccountRetrievingResponseDepositDestination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountRetrievingResponseDepositDestinationAccountKind as json.
func (o OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformAccountRetrievingResponseDepositDestinationAccountKind from json.
func (o *OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlatformAccountRetrievingResponseDepositDestinationAccountKind to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlatformAccountRetrievingResponseDepositDestinationAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigID as json.
func (o OptPlatformRateConfigID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes PlatformRateConfigID from json.
func (o *OptPlatformRateConfigID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptPlatformRateConfigID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptPlatformRateConfigID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptPlatformRateConfigID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSAuthorizingResponseTds2TransResult as json.
func (o OptR3DSAuthorizingResponseTds2TransResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DSAuthorizingResponseTds2TransResult from json.
func (o *OptR3DSAuthorizingResponseTds2TransResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DSAuthorizingResponseTds2TransResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DSAuthorizingResponseTds2TransResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DSAuthorizingResponseTds2TransResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSAuthorizingResponseTds2TransResultReason as json.
func (o OptR3DSAuthorizingResponseTds2TransResultReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DSAuthorizingResponseTds2TransResultReason from json.
func (o *OptR3DSAuthorizingResponseTds2TransResultReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DSAuthorizingResponseTds2TransResultReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DSAuthorizingResponseTds2TransResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DSAuthorizingResponseTds2TransResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSConfirmingResponseTds2TransResult as json.
func (o OptR3DSConfirmingResponseTds2TransResult) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DSConfirmingResponseTds2TransResult from json.
func (o *OptR3DSConfirmingResponseTds2TransResult) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DSConfirmingResponseTds2TransResult to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DSConfirmingResponseTds2TransResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DSConfirmingResponseTds2TransResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSConfirmingResponseTds2TransResultReason as json.
func (o OptR3DSConfirmingResponseTds2TransResultReason) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes R3DSConfirmingResponseTds2TransResultReason from json.
func (o *OptR3DSConfirmingResponseTds2TransResultReason) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptR3DSConfirmingResponseTds2TransResultReason to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptR3DSConfirmingResponseTds2TransResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptR3DSConfirmingResponseTds2TransResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0JobCode as json.
func (o OptRetrievePaymentOK0JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0JobCode from json.
func (o *OptRetrievePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK0JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Method as json.
func (o OptRetrievePaymentOK0Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0Method from json.
func (o *OptRetrievePaymentOK0Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK0Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0PayType as json.
func (o OptRetrievePaymentOK0PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0PayType from json.
func (o *OptRetrievePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK0PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Status as json.
func (o OptRetrievePaymentOK0Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK0Status from json.
func (o *OptRetrievePaymentOK0Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK0Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1JobCode as json.
func (o OptRetrievePaymentOK1JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1JobCode from json.
func (o *OptRetrievePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK1JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Method as json.
func (o OptRetrievePaymentOK1Method) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1Method from json.
func (o *OptRetrievePaymentOK1Method) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK1Method to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1PayType as json.
func (o OptRetrievePaymentOK1PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1PayType from json.
func (o *OptRetrievePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK1PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Status as json.
func (o OptRetrievePaymentOK1Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK1Status from json.
func (o *OptRetrievePaymentOK1Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK1Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2CancelOverpaymentFlag as json.
func (o OptRetrievePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2CancelOverpaymentFlag from json.
func (o *OptRetrievePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK2CancelOverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2OverpaymentFlag as json.
func (o OptRetrievePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2OverpaymentFlag from json.
func (o *OptRetrievePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK2OverpaymentFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2PayType as json.
func (o OptRetrievePaymentOK2PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2PayType from json.
func (o *OptRetrievePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK2PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2Result as json.
func (o OptRetrievePaymentOK2Result) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2Result from json.
func (o *OptRetrievePaymentOK2Result) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK2Result to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2Status as json.
func (o OptRetrievePaymentOK2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK2Status from json.
func (o *OptRetrievePaymentOK2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3JobCode as json.
func (o OptRetrievePaymentOK3JobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK3JobCode from json.
func (o *OptRetrievePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK3JobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3PayType as json.
func (o OptRetrievePaymentOK3PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK3PayType from json.
func (o *OptRetrievePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK3PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3Status as json.
func (o OptRetrievePaymentOK3Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK3Status from json.
func (o *OptRetrievePaymentOK3Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK3Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4PayType as json.
func (o OptRetrievePaymentOK4PayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK4PayType from json.
func (o *OptRetrievePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK4PayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4Status as json.
func (o OptRetrievePaymentOK4Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes RetrievePaymentOK4Status from json.
func (o *OptRetrievePaymentOK4Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRetrievePaymentOK4Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRetrievePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRetrievePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingRequestEndMonthFlag as json.
func (o OptSubscriptionCreatingRequestEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionCreatingRequestEndMonthFlag from json.
func (o *OptSubscriptionCreatingRequestEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionCreatingRequestEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionCreatingRequestEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionCreatingRequestEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponseEndMonthFlag as json.
func (o OptSubscriptionCreatingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionCreatingResponseEndMonthFlag from json.
func (o *OptSubscriptionCreatingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionCreatingResponseEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionCreatingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionCreatingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponsePayType as json.
func (o OptSubscriptionCreatingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionCreatingResponsePayType from json.
func (o *OptSubscriptionCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionCreatingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponseStatus as json.
func (o OptSubscriptionCreatingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionCreatingResponseStatus from json.
func (o *OptSubscriptionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionCreatingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionEndMonthFlag as json.
func (o OptSubscriptionEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionEndMonthFlag from json.
func (o *OptSubscriptionEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPayType as json.
func (o OptSubscriptionPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionPayType from json.
func (o *OptSubscriptionPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultIntervalCount as json.
func (o OptSubscriptionResultIntervalCount) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes SubscriptionResultIntervalCount from json.
func (o *OptSubscriptionResultIntervalCount) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionResultIntervalCount to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionResultIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionResultIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultIntervalPattern as json.
func (o OptSubscriptionResultIntervalPattern) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionResultIntervalPattern from json.
func (o *OptSubscriptionResultIntervalPattern) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionResultIntervalPattern to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionResultIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionResultIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultPayType as json.
func (o OptSubscriptionResultPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionResultPayType from json.
func (o *OptSubscriptionResultPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionResultPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionResultPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionResultPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultStatus as json.
func (o OptSubscriptionResultStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionResultStatus from json.
func (o *OptSubscriptionResultStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionResultStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionResultStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionResultStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponseEndMonthFlag as json.
func (o OptSubscriptionRetrievingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionRetrievingResponseEndMonthFlag from json.
func (o *OptSubscriptionRetrievingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionRetrievingResponseEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionRetrievingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionRetrievingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponsePayType as json.
func (o OptSubscriptionRetrievingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionRetrievingResponsePayType from json.
func (o *OptSubscriptionRetrievingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionRetrievingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionRetrievingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionRetrievingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponseStatus as json.
func (o OptSubscriptionRetrievingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionRetrievingResponseStatus from json.
func (o *OptSubscriptionRetrievingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionRetrievingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionRetrievingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionRetrievingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionStatus as json.
func (o OptSubscriptionStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionStatus from json.
func (o *OptSubscriptionStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponseEndMonthFlag as json.
func (o OptSubscriptionUnsubscribingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUnsubscribingResponseEndMonthFlag from json.
func (o *OptSubscriptionUnsubscribingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUnsubscribingResponseEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUnsubscribingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUnsubscribingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponsePayType as json.
func (o OptSubscriptionUnsubscribingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUnsubscribingResponsePayType from json.
func (o *OptSubscriptionUnsubscribingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUnsubscribingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUnsubscribingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUnsubscribingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponseStatus as json.
func (o OptSubscriptionUnsubscribingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUnsubscribingResponseStatus from json.
func (o *OptSubscriptionUnsubscribingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUnsubscribingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUnsubscribingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUnsubscribingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingRequestEndMonthFlag as json.
func (o OptSubscriptionUpdatingRequestEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUpdatingRequestEndMonthFlag from json.
func (o *OptSubscriptionUpdatingRequestEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUpdatingRequestEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUpdatingRequestEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUpdatingRequestEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponseEndMonthFlag as json.
func (o OptSubscriptionUpdatingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUpdatingResponseEndMonthFlag from json.
func (o *OptSubscriptionUpdatingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUpdatingResponseEndMonthFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUpdatingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUpdatingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponsePayType as json.
func (o OptSubscriptionUpdatingResponsePayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUpdatingResponsePayType from json.
func (o *OptSubscriptionUpdatingResponsePayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUpdatingResponsePayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUpdatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUpdatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponseStatus as json.
func (o OptSubscriptionUpdatingResponseStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes SubscriptionUpdatingResponseStatus from json.
func (o *OptSubscriptionUpdatingResponseStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSubscriptionUpdatingResponseStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSubscriptionUpdatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSubscriptionUpdatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdTenantName as json.
func (o OptTdTenantName) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes TdTenantName from json.
func (o *OptTdTenantName) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTdTenantName to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTdTenantName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTdTenantName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Status as json.
func (o OptTds2Status) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tds2Status from json.
func (o *OptTds2Status) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTds2Status to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestExaminationMasterID as json.
func (o OptTenantShopUpdatingRequestExaminationMasterID) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes TenantShopUpdatingRequestExaminationMasterID from json.
func (o *OptTenantShopUpdatingRequestExaminationMasterID) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTenantShopUpdatingRequestExaminationMasterID to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTenantShopUpdatingRequestExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTenantShopUpdatingRequestExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes url.URL as json.
func (o OptURI) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	json.EncodeURI(e, o.Value)
}

// Decode decodes url.URL from json.
func (o *OptURI) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptURI to nil")
	}
	o.Set = true
	v, err := json.DecodeURI(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptURI) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptURI) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardDefaultFlag as json.
func (o OptWebhookEventCardDefaultFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardDefaultFlag from json.
func (o *OptWebhookEventCardDefaultFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardDefaultFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardEvent as json.
func (o OptWebhookEventCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardEvent from json.
func (o *OptWebhookEventCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardPayType as json.
func (o OptWebhookEventCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardPayType from json.
func (o *OptWebhookEventCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardProcessType as json.
func (o OptWebhookEventCardProcessType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCardProcessType from json.
func (o *OptWebhookEventCardProcessType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCardProcessType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCardProcessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCardProcessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractBodyItemAcquirer as json.
func (o OptWebhookEventContractBodyItemAcquirer) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventContractBodyItemAcquirer from json.
func (o *OptWebhookEventContractBodyItemAcquirer) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventContractBodyItemAcquirer to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventContractBodyItemAcquirer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventContractBodyItemAcquirer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractBodyItemStatusCode as json.
func (o OptWebhookEventContractBodyItemStatusCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventContractBodyItemStatusCode from json.
func (o *OptWebhookEventContractBodyItemStatusCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventContractBodyItemStatusCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventContractBodyItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventContractBodyItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractEvent as json.
func (o OptWebhookEventContractEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventContractEvent from json.
func (o *OptWebhookEventContractEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventContractEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventContractEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventContractEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodEvent as json.
func (o OptWebhookEventCustomerPaymentMethodEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCustomerPaymentMethodEvent from json.
func (o *OptWebhookEventCustomerPaymentMethodEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCustomerPaymentMethodEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCustomerPaymentMethodEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCustomerPaymentMethodEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodPayType as json.
func (o OptWebhookEventCustomerPaymentMethodPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCustomerPaymentMethodPayType from json.
func (o *OptWebhookEventCustomerPaymentMethodPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCustomerPaymentMethodPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCustomerPaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCustomerPaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodStatus as json.
func (o OptWebhookEventCustomerPaymentMethodStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventCustomerPaymentMethodStatus from json.
func (o *OptWebhookEventCustomerPaymentMethodStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventCustomerPaymentMethodStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventCustomerPaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventCustomerPaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayCurrency as json.
func (o OptWebhookEventPaymentApplePayCurrency) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayCurrency from json.
func (o *OptWebhookEventPaymentApplePayCurrency) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayCurrency to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayCurrency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayCurrency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayEvent as json.
func (o OptWebhookEventPaymentApplePayEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayEvent from json.
func (o *OptWebhookEventPaymentApplePayEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayJobCode as json.
func (o OptWebhookEventPaymentApplePayJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayJobCode from json.
func (o *OptWebhookEventPaymentApplePayJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayMethod as json.
func (o OptWebhookEventPaymentApplePayMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayMethod from json.
func (o *OptWebhookEventPaymentApplePayMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayPayType as json.
func (o OptWebhookEventPaymentApplePayPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayPayType from json.
func (o *OptWebhookEventPaymentApplePayPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayStatus as json.
func (o OptWebhookEventPaymentApplePayStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentApplePayStatus from json.
func (o *OptWebhookEventPaymentApplePayStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentApplePayStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentApplePayStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentApplePayStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardEvent as json.
func (o OptWebhookEventPaymentBulkBatchCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkBatchCardEvent from json.
func (o *OptWebhookEventPaymentBulkBatchCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkBatchCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkBatchCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkBatchCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardPayType as json.
func (o OptWebhookEventPaymentBulkBatchCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkBatchCardPayType from json.
func (o *OptWebhookEventPaymentBulkBatchCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkBatchCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkBatchCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkBatchCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardStatus as json.
func (o OptWebhookEventPaymentBulkBatchCardStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkBatchCardStatus from json.
func (o *OptWebhookEventPaymentBulkBatchCardStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkBatchCardStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkBatchCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkBatchCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardEvent as json.
func (o OptWebhookEventPaymentBulkRegistCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkRegistCardEvent from json.
func (o *OptWebhookEventPaymentBulkRegistCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkRegistCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkRegistCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkRegistCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardPayType as json.
func (o OptWebhookEventPaymentBulkRegistCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkRegistCardPayType from json.
func (o *OptWebhookEventPaymentBulkRegistCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkRegistCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkRegistCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkRegistCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardStatus as json.
func (o OptWebhookEventPaymentBulkRegistCardStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentBulkRegistCardStatus from json.
func (o *OptWebhookEventPaymentBulkRegistCardStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentBulkRegistCardStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentBulkRegistCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentBulkRegistCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardCurrency as json.
func (o OptWebhookEventPaymentCardCurrency) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardCurrency from json.
func (o *OptWebhookEventPaymentCardCurrency) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardCurrency to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardCurrency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardCurrency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardEvent as json.
func (o OptWebhookEventPaymentCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardEvent from json.
func (o *OptWebhookEventPaymentCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardJobCode as json.
func (o OptWebhookEventPaymentCardJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardJobCode from json.
func (o *OptWebhookEventPaymentCardJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardMethod as json.
func (o OptWebhookEventPaymentCardMethod) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardMethod from json.
func (o *OptWebhookEventPaymentCardMethod) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardMethod to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardPayType as json.
func (o OptWebhookEventPaymentCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardPayType from json.
func (o *OptWebhookEventPaymentCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardStatus as json.
func (o OptWebhookEventPaymentCardStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentCardStatus from json.
func (o *OptWebhookEventPaymentCardStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentCardStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitEvent as json.
func (o OptWebhookEventPaymentDirectDebitEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentDirectDebitEvent from json.
func (o *OptWebhookEventPaymentDirectDebitEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentDirectDebitEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitPayType as json.
func (o OptWebhookEventPaymentDirectDebitPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentDirectDebitPayType from json.
func (o *OptWebhookEventPaymentDirectDebitPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentDirectDebitPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitStatus as json.
func (o OptWebhookEventPaymentDirectDebitStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentDirectDebitStatus from json.
func (o *OptWebhookEventPaymentDirectDebitStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentDirectDebitStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentDirectDebitStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentDirectDebitStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniEvent as json.
func (o OptWebhookEventPaymentKonbiniEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniEvent from json.
func (o *OptWebhookEventPaymentKonbiniEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentKonbiniEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentKonbiniEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentKonbiniEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniPayType as json.
func (o OptWebhookEventPaymentKonbiniPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniPayType from json.
func (o *OptWebhookEventPaymentKonbiniPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentKonbiniPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentKonbiniPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentKonbiniPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniStatus as json.
func (o OptWebhookEventPaymentKonbiniStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentKonbiniStatus from json.
func (o *OptWebhookEventPaymentKonbiniStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentKonbiniStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentKonbiniStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentKonbiniStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayEvent as json.
func (o OptWebhookEventPaymentPayPayEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentPayPayEvent from json.
func (o *OptWebhookEventPaymentPayPayEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentPayPayEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentPayPayEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentPayPayEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayJobCode as json.
func (o OptWebhookEventPaymentPayPayJobCode) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentPayPayJobCode from json.
func (o *OptWebhookEventPaymentPayPayJobCode) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentPayPayJobCode to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentPayPayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentPayPayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayPayType as json.
func (o OptWebhookEventPaymentPayPayPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentPayPayPayType from json.
func (o *OptWebhookEventPaymentPayPayPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentPayPayPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentPayPayPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentPayPayPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayStatus as json.
func (o OptWebhookEventPaymentPayPayStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventPaymentPayPayStatus from json.
func (o *OptWebhookEventPaymentPayPayStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventPaymentPayPayStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventPaymentPayPayStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventPaymentPayPayStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchCardEvent as json.
func (o OptWebhookEventRecurringBatchCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventRecurringBatchCardEvent from json.
func (o *OptWebhookEventRecurringBatchCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventRecurringBatchCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventRecurringBatchCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventRecurringBatchCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchCardPayType as json.
func (o OptWebhookEventRecurringBatchCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventRecurringBatchCardPayType from json.
func (o *OptWebhookEventRecurringBatchCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventRecurringBatchCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventRecurringBatchCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventRecurringBatchCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchDirectDebitEvent as json.
func (o OptWebhookEventRecurringBatchDirectDebitEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventRecurringBatchDirectDebitEvent from json.
func (o *OptWebhookEventRecurringBatchDirectDebitEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventRecurringBatchDirectDebitEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventRecurringBatchDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventRecurringBatchDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchDirectDebitPayType as json.
func (o OptWebhookEventRecurringBatchDirectDebitPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventRecurringBatchDirectDebitPayType from json.
func (o *OptWebhookEventRecurringBatchDirectDebitPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventRecurringBatchDirectDebitPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventRecurringBatchDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventRecurringBatchDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardEvent as json.
func (o OptWebhookEventSubscriptionCardEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionCardEvent from json.
func (o *OptWebhookEventSubscriptionCardEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionCardEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardPayType as json.
func (o OptWebhookEventSubscriptionCardPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionCardPayType from json.
func (o *OptWebhookEventSubscriptionCardPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionCardPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardStatus as json.
func (o OptWebhookEventSubscriptionCardStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionCardStatus from json.
func (o *OptWebhookEventSubscriptionCardStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionCardStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitEvent as json.
func (o OptWebhookEventSubscriptionDirectDebitEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionDirectDebitEvent from json.
func (o *OptWebhookEventSubscriptionDirectDebitEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionDirectDebitEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitPayType as json.
func (o OptWebhookEventSubscriptionDirectDebitPayType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionDirectDebitPayType from json.
func (o *OptWebhookEventSubscriptionDirectDebitPayType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionDirectDebitPayType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitStatus as json.
func (o OptWebhookEventSubscriptionDirectDebitStatus) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookEventSubscriptionDirectDebitStatus from json.
func (o *OptWebhookEventSubscriptionDirectDebitStatus) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookEventSubscriptionDirectDebitStatus to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookEventSubscriptionDirectDebitStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookEventSubscriptionDirectDebitStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookResponseReceive as json.
func (o OptWebhookResponseReceive) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookResponseReceive from json.
func (o *OptWebhookResponseReceive) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookResponseReceive to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookResponseReceive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookResponseReceive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingCreatingResponseEvent as json.
func (o OptWebhookSettingCreatingResponseEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingCreatingResponseEvent from json.
func (o *OptWebhookSettingCreatingResponseEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingCreatingResponseEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingCreatingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingCreatingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingDeletingResponseDeleteFlag as json.
func (o OptWebhookSettingDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingDeletingResponseDeleteFlag from json.
func (o *OptWebhookSettingDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingDeletingResponseDeleteFlag to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingEvent as json.
func (o OptWebhookSettingEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingEvent from json.
func (o *OptWebhookSettingEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingRetrievingResponseEvent as json.
func (o OptWebhookSettingRetrievingResponseEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingRetrievingResponseEvent from json.
func (o *OptWebhookSettingRetrievingResponseEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingRetrievingResponseEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingRetrievingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingRetrievingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingUpdatingRequestEvent as json.
func (o OptWebhookSettingUpdatingRequestEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingUpdatingRequestEvent from json.
func (o *OptWebhookSettingUpdatingRequestEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingUpdatingRequestEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingUpdatingRequestEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingUpdatingRequestEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingUpdatingResponseEvent as json.
func (o OptWebhookSettingUpdatingResponseEvent) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes WebhookSettingUpdatingResponseEvent from json.
func (o *OptWebhookSettingUpdatingResponseEvent) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptWebhookSettingUpdatingResponseEvent to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptWebhookSettingUpdatingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptWebhookSettingUpdatingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsRequestMultipartEnableImmediateUse as json.
func (s POSTContractsExaminationsRequestMultipartEnableImmediateUse) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes POSTContractsExaminationsRequestMultipartEnableImmediateUse from json.
func (s *POSTContractsExaminationsRequestMultipartEnableImmediateUse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTContractsExaminationsRequestMultipartEnableImmediateUse to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = POSTContractsExaminationsRequestMultipartEnableImmediateUse(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTContractsExaminationsRequestMultipartEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTContractsExaminationsRequestMultipartEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTContractsExaminationsResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTContractsExaminationsResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.EnableImmediateUse.Set {
			e.FieldStart("enable_immediate_use")
			s.EnableImmediateUse.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTContractsExaminationsResponse = [2]string{
	0: "shop_id",
	1: "enable_immediate_use",
}

// Decode decodes POSTContractsExaminationsResponse from json.
func (s *POSTContractsExaminationsResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTContractsExaminationsResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "enable_immediate_use":
			if err := func() error {
				s.EnableImmediateUse.Reset()
				if err := s.EnableImmediateUse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enable_immediate_use\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTContractsExaminationsResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTContractsExaminationsResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTContractsExaminationsResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTContractsExaminationsResponseEnableImmediateUse as json.
func (s POSTContractsExaminationsResponseEnableImmediateUse) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes POSTContractsExaminationsResponseEnableImmediateUse from json.
func (s *POSTContractsExaminationsResponseEnableImmediateUse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTContractsExaminationsResponseEnableImmediateUse to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = POSTContractsExaminationsResponseEnableImmediateUse(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTContractsExaminationsResponseEnableImmediateUse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTContractsExaminationsResponseEnableImmediateUse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTJoinTenantsRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTJoinTenantsRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		e.FieldStart("password")
		e.Str(s.Password)
	}
	{
		e.FieldStart("tenant_url_id")
		e.Str(s.TenantURLID)
	}
}

var jsonFieldsNameOfPOSTJoinTenantsRequest = [3]string{
	0: "email",
	1: "password",
	2: "tenant_url_id",
}

// Decode decodes POSTJoinTenantsRequest from json.
func (s *POSTJoinTenantsRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "password":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Password = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "tenant_url_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.TenantURLID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_url_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTJoinTenantsRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPOSTJoinTenantsRequest) {
					name = jsonFieldsNameOfPOSTJoinTenantsRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTJoinTenantsRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTJoinTenantsResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTJoinTenantsResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName != nil {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana != nil {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName != nil {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag != nil {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID != nil {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.SendMailAddress != nil {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress != nil {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays != nil {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion != nil {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag != nil {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTJoinTenantsResponse = [15]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "send_mail_address",
	9:  "shop_mail_address",
	10: "log_keep_days",
	11: "api_version",
	12: "api_key_display_flag",
	13: "created",
	14: "updated",
}

// Decode decodes POSTJoinTenantsResponse from json.
func (s *POSTJoinTenantsResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopNameKana = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilPOSTJoinTenantsResponseShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag = nil
				var elem NilPOSTJoinTenantsResponseSharedCustomerFlag
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SharedCustomerFlag = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CustomerGroupID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SendMailAddress = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopMailAddress = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.LogKeepDays = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.APIVersion = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag = nil
				var elem NilPOSTJoinTenantsResponseAPIKeyDisplayFlag
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.APIKeyDisplayFlag = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTJoinTenantsResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTJoinTenantsResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseAPIKeyDisplayFlag as json.
func (s POSTJoinTenantsResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTJoinTenantsResponseAPIKeyDisplayFlag from json.
func (s *POSTJoinTenantsResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsResponseAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTJoinTenantsResponseAPIKeyDisplayFlag(v) {
	case POSTJoinTenantsResponseAPIKeyDisplayFlag0:
		*s = POSTJoinTenantsResponseAPIKeyDisplayFlag0
	case POSTJoinTenantsResponseAPIKeyDisplayFlag1:
		*s = POSTJoinTenantsResponseAPIKeyDisplayFlag1
	default:
		*s = POSTJoinTenantsResponseAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTJoinTenantsResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseSharedCustomerFlag as json.
func (s POSTJoinTenantsResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTJoinTenantsResponseSharedCustomerFlag from json.
func (s *POSTJoinTenantsResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTJoinTenantsResponseSharedCustomerFlag(v) {
	case POSTJoinTenantsResponseSharedCustomerFlag0:
		*s = POSTJoinTenantsResponseSharedCustomerFlag0
	case POSTJoinTenantsResponseSharedCustomerFlag1:
		*s = POSTJoinTenantsResponseSharedCustomerFlag1
	default:
		*s = POSTJoinTenantsResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTJoinTenantsResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTJoinTenantsResponseShopType as json.
func (s POSTJoinTenantsResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTJoinTenantsResponseShopType from json.
func (s *POSTJoinTenantsResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTJoinTenantsResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTJoinTenantsResponseShopType(v) {
	case POSTJoinTenantsResponseShopTypePlatform:
		*s = POSTJoinTenantsResponseShopTypePlatform
	case POSTJoinTenantsResponseShopTypeTenant:
		*s = POSTJoinTenantsResponseShopTypeTenant
	default:
		*s = POSTJoinTenantsResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTJoinTenantsResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTJoinTenantsResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTProviderReserveRequestMultipartProviderItem as json.
func (s POSTProviderReserveRequestMultipartProviderItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTProviderReserveRequestMultipartProviderItem from json.
func (s *POSTProviderReserveRequestMultipartProviderItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserveRequestMultipartProviderItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTProviderReserveRequestMultipartProviderItem(v) {
	case POSTProviderReserveRequestMultipartProviderItemPAYSLE:
		*s = POSTProviderReserveRequestMultipartProviderItemPAYSLE
	case POSTProviderReserveRequestMultipartProviderItemPAYPAY:
		*s = POSTProviderReserveRequestMultipartProviderItemPAYPAY
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC:
		*s = POSTProviderReserveRequestMultipartProviderItemAPPLEPAYUC
	case POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB:
		*s = POSTProviderReserveRequestMultipartProviderItemAPPLEPAYJCB
	case POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT:
		*s = POSTProviderReserveRequestMultipartProviderItemDIRECTDEBIT
	case POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT:
		*s = POSTProviderReserveRequestMultipartProviderItemVIRTUALACCOUNT
	default:
		*s = POSTProviderReserveRequestMultipartProviderItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTProviderReserveRequestMultipartProviderItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserveRequestMultipartProviderItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTProviderReserveResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTProviderReserveResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationList != nil {
			e.FieldStart("reservation_list")
			e.ArrStart()
			for _, elem := range s.ReservationList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPOSTProviderReserveResponse = [1]string{
	0: "reservation_list",
}

// Decode decodes POSTProviderReserveResponse from json.
func (s *POSTProviderReserveResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserveResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservation_list":
			if err := func() error {
				s.ReservationList = make([]POSTProviderReserveResponseReservationListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem POSTProviderReserveResponseReservationListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ReservationList = append(s.ReservationList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservation_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTProviderReserveResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTProviderReserveResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserveResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTProviderReserveResponseReservationListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTProviderReserveResponseReservationListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ReservationID.Set {
			e.FieldStart("reservation_id")
			s.ReservationID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Provider.Set {
			e.FieldStart("provider")
			s.Provider.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTProviderReserveResponseReservationListItem = [3]string{
	0: "reservation_id",
	1: "shop_id",
	2: "provider",
}

// Decode decodes POSTProviderReserveResponseReservationListItem from json.
func (s *POSTProviderReserveResponseReservationListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserveResponseReservationListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "reservation_id":
			if err := func() error {
				s.ReservationID.Reset()
				if err := s.ReservationID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reservation_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "provider":
			if err := func() error {
				s.Provider.Reset()
				if err := s.Provider.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"provider\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTProviderReserveResponseReservationListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTProviderReserveResponseReservationListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserveResponseReservationListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTProviderReserveResponseReservationListItemProvider as json.
func (s POSTProviderReserveResponseReservationListItemProvider) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTProviderReserveResponseReservationListItemProvider from json.
func (s *POSTProviderReserveResponseReservationListItemProvider) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTProviderReserveResponseReservationListItemProvider to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTProviderReserveResponseReservationListItemProvider(v) {
	case POSTProviderReserveResponseReservationListItemProviderPAYSLE:
		*s = POSTProviderReserveResponseReservationListItemProviderPAYSLE
	case POSTProviderReserveResponseReservationListItemProviderPAYPAY:
		*s = POSTProviderReserveResponseReservationListItemProviderPAYPAY
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC:
		*s = POSTProviderReserveResponseReservationListItemProviderAPPLEPAYUC
	case POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB:
		*s = POSTProviderReserveResponseReservationListItemProviderAPPLEPAYJCB
	case POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT:
		*s = POSTProviderReserveResponseReservationListItemProviderDIRECTDEBIT
	case POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT:
		*s = POSTProviderReserveResponseReservationListItemProviderVIRTUALACCOUNT
	default:
		*s = POSTProviderReserveResponseReservationListItemProvider(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTProviderReserveResponseReservationListItemProvider) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTProviderReserveResponseReservationListItemProvider) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("email")
		e.Str(s.Email)
	}
	{
		e.FieldStart("password")
		e.Str(s.Password)
	}
	{
		e.FieldStart("name")
		e.Str(s.Name)
	}
	{
		e.FieldStart("tenant_url_id")
		e.Str(s.TenantURLID)
	}
}

var jsonFieldsNameOfPOSTTenantEntriesRequest = [4]string{
	0: "email",
	1: "password",
	2: "name",
	3: "tenant_url_id",
}

// Decode decodes POSTTenantEntriesRequest from json.
func (s *POSTTenantEntriesRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "email":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				v, err := d.Str()
				s.Email = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "password":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Password = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password\"")
			}
		case "name":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.Name = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "tenant_url_id":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.TenantURLID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_url_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001111,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPOSTTenantEntriesRequest) {
					name = jsonFieldsNameOfPOSTTenantEntriesRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesResponse) encodeFields(e *jx.Encoder) {
	{
		if s.UserData.Set {
			e.FieldStart("user_data")
			s.UserData.Encode(e)
		}
	}
	{
		if s.AccessToken.Set {
			e.FieldStart("access_token")
			s.AccessToken.Encode(e)
		}
	}
	{
		if s.Authorities != nil {
			e.FieldStart("authorities")
			e.ArrStart()
			for _, elem := range s.Authorities {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPOSTTenantEntriesResponse = [3]string{
	0: "user_data",
	1: "access_token",
	2: "authorities",
}

// Decode decodes POSTTenantEntriesResponse from json.
func (s *POSTTenantEntriesResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "user_data":
			if err := func() error {
				s.UserData.Reset()
				if err := s.UserData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"user_data\"")
			}
		case "access_token":
			if err := func() error {
				s.AccessToken.Reset()
				if err := s.AccessToken.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_token\"")
			}
		case "authorities":
			if err := func() error {
				s.Authorities = make([]POSTTenantEntriesResponseAuthoritiesItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem POSTTenantEntriesResponseAuthoritiesItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Authorities = append(s.Authorities, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"authorities\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesResponseAuthoritiesItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesResponseAuthoritiesItem) encodeFields(e *jx.Encoder) {
	{
		if s.AuthID.Set {
			e.FieldStart("auth_id")
			s.AuthID.Encode(e)
		}
	}
	{
		if s.Endpoint.Set {
			e.FieldStart("endpoint")
			s.Endpoint.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTTenantEntriesResponseAuthoritiesItem = [3]string{
	0: "auth_id",
	1: "endpoint",
	2: "method",
}

// Decode decodes POSTTenantEntriesResponseAuthoritiesItem from json.
func (s *POSTTenantEntriesResponseAuthoritiesItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseAuthoritiesItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auth_id":
			if err := func() error {
				s.AuthID.Reset()
				if err := s.AuthID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_id\"")
			}
		case "endpoint":
			if err := func() error {
				s.Endpoint.Reset()
				if err := s.Endpoint.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"endpoint\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesResponseAuthoritiesItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesResponseAuthoritiesItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseAuthoritiesItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *POSTTenantEntriesResponseUserData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *POSTTenantEntriesResponseUserData) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DefaultShopID.Set {
			e.FieldStart("default_shop_id")
			s.DefaultShopID.Encode(e)
		}
	}
	{
		if s.RoleID.Set {
			e.FieldStart("role_id")
			s.RoleID.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Email.Set {
			e.FieldStart("email")
			s.Email.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.TwoFactorAuthStatus.Set {
			e.FieldStart("two_factor_auth_status")
			s.TwoFactorAuthStatus.Encode(e)
		}
	}
	{
		if s.MailAuthStatus.Set {
			e.FieldStart("mail_auth_status")
			s.MailAuthStatus.Encode(e)
		}
	}
	{
		if s.PasswordLockStatus.Set {
			e.FieldStart("password_lock_status")
			s.PasswordLockStatus.Encode(e)
		}
	}
	{
		if s.LastLoginDate.Set {
			e.FieldStart("last_login_date")
			s.LastLoginDate.Encode(e)
		}
	}
	{
		if s.LoginFailureDate.Set {
			e.FieldStart("login_failure_date")
			s.LoginFailureDate.Encode(e)
		}
	}
	{
		if s.LoginFailureTimes.Set {
			e.FieldStart("login_failure_times")
			s.LoginFailureTimes.Encode(e)
		}
	}
	{
		if s.PasswordExpire.Set {
			e.FieldStart("password_expire")
			s.PasswordExpire.Encode(e)
		}
	}
	{
		if s.AccountStatus.Set {
			e.FieldStart("account_status")
			s.AccountStatus.Encode(e)
		}
	}
	{
		if s.InviteStatus.Set {
			e.FieldStart("invite_status")
			s.InviteStatus.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPOSTTenantEntriesResponseUserData = [17]string{
	0:  "id",
	1:  "default_shop_id",
	2:  "role_id",
	3:  "name",
	4:  "email",
	5:  "type",
	6:  "two_factor_auth_status",
	7:  "mail_auth_status",
	8:  "password_lock_status",
	9:  "last_login_date",
	10: "login_failure_date",
	11: "login_failure_times",
	12: "password_expire",
	13: "account_status",
	14: "invite_status",
	15: "created",
	16: "updated",
}

// Decode decodes POSTTenantEntriesResponseUserData from json.
func (s *POSTTenantEntriesResponseUserData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "default_shop_id":
			if err := func() error {
				s.DefaultShopID.Reset()
				if err := s.DefaultShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_shop_id\"")
			}
		case "role_id":
			if err := func() error {
				s.RoleID.Reset()
				if err := s.RoleID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"role_id\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"email\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "two_factor_auth_status":
			if err := func() error {
				s.TwoFactorAuthStatus.Reset()
				if err := s.TwoFactorAuthStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"two_factor_auth_status\"")
			}
		case "mail_auth_status":
			if err := func() error {
				s.MailAuthStatus.Reset()
				if err := s.MailAuthStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_auth_status\"")
			}
		case "password_lock_status":
			if err := func() error {
				s.PasswordLockStatus.Reset()
				if err := s.PasswordLockStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password_lock_status\"")
			}
		case "last_login_date":
			if err := func() error {
				s.LastLoginDate.Reset()
				if err := s.LastLoginDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_login_date\"")
			}
		case "login_failure_date":
			if err := func() error {
				s.LoginFailureDate.Reset()
				if err := s.LoginFailureDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"login_failure_date\"")
			}
		case "login_failure_times":
			if err := func() error {
				s.LoginFailureTimes.Reset()
				if err := s.LoginFailureTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"login_failure_times\"")
			}
		case "password_expire":
			if err := func() error {
				s.PasswordExpire.Reset()
				if err := s.PasswordExpire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"password_expire\"")
			}
		case "account_status":
			if err := func() error {
				s.AccountStatus.Reset()
				if err := s.AccountStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_status\"")
			}
		case "invite_status":
			if err := func() error {
				s.InviteStatus.Reset()
				if err := s.InviteStatus.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invite_status\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode POSTTenantEntriesResponseUserData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *POSTTenantEntriesResponseUserData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataAccountStatus as json.
func (s POSTTenantEntriesResponseUserDataAccountStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataAccountStatus from json.
func (s *POSTTenantEntriesResponseUserDataAccountStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataAccountStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataAccountStatus(v) {
	case POSTTenantEntriesResponseUserDataAccountStatus00:
		*s = POSTTenantEntriesResponseUserDataAccountStatus00
	case POSTTenantEntriesResponseUserDataAccountStatus01:
		*s = POSTTenantEntriesResponseUserDataAccountStatus01
	default:
		*s = POSTTenantEntriesResponseUserDataAccountStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataAccountStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataAccountStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataInviteStatus as json.
func (s POSTTenantEntriesResponseUserDataInviteStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataInviteStatus from json.
func (s *POSTTenantEntriesResponseUserDataInviteStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataInviteStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataInviteStatus(v) {
	case POSTTenantEntriesResponseUserDataInviteStatus01:
		*s = POSTTenantEntriesResponseUserDataInviteStatus01
	case POSTTenantEntriesResponseUserDataInviteStatus02:
		*s = POSTTenantEntriesResponseUserDataInviteStatus02
	default:
		*s = POSTTenantEntriesResponseUserDataInviteStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataInviteStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataInviteStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataMailAuthStatus as json.
func (s POSTTenantEntriesResponseUserDataMailAuthStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataMailAuthStatus from json.
func (s *POSTTenantEntriesResponseUserDataMailAuthStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataMailAuthStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataMailAuthStatus(v) {
	case POSTTenantEntriesResponseUserDataMailAuthStatus00:
		*s = POSTTenantEntriesResponseUserDataMailAuthStatus00
	case POSTTenantEntriesResponseUserDataMailAuthStatus01:
		*s = POSTTenantEntriesResponseUserDataMailAuthStatus01
	default:
		*s = POSTTenantEntriesResponseUserDataMailAuthStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataMailAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataMailAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataPasswordLockStatus as json.
func (s POSTTenantEntriesResponseUserDataPasswordLockStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataPasswordLockStatus from json.
func (s *POSTTenantEntriesResponseUserDataPasswordLockStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataPasswordLockStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataPasswordLockStatus(v) {
	case POSTTenantEntriesResponseUserDataPasswordLockStatus00:
		*s = POSTTenantEntriesResponseUserDataPasswordLockStatus00
	case POSTTenantEntriesResponseUserDataPasswordLockStatus01:
		*s = POSTTenantEntriesResponseUserDataPasswordLockStatus01
	default:
		*s = POSTTenantEntriesResponseUserDataPasswordLockStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataPasswordLockStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataPasswordLockStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataTwoFactorAuthStatus as json.
func (s POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataTwoFactorAuthStatus from json.
func (s *POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataTwoFactorAuthStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataTwoFactorAuthStatus(v) {
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00:
		*s = POSTTenantEntriesResponseUserDataTwoFactorAuthStatus00
	case POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01:
		*s = POSTTenantEntriesResponseUserDataTwoFactorAuthStatus01
	default:
		*s = POSTTenantEntriesResponseUserDataTwoFactorAuthStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes POSTTenantEntriesResponseUserDataType as json.
func (s POSTTenantEntriesResponseUserDataType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes POSTTenantEntriesResponseUserDataType from json.
func (s *POSTTenantEntriesResponseUserDataType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode POSTTenantEntriesResponseUserDataType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch POSTTenantEntriesResponseUserDataType(v) {
	case POSTTenantEntriesResponseUserDataType01:
		*s = POSTTenantEntriesResponseUserDataType01
	default:
		*s = POSTTenantEntriesResponseUserDataType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s POSTTenantEntriesResponseUserDataType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *POSTTenantEntriesResponseUserDataType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulk) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulk) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProcessPlanDate.Set {
			e.FieldStart("process_plan_date")
			s.ProcessPlanDate.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.ProcessStartDate.Set {
			e.FieldStart("process_start_date")
			s.ProcessStartDate.Encode(e)
		}
	}
	{
		if s.ProcessEndDate.Set {
			e.FieldStart("process_end_date")
			s.ProcessEndDate.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.ProcessSuccessCount.Set {
			e.FieldStart("process_success_count")
			s.ProcessSuccessCount.Encode(e)
		}
	}
	{
		if s.ProcessFailureCount.Set {
			e.FieldStart("process_failure_count")
			s.ProcessFailureCount.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulk = [15]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "status",
	4:  "process_plan_date",
	5:  "file_name",
	6:  "process_start_date",
	7:  "process_end_date",
	8:  "total_count",
	9:  "process_success_count",
	10: "process_failure_count",
	11: "error_code",
	12: "delete_flag",
	13: "created",
	14: "updated",
}

// Decode decodes PaymentBulk from json.
func (s *PaymentBulk) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulk to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "process_plan_date":
			if err := func() error {
				s.ProcessPlanDate.Reset()
				if err := s.ProcessPlanDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_plan_date\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "process_start_date":
			if err := func() error {
				s.ProcessStartDate.Reset()
				if err := s.ProcessStartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_start_date\"")
			}
		case "process_end_date":
			if err := func() error {
				s.ProcessEndDate.Reset()
				if err := s.ProcessEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_end_date\"")
			}
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "process_success_count":
			if err := func() error {
				s.ProcessSuccessCount.Reset()
				if err := s.ProcessSuccessCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_success_count\"")
			}
		case "process_failure_count":
			if err := func() error {
				s.ProcessFailureCount.Reset()
				if err := s.ProcessFailureCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_failure_count\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulk")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulk) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulk) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProcessPlanDate.Set {
			e.FieldStart("process_plan_date")
			s.ProcessPlanDate.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.ProcessStartDate.Set {
			e.FieldStart("process_start_date")
			s.ProcessStartDate.Encode(e)
		}
	}
	{
		if s.ProcessEndDate.Set {
			e.FieldStart("process_end_date")
			s.ProcessEndDate.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.ProcessSuccessCount.Set {
			e.FieldStart("process_success_count")
			s.ProcessSuccessCount.Encode(e)
		}
	}
	{
		if s.ProcessFailureCount.Set {
			e.FieldStart("process_failure_count")
			s.ProcessFailureCount.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulkCreatingResponse = [15]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "status",
	4:  "process_plan_date",
	5:  "file_name",
	6:  "process_start_date",
	7:  "process_end_date",
	8:  "total_count",
	9:  "process_success_count",
	10: "process_failure_count",
	11: "error_code",
	12: "delete_flag",
	13: "created",
	14: "updated",
}

// Decode decodes PaymentBulkCreatingResponse from json.
func (s *PaymentBulkCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "process_plan_date":
			if err := func() error {
				s.ProcessPlanDate.Reset()
				if err := s.ProcessPlanDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_plan_date\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "process_start_date":
			if err := func() error {
				s.ProcessStartDate.Reset()
				if err := s.ProcessStartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_start_date\"")
			}
		case "process_end_date":
			if err := func() error {
				s.ProcessEndDate.Reset()
				if err := s.ProcessEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_end_date\"")
			}
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "process_success_count":
			if err := func() error {
				s.ProcessSuccessCount.Reset()
				if err := s.ProcessSuccessCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_success_count\"")
			}
		case "process_failure_count":
			if err := func() error {
				s.ProcessFailureCount.Reset()
				if err := s.ProcessFailureCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_failure_count\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponseDeleteFlag as json.
func (s PaymentBulkCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkCreatingResponseDeleteFlag from json.
func (s *PaymentBulkCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkCreatingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkCreatingResponseDeleteFlag(v) {
	case PaymentBulkCreatingResponseDeleteFlag1:
		*s = PaymentBulkCreatingResponseDeleteFlag1
	case PaymentBulkCreatingResponseDeleteFlag0:
		*s = PaymentBulkCreatingResponseDeleteFlag0
	default:
		*s = PaymentBulkCreatingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponsePayType as json.
func (s PaymentBulkCreatingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkCreatingResponsePayType from json.
func (s *PaymentBulkCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkCreatingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkCreatingResponsePayType(v) {
	case PaymentBulkCreatingResponsePayTypeCard:
		*s = PaymentBulkCreatingResponsePayTypeCard
	default:
		*s = PaymentBulkCreatingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkCreatingResponseStatus as json.
func (s PaymentBulkCreatingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkCreatingResponseStatus from json.
func (s *PaymentBulkCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkCreatingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkCreatingResponseStatus(v) {
	case PaymentBulkCreatingResponseStatusCHECKED:
		*s = PaymentBulkCreatingResponseStatusCHECKED
	case PaymentBulkCreatingResponseStatusSUCCEEDED:
		*s = PaymentBulkCreatingResponseStatusSUCCEEDED
	case PaymentBulkCreatingResponseStatusFAILED:
		*s = PaymentBulkCreatingResponseStatusFAILED
	default:
		*s = PaymentBulkCreatingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDeleteFlag as json.
func (s PaymentBulkDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDeleteFlag from json.
func (s *PaymentBulkDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDeleteFlag(v) {
	case PaymentBulkDeleteFlag1:
		*s = PaymentBulkDeleteFlag1
	case PaymentBulkDeleteFlag0:
		*s = PaymentBulkDeleteFlag0
	default:
		*s = PaymentBulkDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulkDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes PaymentBulkDeletingResponse from json.
func (s *PaymentBulkDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDeletingResponseDeleteFlag as json.
func (s PaymentBulkDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDeletingResponseDeleteFlag from json.
func (s *PaymentBulkDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDeletingResponseDeleteFlag(v) {
	case PaymentBulkDeletingResponseDeleteFlag1:
		*s = PaymentBulkDeletingResponseDeleteFlag1
	case PaymentBulkDeletingResponseDeleteFlag0:
		*s = PaymentBulkDeletingResponseDeleteFlag0
	default:
		*s = PaymentBulkDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDetail) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.ItemCode != nil {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.TransactionID != nil {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve != nil {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.Forward != nil {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentBulkDetail = [22]string{
	0:  "id",
	1:  "shop_id",
	2:  "order_id",
	3:  "access_id",
	4:  "job_code",
	5:  "amount",
	6:  "tax",
	7:  "total_amount",
	8:  "method",
	9:  "pay_times",
	10: "customer_id",
	11: "card_id",
	12: "client_field_1",
	13: "client_field_2",
	14: "client_field_3",
	15: "error_code",
	16: "created",
	17: "updated",
	18: "item_code",
	19: "transaction_id",
	20: "approve",
	21: "forward",
}

// Decode decodes PaymentBulkDetail from json.
func (s *PaymentBulkDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ItemCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TransactionID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Approve = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "forward":
			if err := func() error {
				s.Forward = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Forward = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailJobCode as json.
func (s PaymentBulkDetailJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDetailJobCode from json.
func (s *PaymentBulkDetailJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDetailJobCode(v) {
	case PaymentBulkDetailJobCodeCHECK:
		*s = PaymentBulkDetailJobCodeCHECK
	case PaymentBulkDetailJobCodeAUTH:
		*s = PaymentBulkDetailJobCodeAUTH
	case PaymentBulkDetailJobCodeCAPTURE:
		*s = PaymentBulkDetailJobCodeCAPTURE
	default:
		*s = PaymentBulkDetailJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDetailJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkDetailListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkDetailListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.ErrorDetail != nil {
			e.FieldStart("error_detail")
			e.ArrStart()
			for _, elem := range s.ErrorDetail {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkDetailListRetrievingResponse = [9]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "error_code",
	7: "list",
	8: "error_detail",
}

// Decode decodes PaymentBulkDetailListRetrievingResponse from json.
func (s *PaymentBulkDetailListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentBulkDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulkDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		case "error_detail":
			if err := func() error {
				s.ErrorDetail = make([]PaymentBulkErrorDetail, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulkErrorDetail
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.ErrorDetail = append(s.ErrorDetail, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_detail\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkDetailListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkDetailListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailMethod as json.
func (s PaymentBulkDetailMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDetailMethod from json.
func (s *PaymentBulkDetailMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDetailMethod(v) {
	case PaymentBulkDetailMethod1:
		*s = PaymentBulkDetailMethod1
	case PaymentBulkDetailMethod2:
		*s = PaymentBulkDetailMethod2
	case PaymentBulkDetailMethod5:
		*s = PaymentBulkDetailMethod5
	default:
		*s = PaymentBulkDetailMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDetailMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkDetailPayTimes as json.
func (s PaymentBulkDetailPayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkDetailPayTimes from json.
func (s *PaymentBulkDetailPayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkDetailPayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkDetailPayTimes(v) {
	case PaymentBulkDetailPayTimes3:
		*s = PaymentBulkDetailPayTimes3
	case PaymentBulkDetailPayTimes5:
		*s = PaymentBulkDetailPayTimes5
	case PaymentBulkDetailPayTimes6:
		*s = PaymentBulkDetailPayTimes6
	case PaymentBulkDetailPayTimes10:
		*s = PaymentBulkDetailPayTimes10
	case PaymentBulkDetailPayTimes12:
		*s = PaymentBulkDetailPayTimes12
	case PaymentBulkDetailPayTimes15:
		*s = PaymentBulkDetailPayTimes15
	case PaymentBulkDetailPayTimes18:
		*s = PaymentBulkDetailPayTimes18
	case PaymentBulkDetailPayTimes20:
		*s = PaymentBulkDetailPayTimes20
	case PaymentBulkDetailPayTimes24:
		*s = PaymentBulkDetailPayTimes24
	default:
		*s = PaymentBulkDetailPayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkDetailPayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkDetailPayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkErrorDetail) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkErrorDetail) encodeFields(e *jx.Encoder) {
	{
		if s.Number.Set {
			e.FieldStart("number")
			s.Number.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Errors != nil {
			e.FieldStart("errors")
			e.ArrStart()
			for _, elem := range s.Errors {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkErrorDetail = [3]string{
	0: "number",
	1: "order_id",
	2: "errors",
}

// Decode decodes PaymentBulkErrorDetail from json.
func (s *PaymentBulkErrorDetail) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkErrorDetail to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "number":
			if err := func() error {
				s.Number.Reset()
				if err := s.Number.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"number\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "errors":
			if err := func() error {
				s.Errors = make([]FincodeAPIError, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem FincodeAPIError
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Errors = append(s.Errors, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"errors\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkErrorDetail")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkErrorDetail) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkErrorDetail) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentBulkListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentBulkListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPaymentBulkListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PaymentBulkListRetrievingResponse from json.
func (s *PaymentBulkListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PaymentBulk, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentBulk
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentBulkListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentBulkListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkPayType as json.
func (s PaymentBulkPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkPayType from json.
func (s *PaymentBulkPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkPayType(v) {
	case PaymentBulkPayTypeCard:
		*s = PaymentBulkPayTypeCard
	default:
		*s = PaymentBulkPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentBulkStatus as json.
func (s PaymentBulkStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentBulkStatus from json.
func (s *PaymentBulkStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentBulkStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentBulkStatus(v) {
	case PaymentBulkStatusCHECKED:
		*s = PaymentBulkStatusCHECKED
	case PaymentBulkStatusSUCCEEDED:
		*s = PaymentBulkStatusSUCCEEDED
	case PaymentBulkStatusFAILED:
		*s = PaymentBulkStatusFAILED
	default:
		*s = PaymentBulkStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentBulkStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentBulkStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethod) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethod) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectURLAccessedFlag.Set {
			e.FieldStart("redirect_url_accessed_flag")
			s.RedirectURLAccessedFlag.Encode(e)
		}
	}
	{
		if s.ReturnURL.Set {
			e.FieldStart("return_url")
			s.ReturnURL.Encode(e)
		}
	}
	{
		if s.ReturnURLOnFailure.Set {
			e.FieldStart("return_url_on_failure")
			s.ReturnURLOnFailure.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.ProcessDate != nil {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Directdebit.Set {
			e.FieldStart("directdebit")
			s.Directdebit.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethod = [18]string{
	0:  "id",
	1:  "pay_type",
	2:  "customer_id",
	3:  "status",
	4:  "redirect_url",
	5:  "redirect_url_accessed_flag",
	6:  "return_url",
	7:  "return_url_on_failure",
	8:  "default_flag",
	9:  "client_field_1",
	10: "client_field_2",
	11: "client_field_3",
	12: "delete_flag",
	13: "process_date",
	14: "created",
	15: "updated",
	16: "card",
	17: "directdebit",
}

// Decode decodes PaymentMethod from json.
func (s *PaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethod to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_url_accessed_flag":
			if err := func() error {
				s.RedirectURLAccessedFlag.Reset()
				if err := s.RedirectURLAccessedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url_accessed_flag\"")
			}
		case "return_url":
			if err := func() error {
				s.ReturnURL.Reset()
				if err := s.ReturnURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url\"")
			}
		case "return_url_on_failure":
			if err := func() error {
				s.ReturnURLOnFailure.Reset()
				if err := s.ReturnURLOnFailure.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"return_url_on_failure\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProcessDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "directdebit":
			if err := func() error {
				s.Directdebit.Reset()
				if err := s.Directdebit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"directdebit\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethod")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodCard) encodeFields(e *jx.Encoder) {
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.Type != nil {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Brand != nil {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.TdsType != nil {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type != nil {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Acs.Set {
			e.FieldStart("acs")
			s.Acs.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodCard = [12]string{
	0:  "card_no",
	1:  "expire",
	2:  "holder_name",
	3:  "type",
	4:  "brand",
	5:  "card_no_hash",
	6:  "tds_type",
	7:  "tds2_type",
	8:  "tds2_status",
	9:  "merchant_name",
	10: "access_id",
	11: "acs",
}

// Decode decodes PaymentMethodCard from json.
func (s *PaymentMethodCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "type":
			if err := func() error {
				s.Type = nil
				var elem NilPaymentMethodCardType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "brand":
			if err := func() error {
				s.Brand = nil
				var elem NilPaymentMethodCardBrand
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Brand = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType = nil
				var elem NilPaymentMethodCardTdsType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TdsType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type = nil
				var elem NilPaymentMethodCardTds2Type
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2Type = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "acs":
			if err := func() error {
				s.Acs.Reset()
				if err := s.Acs.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acs\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardBrand as json.
func (s PaymentMethodCardBrand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodCardBrand from json.
func (s *PaymentMethodCardBrand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCardBrand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodCardBrand(v) {
	case PaymentMethodCardBrandVISA:
		*s = PaymentMethodCardBrandVISA
	case PaymentMethodCardBrandMASTER:
		*s = PaymentMethodCardBrandMASTER
	case PaymentMethodCardBrandJCB:
		*s = PaymentMethodCardBrandJCB
	case PaymentMethodCardBrandAMEX:
		*s = PaymentMethodCardBrandAMEX
	case PaymentMethodCardBrandDINERS:
		*s = PaymentMethodCardBrandDINERS
	case PaymentMethodCardBrandDISCOVER:
		*s = PaymentMethodCardBrandDISCOVER
	case PaymentMethodCardBrandEmpty:
		*s = PaymentMethodCardBrandEmpty
	default:
		*s = PaymentMethodCardBrand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodCardBrand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCardBrand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardTds2Type as json.
func (s PaymentMethodCardTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodCardTds2Type from json.
func (s *PaymentMethodCardTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCardTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodCardTds2Type(v) {
	case PaymentMethodCardTds2Type2:
		*s = PaymentMethodCardTds2Type2
	case PaymentMethodCardTds2Type3:
		*s = PaymentMethodCardTds2Type3
	default:
		*s = PaymentMethodCardTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardTdsType as json.
func (s PaymentMethodCardTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodCardTdsType from json.
func (s *PaymentMethodCardTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCardTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodCardTdsType(v) {
	case PaymentMethodCardTdsType0:
		*s = PaymentMethodCardTdsType0
	case PaymentMethodCardTdsType2:
		*s = PaymentMethodCardTdsType2
	default:
		*s = PaymentMethodCardTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodCardType as json.
func (s PaymentMethodCardType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodCardType from json.
func (s *PaymentMethodCardType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodCardType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodCardType(v) {
	case PaymentMethodCardType0:
		*s = PaymentMethodCardType0
	case PaymentMethodCardType1:
		*s = PaymentMethodCardType1
	case PaymentMethodCardType2:
		*s = PaymentMethodCardType2
	case PaymentMethodCardType3:
		*s = PaymentMethodCardType3
	default:
		*s = PaymentMethodCardType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodCardType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodCardType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDefaultFlag as json.
func (s PaymentMethodDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDefaultFlag from json.
func (s *PaymentMethodDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDefaultFlag(v) {
	case PaymentMethodDefaultFlag0:
		*s = PaymentMethodDefaultFlag0
	case PaymentMethodDefaultFlag1:
		*s = PaymentMethodDefaultFlag1
	default:
		*s = PaymentMethodDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDeleteFlag as json.
func (s PaymentMethodDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDeleteFlag from json.
func (s *PaymentMethodDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDeleteFlag(v) {
	case PaymentMethodDeleteFlag1:
		*s = PaymentMethodDeleteFlag1
	case PaymentMethodDeleteFlag0:
		*s = PaymentMethodDeleteFlag0
	default:
		*s = PaymentMethodDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodDirectdebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodDirectdebit) encodeFields(e *jx.Encoder) {
	{
		if s.ApplicationType.Set {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.ExpectedBillableDate.Set {
			e.FieldStart("expected_billable_date")
			s.ExpectedBillableDate.Encode(e)
		}
	}
	{
		if s.LastWithdrawalDate.Set {
			e.FieldStart("last_withdrawal_date")
			s.LastWithdrawalDate.Encode(e)
		}
	}
	{
		if s.LastResultCode.Set {
			e.FieldStart("last_result_code")
			s.LastResultCode.Encode(e)
		}
	}
	{
		if s.BankType.Set {
			e.FieldStart("bank_type")
			s.BankType.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.AccountType.Set {
			e.FieldStart("account_type")
			s.AccountType.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber1.Set {
			e.FieldStart("postal_account_number_1")
			s.PostalAccountNumber1.Encode(e)
		}
	}
	{
		if s.PostalAccountNumber2.Set {
			e.FieldStart("postal_account_number_2")
			s.PostalAccountNumber2.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
	{
		if s.AccountNameKana.Set {
			e.FieldStart("account_name_kana")
			s.AccountNameKana.Encode(e)
		}
	}
	{
		if s.PaperApplication.Set {
			e.FieldStart("paper_application")
			s.PaperApplication.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodDirectdebit = [16]string{
	0:  "application_type",
	1:  "expected_billable_date",
	2:  "last_withdrawal_date",
	3:  "last_result_code",
	4:  "bank_type",
	5:  "bank_code",
	6:  "bank_name",
	7:  "branch_code",
	8:  "branch_name",
	9:  "account_type",
	10: "account_number",
	11: "postal_account_number_1",
	12: "postal_account_number_2",
	13: "account_name",
	14: "account_name_kana",
	15: "paper_application",
}

// Decode decodes PaymentMethodDirectdebit from json.
func (s *PaymentMethodDirectdebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "application_type":
			if err := func() error {
				s.ApplicationType.Reset()
				if err := s.ApplicationType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "expected_billable_date":
			if err := func() error {
				s.ExpectedBillableDate.Reset()
				if err := s.ExpectedBillableDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expected_billable_date\"")
			}
		case "last_withdrawal_date":
			if err := func() error {
				s.LastWithdrawalDate.Reset()
				if err := s.LastWithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_withdrawal_date\"")
			}
		case "last_result_code":
			if err := func() error {
				s.LastResultCode.Reset()
				if err := s.LastResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_result_code\"")
			}
		case "bank_type":
			if err := func() error {
				s.BankType.Reset()
				if err := s.BankType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_type\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "account_type":
			if err := func() error {
				s.AccountType.Reset()
				if err := s.AccountType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_type\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "postal_account_number_1":
			if err := func() error {
				s.PostalAccountNumber1.Reset()
				if err := s.PostalAccountNumber1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_1\"")
			}
		case "postal_account_number_2":
			if err := func() error {
				s.PostalAccountNumber2.Reset()
				if err := s.PostalAccountNumber2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"postal_account_number_2\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		case "account_name_kana":
			if err := func() error {
				s.AccountNameKana.Reset()
				if err := s.AccountNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name_kana\"")
			}
		case "paper_application":
			if err := func() error {
				s.PaperApplication.Reset()
				if err := s.PaperApplication.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_application\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodDirectdebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodDirectdebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitAccountType as json.
func (s PaymentMethodDirectdebitAccountType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDirectdebitAccountType from json.
func (s *PaymentMethodDirectdebitAccountType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitAccountType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDirectdebitAccountType(v) {
	case PaymentMethodDirectdebitAccountType0:
		*s = PaymentMethodDirectdebitAccountType0
	case PaymentMethodDirectdebitAccountType1:
		*s = PaymentMethodDirectdebitAccountType1
	default:
		*s = PaymentMethodDirectdebitAccountType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDirectdebitAccountType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitAccountType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodDirectdebitBankType as json.
func (s PaymentMethodDirectdebitBankType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodDirectdebitBankType from json.
func (s *PaymentMethodDirectdebitBankType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitBankType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodDirectdebitBankType(v) {
	case PaymentMethodDirectdebitBankType0:
		*s = PaymentMethodDirectdebitBankType0
	case PaymentMethodDirectdebitBankType1:
		*s = PaymentMethodDirectdebitBankType1
	default:
		*s = PaymentMethodDirectdebitBankType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodDirectdebitBankType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitBankType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentMethodDirectdebitPaperApplication) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentMethodDirectdebitPaperApplication) encodeFields(e *jx.Encoder) {
	{
		if s.PreregisteredDate.Set {
			e.FieldStart("preregistered_date")
			s.PreregisteredDate.Encode(e)
		}
	}
	{
		if s.RequestFormID.Set {
			e.FieldStart("request_form_id")
			s.RequestFormID.Encode(e)
		}
	}
	{
		if s.PaperFailureDescription.Set {
			e.FieldStart("paper_failure_description")
			s.PaperFailureDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentMethodDirectdebitPaperApplication = [3]string{
	0: "preregistered_date",
	1: "request_form_id",
	2: "paper_failure_description",
}

// Decode decodes PaymentMethodDirectdebitPaperApplication from json.
func (s *PaymentMethodDirectdebitPaperApplication) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodDirectdebitPaperApplication to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "preregistered_date":
			if err := func() error {
				s.PreregisteredDate.Reset()
				if err := s.PreregisteredDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"preregistered_date\"")
			}
		case "request_form_id":
			if err := func() error {
				s.RequestFormID.Reset()
				if err := s.RequestFormID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_form_id\"")
			}
		case "paper_failure_description":
			if err := func() error {
				s.PaperFailureDescription.Reset()
				if err := s.PaperFailureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paper_failure_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentMethodDirectdebitPaperApplication")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentMethodDirectdebitPaperApplication) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodDirectdebitPaperApplication) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodPayType as json.
func (s PaymentMethodPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodPayType from json.
func (s *PaymentMethodPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodPayType(v) {
	case PaymentMethodPayTypeCard:
		*s = PaymentMethodPayTypeCard
	case PaymentMethodPayTypeDirectdebit:
		*s = PaymentMethodPayTypeDirectdebit
	default:
		*s = PaymentMethodPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodRedirectURLAccessedFlag as json.
func (s PaymentMethodRedirectURLAccessedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodRedirectURLAccessedFlag from json.
func (s *PaymentMethodRedirectURLAccessedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodRedirectURLAccessedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodRedirectURLAccessedFlag(v) {
	case PaymentMethodRedirectURLAccessedFlag0:
		*s = PaymentMethodRedirectURLAccessedFlag0
	case PaymentMethodRedirectURLAccessedFlag1:
		*s = PaymentMethodRedirectURLAccessedFlag1
	default:
		*s = PaymentMethodRedirectURLAccessedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodRedirectURLAccessedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodRedirectURLAccessedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentMethodStatus as json.
func (s PaymentMethodStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentMethodStatus from json.
func (s *PaymentMethodStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentMethodStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentMethodStatus(v) {
	case PaymentMethodStatusINACTIVATED:
		*s = PaymentMethodStatusINACTIVATED
	case PaymentMethodStatusAWAITINGCUSTOMERACTION:
		*s = PaymentMethodStatusAWAITINGCUSTOMERACTION
	case PaymentMethodStatusACTIVATED:
		*s = PaymentMethodStatusACTIVATED
	case PaymentMethodStatusFAILED:
		*s = PaymentMethodStatusFAILED
	default:
		*s = PaymentMethodStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("transaction")
		s.Transaction.Encode(e)
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Konbini.Set {
			e.FieldStart("konbini")
			s.Konbini.Encode(e)
		}
	}
	{
		if s.Paypay.Set {
			e.FieldStart("paypay")
			s.Paypay.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.ThanksMailSendFlag.Set {
			e.FieldStart("thanks_mail_send_flag")
			s.ThanksMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequest = [13]string{
	0:  "transaction",
	1:  "card",
	2:  "konbini",
	3:  "paypay",
	4:  "success_url",
	5:  "cancel_url",
	6:  "expire",
	7:  "shop_service_name",
	8:  "guide_mail_send_flag",
	9:  "receiver_mail",
	10: "mail_customer_name",
	11: "thanks_mail_send_flag",
	12: "shop_mail_template_id",
}

// Decode decodes PaymentSessionCreatingRequest from json.
func (s *PaymentSessionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "transaction":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.Transaction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "konbini":
			if err := func() error {
				s.Konbini.Reset()
				if err := s.Konbini.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini\"")
			}
		case "paypay":
			if err := func() error {
				s.Paypay.Reset()
				if err := s.Paypay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "thanks_mail_send_flag":
			if err := func() error {
				s.ThanksMailSendFlag.Reset()
				if err := s.ThanksMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"thanks_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequest) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestCard) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2ChAccChange != nil {
			e.FieldStart("tds2_ch_acc_change")
			s.Tds2ChAccChange.Encode(e)
		}
	}
	{
		if s.Tds2ChAccDate != nil {
			e.FieldStart("tds2_ch_acc_date")
			s.Tds2ChAccDate.Encode(e)
		}
	}
	{
		if s.Tds2ChAccPwChange != nil {
			e.FieldStart("tds2_ch_acc_pw_change")
			s.Tds2ChAccPwChange.Encode(e)
		}
	}
	{
		if s.Tds2NbPurchaseAccount != nil {
			e.FieldStart("tds2_nb_purchase_account")
			s.Tds2NbPurchaseAccount.Encode(e)
		}
	}
	{
		if s.Tds2PaymentAccAge != nil {
			e.FieldStart("tds2_payment_acc_age")
			s.Tds2PaymentAccAge.Encode(e)
		}
	}
	{
		if s.Tds2ProvisionAttemptsDay != nil {
			e.FieldStart("tds2_provision_attempts_day")
			s.Tds2ProvisionAttemptsDay.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddressUsage != nil {
			e.FieldStart("tds2_ship_address_usage")
			s.Tds2ShipAddressUsage.Encode(e)
		}
	}
	{
		if s.Tds2ShipNameInd != nil {
			e.FieldStart("tds2_ship_name_ind")
			s.Tds2ShipNameInd.Encode(e)
		}
	}
	{
		if s.Tds2SuspiciousAccActivity != nil {
			e.FieldStart("tds2_suspicious_acc_activity")
			s.Tds2SuspiciousAccActivity.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityDay != nil {
			e.FieldStart("tds2_txn_activity_day")
			s.Tds2TxnActivityDay.Encode(e)
		}
	}
	{
		if s.Tds2TxnActivityYear != nil {
			e.FieldStart("tds2_txn_activity_year")
			s.Tds2TxnActivityYear.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthData != nil {
			e.FieldStart("tds2_three_ds_req_auth_data")
			s.Tds2ThreeDsReqAuthData.Encode(e)
		}
	}
	{
		if s.Tds2ThreeDsReqAuthMethod != nil {
			e.FieldStart("tds2_three_ds_req_auth_method")
			s.Tds2ThreeDsReqAuthMethod.Encode(e)
		}
	}
	{
		if s.Tds2AddrMatch != nil {
			e.FieldStart("tds2_addr_match")
			s.Tds2AddrMatch.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCountry != nil {
			e.FieldStart("tds2_bill_addr_country")
			s.Tds2BillAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrState != nil {
			e.FieldStart("tds2_bill_addr_state")
			s.Tds2BillAddrState.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrCity != nil {
			e.FieldStart("tds2_bill_addr_city")
			s.Tds2BillAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine1 != nil {
			e.FieldStart("tds2_bill_addr_line_1")
			s.Tds2BillAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine2 != nil {
			e.FieldStart("tds2_bill_addr_line_2")
			s.Tds2BillAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrLine3.Set {
			e.FieldStart("tds2_bill_addr_line_3")
			s.Tds2BillAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2BillAddrPostCode != nil {
			e.FieldStart("tds2_bill_addr_post_code")
			s.Tds2BillAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCountry != nil {
			e.FieldStart("tds2_ship_addr_country")
			s.Tds2ShipAddrCountry.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrState != nil {
			e.FieldStart("tds2_ship_addr_state")
			s.Tds2ShipAddrState.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrCity != nil {
			e.FieldStart("tds2_ship_addr_city")
			s.Tds2ShipAddrCity.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine1 != nil {
			e.FieldStart("tds2_ship_addr_line_1")
			s.Tds2ShipAddrLine1.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine2 != nil {
			e.FieldStart("tds2_ship_addr_line_2")
			s.Tds2ShipAddrLine2.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrLine3 != nil {
			e.FieldStart("tds2_ship_addr_line_3")
			s.Tds2ShipAddrLine3.Encode(e)
		}
	}
	{
		if s.Tds2ShipAddrPostCode != nil {
			e.FieldStart("tds2_ship_addr_post_code")
			s.Tds2ShipAddrPostCode.Encode(e)
		}
	}
	{
		if s.Tds2ShipInd != nil {
			e.FieldStart("tds2_ship_ind")
			s.Tds2ShipInd.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryEmailAddress != nil {
			e.FieldStart("tds2_delivery_email_address")
			s.Tds2DeliveryEmailAddress.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneCc != nil {
			e.FieldStart("tds2_home_phone_cc")
			s.Tds2HomePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2HomePhoneNo != nil {
			e.FieldStart("tds2_home_phone_no")
			s.Tds2HomePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneCc != nil {
			e.FieldStart("tds2_mobile_phone_cc")
			s.Tds2MobilePhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2MobilePhoneNo != nil {
			e.FieldStart("tds2_mobile_phone_no")
			s.Tds2MobilePhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneCc != nil {
			e.FieldStart("tds2_work_phone_cc")
			s.Tds2WorkPhoneCc.Encode(e)
		}
	}
	{
		if s.Tds2WorkPhoneNo != nil {
			e.FieldStart("tds2_work_phone_no")
			s.Tds2WorkPhoneNo.Encode(e)
		}
	}
	{
		if s.Tds2DeliveryTimeframe != nil {
			e.FieldStart("tds2_delivery_timeframe")
			s.Tds2DeliveryTimeframe.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderDate != nil {
			e.FieldStart("tds2_pre_order_date")
			s.Tds2PreOrderDate.Encode(e)
		}
	}
	{
		if s.Tds2PreOrderPurchaseInd != nil {
			e.FieldStart("tds2_pre_order_purchase_ind")
			s.Tds2PreOrderPurchaseInd.Encode(e)
		}
	}
	{
		if s.Tds2ReorderItemsInd != nil {
			e.FieldStart("tds2_reorder_items_ind")
			s.Tds2ReorderItemsInd.Encode(e)
		}
	}
	{
		if s.Tds2RecurringExpiry != nil {
			e.FieldStart("tds2_recurring_expiry")
			s.Tds2RecurringExpiry.Encode(e)
		}
	}
	{
		if s.Tds2RecurringFrequency != nil {
			e.FieldStart("tds2_recurring_frequency")
			s.Tds2RecurringFrequency.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardAmount != nil {
			e.FieldStart("tds2_gift_card_amount")
			s.Tds2GiftCardAmount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCount != nil {
			e.FieldStart("tds2_gift_card_count")
			s.Tds2GiftCardCount.Encode(e)
		}
	}
	{
		if s.Tds2GiftCardCurr != nil {
			e.FieldStart("tds2_gift_card_curr")
			s.Tds2GiftCardCurr.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestCard = [49]string{
	0:  "job_code",
	1:  "tds_type",
	2:  "tds2_type",
	3:  "td_tenant_name",
	4:  "tds2_ch_acc_change",
	5:  "tds2_ch_acc_date",
	6:  "tds2_ch_acc_pw_change",
	7:  "tds2_nb_purchase_account",
	8:  "tds2_payment_acc_age",
	9:  "tds2_provision_attempts_day",
	10: "tds2_ship_address_usage",
	11: "tds2_ship_name_ind",
	12: "tds2_suspicious_acc_activity",
	13: "tds2_txn_activity_day",
	14: "tds2_txn_activity_year",
	15: "tds2_three_ds_req_auth_data",
	16: "tds2_three_ds_req_auth_method",
	17: "tds2_addr_match",
	18: "tds2_bill_addr_country",
	19: "tds2_bill_addr_state",
	20: "tds2_bill_addr_city",
	21: "tds2_bill_addr_line_1",
	22: "tds2_bill_addr_line_2",
	23: "tds2_bill_addr_line_3",
	24: "tds2_bill_addr_post_code",
	25: "tds2_ship_addr_country",
	26: "tds2_ship_addr_state",
	27: "tds2_ship_addr_city",
	28: "tds2_ship_addr_line_1",
	29: "tds2_ship_addr_line_2",
	30: "tds2_ship_addr_line_3",
	31: "tds2_ship_addr_post_code",
	32: "tds2_ship_ind",
	33: "tds2_delivery_email_address",
	34: "tds2_home_phone_cc",
	35: "tds2_home_phone_no",
	36: "tds2_mobile_phone_cc",
	37: "tds2_mobile_phone_no",
	38: "tds2_work_phone_cc",
	39: "tds2_work_phone_no",
	40: "tds2_delivery_timeframe",
	41: "tds2_pre_order_date",
	42: "tds2_pre_order_purchase_ind",
	43: "tds2_reorder_items_ind",
	44: "tds2_recurring_expiry",
	45: "tds2_recurring_frequency",
	46: "tds2_gift_card_amount",
	47: "tds2_gift_card_count",
	48: "tds2_gift_card_curr",
}

// Decode decodes PaymentSessionCreatingRequestCard from json.
func (s *PaymentSessionCreatingRequestCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCard to nil")
	}
	var requiredBitSet [7]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_ch_acc_change":
			if err := func() error {
				s.Tds2ChAccChange = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccChange = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_change\"")
			}
		case "tds2_ch_acc_date":
			if err := func() error {
				s.Tds2ChAccDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_date\"")
			}
		case "tds2_ch_acc_pw_change":
			if err := func() error {
				s.Tds2ChAccPwChange = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ChAccPwChange = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ch_acc_pw_change\"")
			}
		case "tds2_nb_purchase_account":
			if err := func() error {
				s.Tds2NbPurchaseAccount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2NbPurchaseAccount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_nb_purchase_account\"")
			}
		case "tds2_payment_acc_age":
			if err := func() error {
				s.Tds2PaymentAccAge = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PaymentAccAge = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_payment_acc_age\"")
			}
		case "tds2_provision_attempts_day":
			if err := func() error {
				s.Tds2ProvisionAttemptsDay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ProvisionAttemptsDay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_provision_attempts_day\"")
			}
		case "tds2_ship_address_usage":
			if err := func() error {
				s.Tds2ShipAddressUsage = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddressUsage = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_address_usage\"")
			}
		case "tds2_ship_name_ind":
			if err := func() error {
				s.Tds2ShipNameInd = nil
				var elem NilPaymentSessionCreatingRequestCardTds2ShipNameInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipNameInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_name_ind\"")
			}
		case "tds2_suspicious_acc_activity":
			if err := func() error {
				s.Tds2SuspiciousAccActivity = nil
				var elem NilPaymentSessionCreatingRequestCardTds2SuspiciousAccActivity
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2SuspiciousAccActivity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_suspicious_acc_activity\"")
			}
		case "tds2_txn_activity_day":
			if err := func() error {
				s.Tds2TxnActivityDay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2TxnActivityDay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_day\"")
			}
		case "tds2_txn_activity_year":
			if err := func() error {
				s.Tds2TxnActivityYear = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2TxnActivityYear = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_txn_activity_year\"")
			}
		case "tds2_three_ds_req_auth_data":
			if err := func() error {
				s.Tds2ThreeDsReqAuthData = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ThreeDsReqAuthData = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_data\"")
			}
		case "tds2_three_ds_req_auth_method":
			if err := func() error {
				s.Tds2ThreeDsReqAuthMethod = nil
				var elem NilPaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ThreeDsReqAuthMethod = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_three_ds_req_auth_method\"")
			}
		case "tds2_addr_match":
			if err := func() error {
				s.Tds2AddrMatch = nil
				var elem NilPaymentSessionCreatingRequestCardTds2AddrMatch
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2AddrMatch = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_addr_match\"")
			}
		case "tds2_bill_addr_country":
			if err := func() error {
				s.Tds2BillAddrCountry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrCountry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_country\"")
			}
		case "tds2_bill_addr_state":
			if err := func() error {
				s.Tds2BillAddrState = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrState = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_state\"")
			}
		case "tds2_bill_addr_city":
			if err := func() error {
				s.Tds2BillAddrCity = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrCity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_city\"")
			}
		case "tds2_bill_addr_line_1":
			if err := func() error {
				s.Tds2BillAddrLine1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrLine1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_1\"")
			}
		case "tds2_bill_addr_line_2":
			if err := func() error {
				s.Tds2BillAddrLine2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrLine2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_2\"")
			}
		case "tds2_bill_addr_line_3":
			if err := func() error {
				s.Tds2BillAddrLine3.Reset()
				if err := s.Tds2BillAddrLine3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_line_3\"")
			}
		case "tds2_bill_addr_post_code":
			if err := func() error {
				s.Tds2BillAddrPostCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2BillAddrPostCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_bill_addr_post_code\"")
			}
		case "tds2_ship_addr_country":
			if err := func() error {
				s.Tds2ShipAddrCountry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrCountry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_country\"")
			}
		case "tds2_ship_addr_state":
			if err := func() error {
				s.Tds2ShipAddrState = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrState = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_state\"")
			}
		case "tds2_ship_addr_city":
			if err := func() error {
				s.Tds2ShipAddrCity = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrCity = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_city\"")
			}
		case "tds2_ship_addr_line_1":
			if err := func() error {
				s.Tds2ShipAddrLine1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_1\"")
			}
		case "tds2_ship_addr_line_2":
			if err := func() error {
				s.Tds2ShipAddrLine2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_2\"")
			}
		case "tds2_ship_addr_line_3":
			if err := func() error {
				s.Tds2ShipAddrLine3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrLine3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_line_3\"")
			}
		case "tds2_ship_addr_post_code":
			if err := func() error {
				s.Tds2ShipAddrPostCode = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipAddrPostCode = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_addr_post_code\"")
			}
		case "tds2_ship_ind":
			if err := func() error {
				s.Tds2ShipInd = nil
				var elem NilPaymentSessionCreatingRequestCardTds2ShipInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ShipInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ship_ind\"")
			}
		case "tds2_delivery_email_address":
			if err := func() error {
				s.Tds2DeliveryEmailAddress = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2DeliveryEmailAddress = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_email_address\"")
			}
		case "tds2_home_phone_cc":
			if err := func() error {
				s.Tds2HomePhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2HomePhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_cc\"")
			}
		case "tds2_home_phone_no":
			if err := func() error {
				s.Tds2HomePhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2HomePhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_home_phone_no\"")
			}
		case "tds2_mobile_phone_cc":
			if err := func() error {
				s.Tds2MobilePhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2MobilePhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_cc\"")
			}
		case "tds2_mobile_phone_no":
			if err := func() error {
				s.Tds2MobilePhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2MobilePhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_mobile_phone_no\"")
			}
		case "tds2_work_phone_cc":
			if err := func() error {
				s.Tds2WorkPhoneCc = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2WorkPhoneCc = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_cc\"")
			}
		case "tds2_work_phone_no":
			if err := func() error {
				s.Tds2WorkPhoneNo = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2WorkPhoneNo = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_work_phone_no\"")
			}
		case "tds2_delivery_timeframe":
			if err := func() error {
				s.Tds2DeliveryTimeframe = nil
				var elem NilPaymentSessionCreatingRequestCardTds2DeliveryTimeframe
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2DeliveryTimeframe = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_delivery_timeframe\"")
			}
		case "tds2_pre_order_date":
			if err := func() error {
				s.Tds2PreOrderDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PreOrderDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_date\"")
			}
		case "tds2_pre_order_purchase_ind":
			if err := func() error {
				s.Tds2PreOrderPurchaseInd = nil
				var elem NilPaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2PreOrderPurchaseInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_pre_order_purchase_ind\"")
			}
		case "tds2_reorder_items_ind":
			if err := func() error {
				s.Tds2ReorderItemsInd = nil
				var elem NilPaymentSessionCreatingRequestCardTds2ReorderItemsInd
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2ReorderItemsInd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_reorder_items_ind\"")
			}
		case "tds2_recurring_expiry":
			if err := func() error {
				s.Tds2RecurringExpiry = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2RecurringExpiry = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_expiry\"")
			}
		case "tds2_recurring_frequency":
			if err := func() error {
				s.Tds2RecurringFrequency = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2RecurringFrequency = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_recurring_frequency\"")
			}
		case "tds2_gift_card_amount":
			if err := func() error {
				s.Tds2GiftCardAmount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_amount\"")
			}
		case "tds2_gift_card_count":
			if err := func() error {
				s.Tds2GiftCardCount = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardCount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_count\"")
			}
		case "tds2_gift_card_curr":
			if err := func() error {
				s.Tds2GiftCardCurr = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Tds2GiftCardCurr = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_gift_card_curr\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestCard")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [7]uint8{
		0b00000001,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestCard) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestCard[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardJobCode as json.
func (s PaymentSessionCreatingRequestCardJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardJobCode from json.
func (s *PaymentSessionCreatingRequestCardJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardJobCode(v) {
	case PaymentSessionCreatingRequestCardJobCodeAUTH:
		*s = PaymentSessionCreatingRequestCardJobCodeAUTH
	case PaymentSessionCreatingRequestCardJobCodeCAPTURE:
		*s = PaymentSessionCreatingRequestCardJobCodeCAPTURE
	default:
		*s = PaymentSessionCreatingRequestCardJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2AddrMatch as json.
func (s PaymentSessionCreatingRequestCardTds2AddrMatch) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2AddrMatch from json.
func (s *PaymentSessionCreatingRequestCardTds2AddrMatch) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2AddrMatch to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2AddrMatch(v) {
	case PaymentSessionCreatingRequestCardTds2AddrMatchY:
		*s = PaymentSessionCreatingRequestCardTds2AddrMatchY
	case PaymentSessionCreatingRequestCardTds2AddrMatchN:
		*s = PaymentSessionCreatingRequestCardTds2AddrMatchN
	default:
		*s = PaymentSessionCreatingRequestCardTds2AddrMatch(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2AddrMatch) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2AddrMatch) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2DeliveryTimeframe as json.
func (s PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2DeliveryTimeframe from json.
func (s *PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2DeliveryTimeframe to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2DeliveryTimeframe(v) {
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe01
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe02
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe03
	case PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe04
	default:
		*s = PaymentSessionCreatingRequestCardTds2DeliveryTimeframe(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd as json.
func (s PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd from json.
func (s *PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd(v) {
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01:
		*s = PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd01
	case PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02:
		*s = PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd02
	default:
		*s = PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ReorderItemsInd as json.
func (s PaymentSessionCreatingRequestCardTds2ReorderItemsInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ReorderItemsInd from json.
func (s *PaymentSessionCreatingRequestCardTds2ReorderItemsInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2ReorderItemsInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2ReorderItemsInd(v) {
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd01:
		*s = PaymentSessionCreatingRequestCardTds2ReorderItemsInd01
	case PaymentSessionCreatingRequestCardTds2ReorderItemsInd02:
		*s = PaymentSessionCreatingRequestCardTds2ReorderItemsInd02
	default:
		*s = PaymentSessionCreatingRequestCardTds2ReorderItemsInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2ReorderItemsInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ReorderItemsInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ShipInd as json.
func (s PaymentSessionCreatingRequestCardTds2ShipInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ShipInd from json.
func (s *PaymentSessionCreatingRequestCardTds2ShipInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2ShipInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2ShipInd(v) {
	case PaymentSessionCreatingRequestCardTds2ShipInd01:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd01
	case PaymentSessionCreatingRequestCardTds2ShipInd02:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd02
	case PaymentSessionCreatingRequestCardTds2ShipInd03:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd03
	case PaymentSessionCreatingRequestCardTds2ShipInd04:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd04
	case PaymentSessionCreatingRequestCardTds2ShipInd05:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd05
	case PaymentSessionCreatingRequestCardTds2ShipInd06:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd06
	case PaymentSessionCreatingRequestCardTds2ShipInd07:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd07
	default:
		*s = PaymentSessionCreatingRequestCardTds2ShipInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2ShipInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ShipInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ShipNameInd as json.
func (s PaymentSessionCreatingRequestCardTds2ShipNameInd) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ShipNameInd from json.
func (s *PaymentSessionCreatingRequestCardTds2ShipNameInd) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2ShipNameInd to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2ShipNameInd(v) {
	case PaymentSessionCreatingRequestCardTds2ShipNameInd01:
		*s = PaymentSessionCreatingRequestCardTds2ShipNameInd01
	case PaymentSessionCreatingRequestCardTds2ShipNameInd02:
		*s = PaymentSessionCreatingRequestCardTds2ShipNameInd02
	default:
		*s = PaymentSessionCreatingRequestCardTds2ShipNameInd(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2ShipNameInd) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ShipNameInd) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity as json.
func (s PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity from json.
func (s *PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity(v) {
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01:
		*s = PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity01
	case PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02:
		*s = PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity02
	default:
		*s = PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod as json.
func (s PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod from json.
func (s *PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod(v) {
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod01
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod02
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod03
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod04
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod05
	case PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod06
	default:
		*s = PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTds2Type as json.
func (s PaymentSessionCreatingRequestCardTds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTds2Type from json.
func (s *PaymentSessionCreatingRequestCardTds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTds2Type(v) {
	case PaymentSessionCreatingRequestCardTds2Type2:
		*s = PaymentSessionCreatingRequestCardTds2Type2
	case PaymentSessionCreatingRequestCardTds2Type3:
		*s = PaymentSessionCreatingRequestCardTds2Type3
	default:
		*s = PaymentSessionCreatingRequestCardTds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestCardTdsType as json.
func (s PaymentSessionCreatingRequestCardTdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestCardTdsType from json.
func (s *PaymentSessionCreatingRequestCardTdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestCardTdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestCardTdsType(v) {
	case PaymentSessionCreatingRequestCardTdsType0:
		*s = PaymentSessionCreatingRequestCardTdsType0
	case PaymentSessionCreatingRequestCardTdsType2:
		*s = PaymentSessionCreatingRequestCardTdsType2
	default:
		*s = PaymentSessionCreatingRequestCardTdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestCardTdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestCardTdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestGuideMailSendFlag as json.
func (s PaymentSessionCreatingRequestGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestGuideMailSendFlag from json.
func (s *PaymentSessionCreatingRequestGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestGuideMailSendFlag(v) {
	case PaymentSessionCreatingRequestGuideMailSendFlag0:
		*s = PaymentSessionCreatingRequestGuideMailSendFlag0
	case PaymentSessionCreatingRequestGuideMailSendFlag1:
		*s = PaymentSessionCreatingRequestGuideMailSendFlag1
	default:
		*s = PaymentSessionCreatingRequestGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		e.FieldStart("konbini_reception_mail_send_flag")
		s.KonbiniReceptionMailSendFlag.Encode(e)
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestKonbini = [2]string{
	0: "payment_term_day",
	1: "konbini_reception_mail_send_flag",
}

// Decode decodes PaymentSessionCreatingRequestKonbini from json.
func (s *PaymentSessionCreatingRequestKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestKonbini to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "konbini_reception_mail_send_flag":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.KonbiniReceptionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_mail_send_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestKonbini")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestKonbini) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestKonbini[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag as json.
func (s PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag from json.
func (s *PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag(v) {
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0:
		*s = PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag0
	case PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1:
		*s = PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag1
	default:
		*s = PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestPaypay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestPaypay) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("job_code")
		s.JobCode.Encode(e)
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestPaypay = [2]string{
	0: "job_code",
	1: "order_description",
}

// Decode decodes PaymentSessionCreatingRequestPaypay from json.
func (s *PaymentSessionCreatingRequestPaypay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestPaypay to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestPaypay")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestPaypay) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestPaypay[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestPaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestPaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestPaypayJobCode as json.
func (s PaymentSessionCreatingRequestPaypayJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestPaypayJobCode from json.
func (s *PaymentSessionCreatingRequestPaypayJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestPaypayJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestPaypayJobCode(v) {
	case PaymentSessionCreatingRequestPaypayJobCodeAUTH:
		*s = PaymentSessionCreatingRequestPaypayJobCodeAUTH
	case PaymentSessionCreatingRequestPaypayJobCodeCAPTURE:
		*s = PaymentSessionCreatingRequestPaypayJobCodeCAPTURE
	default:
		*s = PaymentSessionCreatingRequestPaypayJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestPaypayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestPaypayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestThanksMailSendFlag as json.
func (s PaymentSessionCreatingRequestThanksMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestThanksMailSendFlag from json.
func (s *PaymentSessionCreatingRequestThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestThanksMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestThanksMailSendFlag(v) {
	case PaymentSessionCreatingRequestThanksMailSendFlag0:
		*s = PaymentSessionCreatingRequestThanksMailSendFlag0
	case PaymentSessionCreatingRequestThanksMailSendFlag1:
		*s = PaymentSessionCreatingRequestThanksMailSendFlag1
	default:
		*s = PaymentSessionCreatingRequestThanksMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingRequestTransaction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingRequestTransaction) encodeFields(e *jx.Encoder) {
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingRequestTransaction = [7]string{
	0: "pay_type",
	1: "amount",
	2: "order_id",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes PaymentSessionCreatingRequestTransaction from json.
func (s *PaymentSessionCreatingRequestTransaction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestTransaction to nil")
	}
	var requiredBitSet [1]uint8
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingRequestTransaction")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPaymentSessionCreatingRequestTransaction) {
					name = jsonFieldsNameOfPaymentSessionCreatingRequestTransaction[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingRequestTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingRequestTransactionPayTypeItem as json.
func (s PaymentSessionCreatingRequestTransactionPayTypeItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingRequestTransactionPayTypeItem from json.
func (s *PaymentSessionCreatingRequestTransactionPayTypeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingRequestTransactionPayTypeItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingRequestTransactionPayTypeItem(v) {
	case PaymentSessionCreatingRequestTransactionPayTypeItemCard:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemCard
	case PaymentSessionCreatingRequestTransactionPayTypeItemKonbini:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemKonbini
	case PaymentSessionCreatingRequestTransactionPayTypeItemPaypay:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItemPaypay
	default:
		*s = PaymentSessionCreatingRequestTransactionPayTypeItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingRequestTransactionPayTypeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingRequestTransactionPayTypeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.LinkURL.Set {
			e.FieldStart("link_url")
			s.LinkURL.Encode(e)
		}
	}
	{
		if s.SuccessURL.Set {
			e.FieldStart("success_url")
			s.SuccessURL.Encode(e)
		}
	}
	{
		if s.CancelURL.Set {
			e.FieldStart("cancel_url")
			s.CancelURL.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.ShopServiceName.Set {
			e.FieldStart("shop_service_name")
			s.ShopServiceName.Encode(e)
		}
	}
	{
		if s.GuideMailSendFlag.Set {
			e.FieldStart("guide_mail_send_flag")
			s.GuideMailSendFlag.Encode(e)
		}
	}
	{
		if s.ReceiverMail.Set {
			e.FieldStart("receiver_mail")
			s.ReceiverMail.Encode(e)
		}
	}
	{
		if s.MailCustomerName.Set {
			e.FieldStart("mail_customer_name")
			s.MailCustomerName.Encode(e)
		}
	}
	{
		if s.ThanksMailSendFlag.Set {
			e.FieldStart("thanks_mail_send_flag")
			s.ThanksMailSendFlag.Encode(e)
		}
	}
	{
		if s.ShopMailTemplateID.Set {
			e.FieldStart("shop_mail_template_id")
			s.ShopMailTemplateID.Encode(e)
		}
	}
	{
		if s.Transaction.Set {
			e.FieldStart("transaction")
			s.Transaction.Encode(e)
		}
	}
	{
		if s.Card.Set {
			e.FieldStart("card")
			s.Card.Encode(e)
		}
	}
	{
		if s.Konbini.Set {
			e.FieldStart("konbini")
			s.Konbini.Encode(e)
		}
	}
	{
		if s.Paypay.Set {
			e.FieldStart("paypay")
			s.Paypay.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingResponse = [18]string{
	0:  "id",
	1:  "link_url",
	2:  "success_url",
	3:  "cancel_url",
	4:  "status",
	5:  "expire",
	6:  "shop_service_name",
	7:  "guide_mail_send_flag",
	8:  "receiver_mail",
	9:  "mail_customer_name",
	10: "thanks_mail_send_flag",
	11: "shop_mail_template_id",
	12: "transaction",
	13: "card",
	14: "konbini",
	15: "paypay",
	16: "created",
	17: "updated",
}

// Decode decodes PaymentSessionCreatingResponse from json.
func (s *PaymentSessionCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "link_url":
			if err := func() error {
				s.LinkURL.Reset()
				if err := s.LinkURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_url\"")
			}
		case "success_url":
			if err := func() error {
				s.SuccessURL.Reset()
				if err := s.SuccessURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"success_url\"")
			}
		case "cancel_url":
			if err := func() error {
				s.CancelURL.Reset()
				if err := s.CancelURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_url\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "shop_service_name":
			if err := func() error {
				s.ShopServiceName.Reset()
				if err := s.ShopServiceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_service_name\"")
			}
		case "guide_mail_send_flag":
			if err := func() error {
				s.GuideMailSendFlag.Reset()
				if err := s.GuideMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"guide_mail_send_flag\"")
			}
		case "receiver_mail":
			if err := func() error {
				s.ReceiverMail.Reset()
				if err := s.ReceiverMail.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receiver_mail\"")
			}
		case "mail_customer_name":
			if err := func() error {
				s.MailCustomerName.Reset()
				if err := s.MailCustomerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mail_customer_name\"")
			}
		case "thanks_mail_send_flag":
			if err := func() error {
				s.ThanksMailSendFlag.Reset()
				if err := s.ThanksMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"thanks_mail_send_flag\"")
			}
		case "shop_mail_template_id":
			if err := func() error {
				s.ShopMailTemplateID.Reset()
				if err := s.ShopMailTemplateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_template_id\"")
			}
		case "transaction":
			if err := func() error {
				s.Transaction.Reset()
				if err := s.Transaction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction\"")
			}
		case "card":
			if err := func() error {
				s.Card.Reset()
				if err := s.Card.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card\"")
			}
		case "konbini":
			if err := func() error {
				s.Konbini.Reset()
				if err := s.Konbini.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini\"")
			}
		case "paypay":
			if err := func() error {
				s.Paypay.Reset()
				if err := s.Paypay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingResponseCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingResponseCard) encodeFields(e *jx.Encoder) {
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.TdTenantName.Set {
			e.FieldStart("td_tenant_name")
			s.TdTenantName.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingResponseCard = [5]string{
	0: "job_code",
	1: "tds_type",
	2: "td_tenant_name",
	3: "tds2_type",
	4: "item_code",
}

// Decode decodes PaymentSessionCreatingResponseCard from json.
func (s *PaymentSessionCreatingResponseCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseCard to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "td_tenant_name":
			if err := func() error {
				s.TdTenantName.Reset()
				if err := s.TdTenantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"td_tenant_name\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingResponseCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingResponseCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseGuideMailSendFlag as json.
func (s PaymentSessionCreatingResponseGuideMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponseGuideMailSendFlag from json.
func (s *PaymentSessionCreatingResponseGuideMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseGuideMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponseGuideMailSendFlag(v) {
	case PaymentSessionCreatingResponseGuideMailSendFlag0:
		*s = PaymentSessionCreatingResponseGuideMailSendFlag0
	case PaymentSessionCreatingResponseGuideMailSendFlag1:
		*s = PaymentSessionCreatingResponseGuideMailSendFlag1
	default:
		*s = PaymentSessionCreatingResponseGuideMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponseGuideMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseGuideMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingResponseKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingResponseKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.KonbiniReceptionURL.Set {
			e.FieldStart("konbini_reception_url")
			s.KonbiniReceptionURL.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.KonbiniReceptionMailSendFlag.Set {
			e.FieldStart("konbini_reception_mail_send_flag")
			s.KonbiniReceptionMailSendFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingResponseKonbini = [3]string{
	0: "konbini_reception_url",
	1: "payment_term_day",
	2: "konbini_reception_mail_send_flag",
}

// Decode decodes PaymentSessionCreatingResponseKonbini from json.
func (s *PaymentSessionCreatingResponseKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseKonbini to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "konbini_reception_url":
			if err := func() error {
				s.KonbiniReceptionURL.Reset()
				if err := s.KonbiniReceptionURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_url\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "konbini_reception_mail_send_flag":
			if err := func() error {
				s.KonbiniReceptionMailSendFlag.Reset()
				if err := s.KonbiniReceptionMailSendFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_reception_mail_send_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingResponseKonbini")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingResponseKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag as json.
func (s PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag from json.
func (s *PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag(v) {
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0:
		*s = PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag0
	case PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1:
		*s = PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag1
	default:
		*s = PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingResponsePaypay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingResponsePaypay) encodeFields(e *jx.Encoder) {
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingResponsePaypay = [2]string{
	0: "job_code",
	1: "order_description",
}

// Decode decodes PaymentSessionCreatingResponsePaypay from json.
func (s *PaymentSessionCreatingResponsePaypay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponsePaypay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingResponsePaypay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingResponsePaypay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponsePaypay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponsePaypayJobCode as json.
func (s PaymentSessionCreatingResponsePaypayJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponsePaypayJobCode from json.
func (s *PaymentSessionCreatingResponsePaypayJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponsePaypayJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponsePaypayJobCode(v) {
	case PaymentSessionCreatingResponsePaypayJobCodeAUTH:
		*s = PaymentSessionCreatingResponsePaypayJobCodeAUTH
	case PaymentSessionCreatingResponsePaypayJobCodeCAPTURE:
		*s = PaymentSessionCreatingResponsePaypayJobCodeCAPTURE
	default:
		*s = PaymentSessionCreatingResponsePaypayJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponsePaypayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponsePaypayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseStatus as json.
func (s PaymentSessionCreatingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponseStatus from json.
func (s *PaymentSessionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponseStatus(v) {
	case PaymentSessionCreatingResponseStatusCREATE:
		*s = PaymentSessionCreatingResponseStatusCREATE
	default:
		*s = PaymentSessionCreatingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseThanksMailSendFlag as json.
func (s PaymentSessionCreatingResponseThanksMailSendFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponseThanksMailSendFlag from json.
func (s *PaymentSessionCreatingResponseThanksMailSendFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseThanksMailSendFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponseThanksMailSendFlag(v) {
	case PaymentSessionCreatingResponseThanksMailSendFlag0:
		*s = PaymentSessionCreatingResponseThanksMailSendFlag0
	case PaymentSessionCreatingResponseThanksMailSendFlag1:
		*s = PaymentSessionCreatingResponseThanksMailSendFlag1
	default:
		*s = PaymentSessionCreatingResponseThanksMailSendFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponseThanksMailSendFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseThanksMailSendFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PaymentSessionCreatingResponseTransaction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PaymentSessionCreatingResponseTransaction) encodeFields(e *jx.Encoder) {
	{
		if s.PayType != nil {
			e.FieldStart("pay_type")
			e.ArrStart()
			for _, elem := range s.PayType {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfPaymentSessionCreatingResponseTransaction = [7]string{
	0: "pay_type",
	1: "order_id",
	2: "amount",
	3: "tax",
	4: "client_field_1",
	5: "client_field_2",
	6: "client_field_3",
}

// Decode decodes PaymentSessionCreatingResponseTransaction from json.
func (s *PaymentSessionCreatingResponseTransaction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseTransaction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			if err := func() error {
				s.PayType = make([]PaymentSessionCreatingResponseTransactionPayTypeItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PaymentSessionCreatingResponseTransactionPayTypeItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PayType = append(s.PayType, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PaymentSessionCreatingResponseTransaction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PaymentSessionCreatingResponseTransaction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseTransaction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PaymentSessionCreatingResponseTransactionPayTypeItem as json.
func (s PaymentSessionCreatingResponseTransactionPayTypeItem) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PaymentSessionCreatingResponseTransactionPayTypeItem from json.
func (s *PaymentSessionCreatingResponseTransactionPayTypeItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PaymentSessionCreatingResponseTransactionPayTypeItem to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PaymentSessionCreatingResponseTransactionPayTypeItem(v) {
	case PaymentSessionCreatingResponseTransactionPayTypeItemCard:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemCard
	case PaymentSessionCreatingResponseTransactionPayTypeItemKonbini:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemKonbini
	case PaymentSessionCreatingResponseTransactionPayTypeItemPaypay:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItemPaypay
	default:
		*s = PaymentSessionCreatingResponseTransactionPayTypeItem(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PaymentSessionCreatingResponseTransactionPayTypeItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PaymentSessionCreatingResponseTransactionPayTypeItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Plan) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Plan) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlan = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes Plan from json.
func (s *Plan) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Plan to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Plan")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Plan) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Plan) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("plan_name")
		e.Str(s.PlanName)
	}
	{
		if s.Description != nil {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		e.FieldStart("amount")
		e.Str(s.Amount)
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanCreatingRequest = [7]string{
	0: "id",
	1: "plan_name",
	2: "description",
	3: "amount",
	4: "tax",
	5: "interval_pattern",
	6: "interval_count",
}

// Decode decodes PlanCreatingRequest from json.
func (s *PlanCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				v, err := d.Str()
				s.PlanName = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Description = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "amount":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.Amount = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00001010,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPlanCreatingRequest) {
					name = jsonFieldsNameOfPlanCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingRequestIntervalCount as json.
func (s PlanCreatingRequestIntervalCount) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanCreatingRequestIntervalCount from json.
func (s *PlanCreatingRequestIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingRequestIntervalCount to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanCreatingRequestIntervalCount(v) {
	case PlanCreatingRequestIntervalCount1:
		*s = PlanCreatingRequestIntervalCount1
	case PlanCreatingRequestIntervalCount2:
		*s = PlanCreatingRequestIntervalCount2
	case PlanCreatingRequestIntervalCount3:
		*s = PlanCreatingRequestIntervalCount3
	case PlanCreatingRequestIntervalCount6:
		*s = PlanCreatingRequestIntervalCount6
	default:
		*s = PlanCreatingRequestIntervalCount(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingRequestIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingRequestIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingRequestIntervalPattern as json.
func (s PlanCreatingRequestIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanCreatingRequestIntervalPattern from json.
func (s *PlanCreatingRequestIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingRequestIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanCreatingRequestIntervalPattern(v) {
	case PlanCreatingRequestIntervalPatternMonth:
		*s = PlanCreatingRequestIntervalPatternMonth
	case PlanCreatingRequestIntervalPatternYear:
		*s = PlanCreatingRequestIntervalPatternYear
	default:
		*s = PlanCreatingRequestIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingRequestIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingRequestIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanCreatingResponse = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes PlanCreatingResponse from json.
func (s *PlanCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseDeleteFlag as json.
func (s PlanCreatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanCreatingResponseDeleteFlag from json.
func (s *PlanCreatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanCreatingResponseDeleteFlag(v) {
	case PlanCreatingResponseDeleteFlag1:
		*s = PlanCreatingResponseDeleteFlag1
	case PlanCreatingResponseDeleteFlag0:
		*s = PlanCreatingResponseDeleteFlag0
	default:
		*s = PlanCreatingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseIntervalCount as json.
func (s PlanCreatingResponseIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanCreatingResponseIntervalCount from json.
func (s *PlanCreatingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingResponseIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanCreatingResponseIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseIntervalPattern as json.
func (s PlanCreatingResponseIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanCreatingResponseIntervalPattern from json.
func (s *PlanCreatingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingResponseIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanCreatingResponseIntervalPattern(v) {
	case PlanCreatingResponseIntervalPatternMonth:
		*s = PlanCreatingResponseIntervalPatternMonth
	case PlanCreatingResponseIntervalPatternYear:
		*s = PlanCreatingResponseIntervalPatternYear
	default:
		*s = PlanCreatingResponseIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanCreatingResponseUsedFlag as json.
func (s PlanCreatingResponseUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanCreatingResponseUsedFlag from json.
func (s *PlanCreatingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanCreatingResponseUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanCreatingResponseUsedFlag(v) {
	case PlanCreatingResponseUsedFlag0:
		*s = PlanCreatingResponseUsedFlag0
	case PlanCreatingResponseUsedFlag1:
		*s = PlanCreatingResponseUsedFlag1
	default:
		*s = PlanCreatingResponseUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanCreatingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanCreatingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeleteFlag as json.
func (s PlanDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanDeleteFlag from json.
func (s *PlanDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanDeleteFlag(v) {
	case PlanDeleteFlag1:
		*s = PlanDeleteFlag1
	case PlanDeleteFlag0:
		*s = PlanDeleteFlag0
	default:
		*s = PlanDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanDeletingResponse = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes PlanDeletingResponse from json.
func (s *PlanDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseDeleteFlag as json.
func (s PlanDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanDeletingResponseDeleteFlag from json.
func (s *PlanDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanDeletingResponseDeleteFlag(v) {
	case PlanDeletingResponseDeleteFlag1:
		*s = PlanDeletingResponseDeleteFlag1
	case PlanDeletingResponseDeleteFlag0:
		*s = PlanDeletingResponseDeleteFlag0
	default:
		*s = PlanDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseIntervalCount as json.
func (s PlanDeletingResponseIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanDeletingResponseIntervalCount from json.
func (s *PlanDeletingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeletingResponseIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanDeletingResponseIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanDeletingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeletingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseIntervalPattern as json.
func (s PlanDeletingResponseIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanDeletingResponseIntervalPattern from json.
func (s *PlanDeletingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeletingResponseIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanDeletingResponseIntervalPattern(v) {
	case PlanDeletingResponseIntervalPatternMonth:
		*s = PlanDeletingResponseIntervalPatternMonth
	case PlanDeletingResponseIntervalPatternYear:
		*s = PlanDeletingResponseIntervalPatternYear
	default:
		*s = PlanDeletingResponseIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanDeletingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeletingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanDeletingResponseUsedFlag as json.
func (s PlanDeletingResponseUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanDeletingResponseUsedFlag from json.
func (s *PlanDeletingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanDeletingResponseUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanDeletingResponseUsedFlag(v) {
	case PlanDeletingResponseUsedFlag0:
		*s = PlanDeletingResponseUsedFlag0
	case PlanDeletingResponseUsedFlag1:
		*s = PlanDeletingResponseUsedFlag1
	default:
		*s = PlanDeletingResponseUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanDeletingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanDeletingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalCount as json.
func (s PlanIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanIntervalCount from json.
func (s *PlanIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanIntervalPattern as json.
func (s PlanIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanIntervalPattern from json.
func (s *PlanIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanIntervalPattern(v) {
	case PlanIntervalPatternMonth:
		*s = PlanIntervalPatternMonth
	case PlanIntervalPatternYear:
		*s = PlanIntervalPatternYear
	default:
		*s = PlanIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlanListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlanListRetrievingResponse from json.
func (s *PlanListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]Plan, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Plan
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanRetrievingResponse = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes PlanRetrievingResponse from json.
func (s *PlanRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseDeleteFlag as json.
func (s PlanRetrievingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanRetrievingResponseDeleteFlag from json.
func (s *PlanRetrievingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanRetrievingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanRetrievingResponseDeleteFlag(v) {
	case PlanRetrievingResponseDeleteFlag1:
		*s = PlanRetrievingResponseDeleteFlag1
	case PlanRetrievingResponseDeleteFlag0:
		*s = PlanRetrievingResponseDeleteFlag0
	default:
		*s = PlanRetrievingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanRetrievingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanRetrievingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseIntervalCount as json.
func (s PlanRetrievingResponseIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanRetrievingResponseIntervalCount from json.
func (s *PlanRetrievingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanRetrievingResponseIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanRetrievingResponseIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanRetrievingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanRetrievingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseIntervalPattern as json.
func (s PlanRetrievingResponseIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanRetrievingResponseIntervalPattern from json.
func (s *PlanRetrievingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanRetrievingResponseIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanRetrievingResponseIntervalPattern(v) {
	case PlanRetrievingResponseIntervalPatternMonth:
		*s = PlanRetrievingResponseIntervalPatternMonth
	case PlanRetrievingResponseIntervalPatternYear:
		*s = PlanRetrievingResponseIntervalPatternYear
	default:
		*s = PlanRetrievingResponseIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanRetrievingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanRetrievingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanRetrievingResponseUsedFlag as json.
func (s PlanRetrievingResponseUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanRetrievingResponseUsedFlag from json.
func (s *PlanRetrievingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanRetrievingResponseUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanRetrievingResponseUsedFlag(v) {
	case PlanRetrievingResponseUsedFlag0:
		*s = PlanRetrievingResponseUsedFlag0
	case PlanRetrievingResponseUsedFlag1:
		*s = PlanRetrievingResponseUsedFlag1
	default:
		*s = PlanRetrievingResponseUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanRetrievingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanRetrievingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description != nil {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanUpdatingRequest = [6]string{
	0: "plan_name",
	1: "description",
	2: "amount",
	3: "tax",
	4: "interval_pattern",
	5: "interval_count",
}

// Decode decodes PlanUpdatingRequest from json.
func (s *PlanUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Description = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingRequestIntervalCount as json.
func (s PlanUpdatingRequestIntervalCount) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUpdatingRequestIntervalCount from json.
func (s *PlanUpdatingRequestIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingRequestIntervalCount to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUpdatingRequestIntervalCount(v) {
	case PlanUpdatingRequestIntervalCount1:
		*s = PlanUpdatingRequestIntervalCount1
	case PlanUpdatingRequestIntervalCount2:
		*s = PlanUpdatingRequestIntervalCount2
	case PlanUpdatingRequestIntervalCount3:
		*s = PlanUpdatingRequestIntervalCount3
	case PlanUpdatingRequestIntervalCount6:
		*s = PlanUpdatingRequestIntervalCount6
	default:
		*s = PlanUpdatingRequestIntervalCount(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingRequestIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingRequestIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingRequestIntervalPattern as json.
func (s PlanUpdatingRequestIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUpdatingRequestIntervalPattern from json.
func (s *PlanUpdatingRequestIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingRequestIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUpdatingRequestIntervalPattern(v) {
	case PlanUpdatingRequestIntervalPatternMonth:
		*s = PlanUpdatingRequestIntervalPatternMonth
	case PlanUpdatingRequestIntervalPatternYear:
		*s = PlanUpdatingRequestIntervalPatternYear
	default:
		*s = PlanUpdatingRequestIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingRequestIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingRequestIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlanUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlanUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.UsedFlag.Set {
			e.FieldStart("used_flag")
			s.UsedFlag.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlanUpdatingResponse = [13]string{
	0:  "id",
	1:  "plan_name",
	2:  "description",
	3:  "shop_id",
	4:  "amount",
	5:  "tax",
	6:  "total_amount",
	7:  "interval_pattern",
	8:  "interval_count",
	9:  "used_flag",
	10: "delete_flag",
	11: "created",
	12: "updated",
}

// Decode decodes PlanUpdatingResponse from json.
func (s *PlanUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "used_flag":
			if err := func() error {
				s.UsedFlag.Reset()
				if err := s.UsedFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"used_flag\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlanUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlanUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseDeleteFlag as json.
func (s PlanUpdatingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUpdatingResponseDeleteFlag from json.
func (s *PlanUpdatingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUpdatingResponseDeleteFlag(v) {
	case PlanUpdatingResponseDeleteFlag1:
		*s = PlanUpdatingResponseDeleteFlag1
	case PlanUpdatingResponseDeleteFlag0:
		*s = PlanUpdatingResponseDeleteFlag0
	default:
		*s = PlanUpdatingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseIntervalCount as json.
func (s PlanUpdatingResponseIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes PlanUpdatingResponseIntervalCount from json.
func (s *PlanUpdatingResponseIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingResponseIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = PlanUpdatingResponseIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingResponseIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingResponseIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseIntervalPattern as json.
func (s PlanUpdatingResponseIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUpdatingResponseIntervalPattern from json.
func (s *PlanUpdatingResponseIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingResponseIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUpdatingResponseIntervalPattern(v) {
	case PlanUpdatingResponseIntervalPatternMonth:
		*s = PlanUpdatingResponseIntervalPatternMonth
	case PlanUpdatingResponseIntervalPatternYear:
		*s = PlanUpdatingResponseIntervalPatternYear
	default:
		*s = PlanUpdatingResponseIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingResponseIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingResponseIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUpdatingResponseUsedFlag as json.
func (s PlanUpdatingResponseUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUpdatingResponseUsedFlag from json.
func (s *PlanUpdatingResponseUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUpdatingResponseUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUpdatingResponseUsedFlag(v) {
	case PlanUpdatingResponseUsedFlag0:
		*s = PlanUpdatingResponseUsedFlag0
	case PlanUpdatingResponseUsedFlag1:
		*s = PlanUpdatingResponseUsedFlag1
	default:
		*s = PlanUpdatingResponseUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUpdatingResponseUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUpdatingResponseUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlanUsedFlag as json.
func (s PlanUsedFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlanUsedFlag from json.
func (s *PlanUsedFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlanUsedFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlanUsedFlag(v) {
	case PlanUsedFlag0:
		*s = PlanUsedFlag0
	case PlanUsedFlag1:
		*s = PlanUsedFlag1
	default:
		*s = PlanUsedFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlanUsedFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlanUsedFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountListItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountListItem) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount != nil {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate != nil {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate != nil {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart != nil {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd != nil {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline != nil {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate != nil {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count != nil {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount != nil {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee != nil {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount != nil {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount != nil {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount != nil {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount != nil {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount != nil {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformAccountListItem = [22]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "tax_amount",
	19: "created",
	20: "updated",
	21: "verified",
}

// Decode decodes PlatformAccountListItem from json.
func (s *PlatformAccountListItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountListItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DepositAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DepositDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ScheduledDepositDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermStart = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermEnd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentDeadline = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentCompletionDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Count = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SettlementAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.BankTransferFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TotalAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.FeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeTaxAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TaxAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountListItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountListItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountListItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlatformAccountListRetrievingResponse from json.
func (s *PlatformAccountListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PlatformAccountListItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformAccountListItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.DepositAmount.Set {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.DepositDate.Set {
			e.FieldStart("deposit_date")
			s.DepositDate.Encode(e)
		}
	}
	{
		if s.ScheduledDepositDate.Set {
			e.FieldStart("scheduled_deposit_date")
			s.ScheduledDepositDate.Encode(e)
		}
	}
	{
		if s.AggregateTermStart.Set {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd.Set {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.PaymentDeadline.Set {
			e.FieldStart("payment_deadline")
			s.PaymentDeadline.Encode(e)
		}
	}
	{
		if s.PaymentCompletionDate.Set {
			e.FieldStart("payment_completion_date")
			s.PaymentCompletionDate.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.SettlementAmount.Set {
			e.FieldStart("settlement_amount")
			s.SettlementAmount.Encode(e)
		}
	}
	{
		if s.BankTransferFee.Set {
			e.FieldStart("bank_transfer_fee")
			s.BankTransferFee.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount.Set {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.TaxableFeeAmount.Set {
			e.FieldStart("taxable_fee_amount")
			s.TaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.NontaxableFeeAmount.Set {
			e.FieldStart("nontaxable_fee_amount")
			s.NontaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount.Set {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount.Set {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount.Set {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount.Set {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount.Set {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.DepositDestination.Set {
			e.FieldStart("deposit_destination")
			s.DepositDestination.Encode(e)
		}
	}
	{
		if s.Verified.Set {
			e.FieldStart("verified")
			s.Verified.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformAccountRetrievingResponse = [27]string{
	0:  "id",
	1:  "account_id",
	2:  "shop_id",
	3:  "deposit_amount",
	4:  "deposit_date",
	5:  "scheduled_deposit_date",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "payment_deadline",
	9:  "payment_completion_date",
	10: "status_code",
	11: "count",
	12: "settlement_amount",
	13: "bank_transfer_fee",
	14: "total_amount",
	15: "fee_amount",
	16: "taxable_fee_amount",
	17: "nontaxable_fee_amount",
	18: "tax_amount",
	19: "web_registration_fee_amount",
	20: "platform_fee_amount",
	21: "platform_fee_tax_amount",
	22: "platform_web_registration_fee_amount",
	23: "created",
	24: "updated",
	25: "deposit_destination",
	26: "verified",
}

// Decode decodes PlatformAccountRetrievingResponse from json.
func (s *PlatformAccountRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount.Reset()
				if err := s.DepositAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "deposit_date":
			if err := func() error {
				s.DepositDate.Reset()
				if err := s.DepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_date\"")
			}
		case "scheduled_deposit_date":
			if err := func() error {
				s.ScheduledDepositDate.Reset()
				if err := s.ScheduledDepositDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"scheduled_deposit_date\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart.Reset()
				if err := s.AggregateTermStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd.Reset()
				if err := s.AggregateTermEnd.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "payment_deadline":
			if err := func() error {
				s.PaymentDeadline.Reset()
				if err := s.PaymentDeadline.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_deadline\"")
			}
		case "payment_completion_date":
			if err := func() error {
				s.PaymentCompletionDate.Reset()
				if err := s.PaymentCompletionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_completion_date\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "settlement_amount":
			if err := func() error {
				s.SettlementAmount.Reset()
				if err := s.SettlementAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settlement_amount\"")
			}
		case "bank_transfer_fee":
			if err := func() error {
				s.BankTransferFee.Reset()
				if err := s.BankTransferFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_transfer_fee\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount.Reset()
				if err := s.FeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "taxable_fee_amount":
			if err := func() error {
				s.TaxableFeeAmount.Reset()
				if err := s.TaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"taxable_fee_amount\"")
			}
		case "nontaxable_fee_amount":
			if err := func() error {
				s.NontaxableFeeAmount.Reset()
				if err := s.NontaxableFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nontaxable_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount.Reset()
				if err := s.TaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount.Reset()
				if err := s.WebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount.Reset()
				if err := s.PlatformFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount.Reset()
				if err := s.PlatformFeeTaxAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount.Reset()
				if err := s.PlatformWebRegistrationFeeAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "deposit_destination":
			if err := func() error {
				s.DepositDestination.Reset()
				if err := s.DepositDestination.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_destination\"")
			}
		case "verified":
			if err := func() error {
				s.Verified.Reset()
				if err := s.Verified.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"verified\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountRetrievingResponseDepositDestination) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountRetrievingResponseDepositDestination) encodeFields(e *jx.Encoder) {
	{
		if s.Corporate.Set {
			e.FieldStart("corporate")
			s.Corporate.Encode(e)
		}
	}
	{
		if s.RecipientCorporateName.Set {
			e.FieldStart("recipient_corporate_name")
			s.RecipientCorporateName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeLastName.Set {
			e.FieldStart("recipient_represntative_last_name")
			s.RecipientRepresntativeLastName.Encode(e)
		}
	}
	{
		if s.RecipientRepresntativeFirstName.Set {
			e.FieldStart("recipient_represntative_first_name")
			s.RecipientRepresntativeFirstName.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BankNameKana.Set {
			e.FieldStart("bank_name_kana")
			s.BankNameKana.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.BranchNameKana.Set {
			e.FieldStart("branch_name_kana")
			s.BranchNameKana.Encode(e)
		}
	}
	{
		if s.AccountKind.Set {
			e.FieldStart("account_kind")
			s.AccountKind.Encode(e)
		}
	}
	{
		if s.AccountNumber.Set {
			e.FieldStart("account_number")
			s.AccountNumber.Encode(e)
		}
	}
	{
		if s.AccountName.Set {
			e.FieldStart("account_name")
			s.AccountName.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformAccountRetrievingResponseDepositDestination = [13]string{
	0:  "corporate",
	1:  "recipient_corporate_name",
	2:  "recipient_represntative_last_name",
	3:  "recipient_represntative_first_name",
	4:  "bank_code",
	5:  "bank_name",
	6:  "bank_name_kana",
	7:  "branch_code",
	8:  "branch_name",
	9:  "branch_name_kana",
	10: "account_kind",
	11: "account_number",
	12: "account_name",
}

// Decode decodes PlatformAccountRetrievingResponseDepositDestination from json.
func (s *PlatformAccountRetrievingResponseDepositDestination) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountRetrievingResponseDepositDestination to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "corporate":
			if err := func() error {
				s.Corporate.Reset()
				if err := s.Corporate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"corporate\"")
			}
		case "recipient_corporate_name":
			if err := func() error {
				s.RecipientCorporateName.Reset()
				if err := s.RecipientCorporateName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_corporate_name\"")
			}
		case "recipient_represntative_last_name":
			if err := func() error {
				s.RecipientRepresntativeLastName.Reset()
				if err := s.RecipientRepresntativeLastName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_last_name\"")
			}
		case "recipient_represntative_first_name":
			if err := func() error {
				s.RecipientRepresntativeFirstName.Reset()
				if err := s.RecipientRepresntativeFirstName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"recipient_represntative_first_name\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "bank_name_kana":
			if err := func() error {
				s.BankNameKana.Reset()
				if err := s.BankNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name_kana\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "branch_name_kana":
			if err := func() error {
				s.BranchNameKana.Reset()
				if err := s.BranchNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name_kana\"")
			}
		case "account_kind":
			if err := func() error {
				s.AccountKind.Reset()
				if err := s.AccountKind.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_kind\"")
			}
		case "account_number":
			if err := func() error {
				s.AccountNumber.Reset()
				if err := s.AccountNumber.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_number\"")
			}
		case "account_name":
			if err := func() error {
				s.AccountName.Reset()
				if err := s.AccountName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_name\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountRetrievingResponseDepositDestination")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountRetrievingResponseDepositDestination) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountRetrievingResponseDepositDestination) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformAccountRetrievingResponseDepositDestinationAccountKind as json.
func (s PlatformAccountRetrievingResponseDepositDestinationAccountKind) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformAccountRetrievingResponseDepositDestinationAccountKind from json.
func (s *PlatformAccountRetrievingResponseDepositDestinationAccountKind) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountRetrievingResponseDepositDestinationAccountKind to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformAccountRetrievingResponseDepositDestinationAccountKind(v) {
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind0:
		*s = PlatformAccountRetrievingResponseDepositDestinationAccountKind0
	case PlatformAccountRetrievingResponseDepositDestinationAccountKind1:
		*s = PlatformAccountRetrievingResponseDepositDestinationAccountKind1
	default:
		*s = PlatformAccountRetrievingResponseDepositDestinationAccountKind(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformAccountRetrievingResponseDepositDestinationAccountKind) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountRetrievingResponseDepositDestinationAccountKind) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountSummary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountSummary) encodeFields(e *jx.Encoder) {
	{
		if s.SummaryID.Set {
			e.FieldStart("summary_id")
			s.SummaryID.Encode(e)
		}
	}
	{
		if s.AccountID.Set {
			e.FieldStart("account_id")
			s.AccountID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.TenantShopID.Set {
			e.FieldStart("tenant_shop_id")
			s.TenantShopID.Encode(e)
		}
	}
	{
		if s.TenantShopName != nil {
			e.FieldStart("tenant_shop_name")
			s.TenantShopName.Encode(e)
		}
	}
	{
		if s.DepositAmount != nil {
			e.FieldStart("deposit_amount")
			s.DepositAmount.Encode(e)
		}
	}
	{
		if s.AggregateTermStart != nil {
			e.FieldStart("aggregate_term_start")
			s.AggregateTermStart.Encode(e)
		}
	}
	{
		if s.AggregateTermEnd != nil {
			e.FieldStart("aggregate_term_end")
			s.AggregateTermEnd.Encode(e)
		}
	}
	{
		if s.Count != nil {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.TotalAmount != nil {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.FeeAmount != nil {
			e.FieldStart("fee_amount")
			s.FeeAmount.Encode(e)
		}
	}
	{
		if s.TaxableFeeAmount != nil {
			e.FieldStart("taxable_fee_amount")
			s.TaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.NontaxableFeeAmount != nil {
			e.FieldStart("nontaxable_fee_amount")
			s.NontaxableFeeAmount.Encode(e)
		}
	}
	{
		if s.TaxAmount != nil {
			e.FieldStart("tax_amount")
			s.TaxAmount.Encode(e)
		}
	}
	{
		if s.WebRegistrationFeeAmount != nil {
			e.FieldStart("web_registration_fee_amount")
			s.WebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformWebRegistrationFeeAmount != nil {
			e.FieldStart("platform_web_registration_fee_amount")
			s.PlatformWebRegistrationFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeAmount != nil {
			e.FieldStart("platform_fee_amount")
			s.PlatformFeeAmount.Encode(e)
		}
	}
	{
		if s.PlatformFeeTaxAmount != nil {
			e.FieldStart("platform_fee_tax_amount")
			s.PlatformFeeTaxAmount.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.TenantAccountProcessIDList != nil {
			e.FieldStart("tenant_account_process_id_list")
			e.ArrStart()
			for _, elem := range s.TenantAccountProcessIDList {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountSummary = [21]string{
	0:  "summary_id",
	1:  "account_id",
	2:  "shop_id",
	3:  "tenant_shop_id",
	4:  "tenant_shop_name",
	5:  "deposit_amount",
	6:  "aggregate_term_start",
	7:  "aggregate_term_end",
	8:  "count",
	9:  "total_amount",
	10: "fee_amount",
	11: "taxable_fee_amount",
	12: "nontaxable_fee_amount",
	13: "tax_amount",
	14: "web_registration_fee_amount",
	15: "platform_web_registration_fee_amount",
	16: "platform_fee_amount",
	17: "platform_fee_tax_amount",
	18: "created",
	19: "updated",
	20: "tenant_account_process_id_list",
}

// Decode decodes PlatformAccountSummary from json.
func (s *PlatformAccountSummary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountSummary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "summary_id":
			if err := func() error {
				s.SummaryID.Reset()
				if err := s.SummaryID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"summary_id\"")
			}
		case "account_id":
			if err := func() error {
				s.AccountID.Reset()
				if err := s.AccountID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"account_id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "tenant_shop_id":
			if err := func() error {
				s.TenantShopID.Reset()
				if err := s.TenantShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_shop_id\"")
			}
		case "tenant_shop_name":
			if err := func() error {
				s.TenantShopName = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TenantShopName = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_shop_name\"")
			}
		case "deposit_amount":
			if err := func() error {
				s.DepositAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.DepositAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"deposit_amount\"")
			}
		case "aggregate_term_start":
			if err := func() error {
				s.AggregateTermStart = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermStart = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_start\"")
			}
		case "aggregate_term_end":
			if err := func() error {
				s.AggregateTermEnd = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AggregateTermEnd = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"aggregate_term_end\"")
			}
		case "count":
			if err := func() error {
				s.Count = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Count = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TotalAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "fee_amount":
			if err := func() error {
				s.FeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.FeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fee_amount\"")
			}
		case "taxable_fee_amount":
			if err := func() error {
				s.TaxableFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TaxableFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"taxable_fee_amount\"")
			}
		case "nontaxable_fee_amount":
			if err := func() error {
				s.NontaxableFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.NontaxableFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nontaxable_fee_amount\"")
			}
		case "tax_amount":
			if err := func() error {
				s.TaxAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TaxAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax_amount\"")
			}
		case "web_registration_fee_amount":
			if err := func() error {
				s.WebRegistrationFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.WebRegistrationFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee_amount\"")
			}
		case "platform_web_registration_fee_amount":
			if err := func() error {
				s.PlatformWebRegistrationFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformWebRegistrationFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_web_registration_fee_amount\"")
			}
		case "platform_fee_amount":
			if err := func() error {
				s.PlatformFeeAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_amount\"")
			}
		case "platform_fee_tax_amount":
			if err := func() error {
				s.PlatformFeeTaxAmount = nil
				var elem NilInt
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformFeeTaxAmount = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_fee_tax_amount\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "tenant_account_process_id_list":
			if err := func() error {
				s.TenantAccountProcessIDList = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.TenantAccountProcessIDList = append(s.TenantAccountProcessIDList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tenant_account_process_id_list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountSummary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountSummary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountSummary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformAccountSummaryListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformAccountSummaryListRetrievingResponse = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes PlatformAccountSummaryListRetrievingResponse from json.
func (s *PlatformAccountSummaryListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformAccountSummaryListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]PlatformAccountSummary, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformAccountSummary
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformAccountSummaryListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformAccountSummaryListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformRateConfig) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformRateConfig) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PlatformRate.Set {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee.Set {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee.Set {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PaypayContentCategoryType.Set {
			e.FieldStart("paypay_content_category_type")
			s.PaypayContentCategoryType.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformRateConfig = [5]string{
	0: "id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
	4: "paypay_content_category_type",
}

// Decode decodes PlatformRateConfig from json.
func (s *PlatformRateConfig) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRateConfig to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate.Reset()
				if err := s.PlatformRate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee.Reset()
				if err := s.FixedFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee.Reset()
				if err := s.WebRegistrationFee.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "paypay_content_category_type":
			if err := func() error {
				s.PaypayContentCategoryType.Reset()
				if err := s.PaypayContentCategoryType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_content_category_type\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformRateConfig")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformRateConfig) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRateConfig) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigID as json.
func (s PlatformRateConfigID) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformRateConfigID from json.
func (s *PlatformRateConfigID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRateConfigID to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformRateConfigID(v) {
	case PlatformRateConfigIDVM:
		*s = PlatformRateConfigIDVM
	case PlatformRateConfigIDJad:
		*s = PlatformRateConfigIDJad
	case PlatformRateConfigIDApplepayVM:
		*s = PlatformRateConfigIDApplepayVM
	case PlatformRateConfigIDApplepayJad:
		*s = PlatformRateConfigIDApplepayJad
	case PlatformRateConfigIDKonbini:
		*s = PlatformRateConfigIDKonbini
	case PlatformRateConfigIDPaypay:
		*s = PlatformRateConfigIDPaypay
	case PlatformRateConfigIDDirectdebit:
		*s = PlatformRateConfigIDDirectdebit
	default:
		*s = PlatformRateConfigID(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformRateConfigID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRateConfigID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformRateConfigPaypayContentCategoryType as json.
func (s PlatformRateConfigPaypayContentCategoryType) Encode(e *jx.Encoder) {
	e.Int(int(s))
}

// Decode decodes PlatformRateConfigPaypayContentCategoryType from json.
func (s *PlatformRateConfigPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformRateConfigPaypayContentCategoryType to nil")
	}
	v, err := d.Int()
	if err != nil {
		return err
	}
	*s = PlatformRateConfigPaypayContentCategoryType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformRateConfigPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformRateConfigPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformShopListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformShopListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfPlatformShopListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes PlatformShopListRetrievingResponse from json.
func (s *PlatformShopListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Shop, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Shop
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformShopListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformShopListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformShopRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformShopRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformShopRetrievingResponse = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes PlatformShopRetrievingResponse from json.
func (s *PlatformShopRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilPlatformShopRetrievingResponseShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformShopRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformShopRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseAPIKeyDisplayFlag as json.
func (s PlatformShopRetrievingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopRetrievingResponseAPIKeyDisplayFlag from json.
func (s *PlatformShopRetrievingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopRetrievingResponseAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopRetrievingResponseAPIKeyDisplayFlag(v) {
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag0:
		*s = PlatformShopRetrievingResponseAPIKeyDisplayFlag0
	case PlatformShopRetrievingResponseAPIKeyDisplayFlag1:
		*s = PlatformShopRetrievingResponseAPIKeyDisplayFlag1
	default:
		*s = PlatformShopRetrievingResponseAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopRetrievingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseSharedCustomerFlag as json.
func (s PlatformShopRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopRetrievingResponseSharedCustomerFlag from json.
func (s *PlatformShopRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopRetrievingResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopRetrievingResponseSharedCustomerFlag(v) {
	case PlatformShopRetrievingResponseSharedCustomerFlag0:
		*s = PlatformShopRetrievingResponseSharedCustomerFlag0
	case PlatformShopRetrievingResponseSharedCustomerFlag1:
		*s = PlatformShopRetrievingResponseSharedCustomerFlag1
	default:
		*s = PlatformShopRetrievingResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopRetrievingResponseShopType as json.
func (s PlatformShopRetrievingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopRetrievingResponseShopType from json.
func (s *PlatformShopRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopRetrievingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopRetrievingResponseShopType(v) {
	case PlatformShopRetrievingResponseShopTypePlatform:
		*s = PlatformShopRetrievingResponseShopTypePlatform
	case PlatformShopRetrievingResponseShopTypeTenant:
		*s = PlatformShopRetrievingResponseShopTypeTenant
	default:
		*s = PlatformShopRetrievingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformShopUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformShopUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("examination_master_id")
		s.ExaminationMasterID.Encode(e)
	}
	{
		if s.PlatformRate != nil {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee != nil {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee != nil {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformShopUpdatingRequest = [4]string{
	0: "examination_master_id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
}

// Decode decodes PlatformShopUpdatingRequest from json.
func (s *PlatformShopUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformRate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.FixedFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.WebRegistrationFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformShopUpdatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000001,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfPlatformShopUpdatingRequest) {
					name = jsonFieldsNameOfPlatformShopUpdatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformShopUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingRequestExaminationMasterID as json.
func (s PlatformShopUpdatingRequestExaminationMasterID) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopUpdatingRequestExaminationMasterID from json.
func (s *PlatformShopUpdatingRequestExaminationMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingRequestExaminationMasterID to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopUpdatingRequestExaminationMasterID(v) {
	case PlatformShopUpdatingRequestExaminationMasterIDVM:
		*s = PlatformShopUpdatingRequestExaminationMasterIDVM
	case PlatformShopUpdatingRequestExaminationMasterIDJad:
		*s = PlatformShopUpdatingRequestExaminationMasterIDJad
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayVM:
		*s = PlatformShopUpdatingRequestExaminationMasterIDApplepayVM
	case PlatformShopUpdatingRequestExaminationMasterIDApplepayJad:
		*s = PlatformShopUpdatingRequestExaminationMasterIDApplepayJad
	case PlatformShopUpdatingRequestExaminationMasterIDKonbini:
		*s = PlatformShopUpdatingRequestExaminationMasterIDKonbini
	case PlatformShopUpdatingRequestExaminationMasterIDPaypay:
		*s = PlatformShopUpdatingRequestExaminationMasterIDPaypay
	case PlatformShopUpdatingRequestExaminationMasterIDDirectdebit:
		*s = PlatformShopUpdatingRequestExaminationMasterIDDirectdebit
	default:
		*s = PlatformShopUpdatingRequestExaminationMasterID(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopUpdatingRequestExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingRequestExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlatformShopUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlatformShopUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlatformShopUpdatingResponse = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes PlatformShopUpdatingResponse from json.
func (s *PlatformShopUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilPlatformShopUpdatingResponseShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlatformShopUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlatformShopUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseAPIKeyDisplayFlag as json.
func (s PlatformShopUpdatingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopUpdatingResponseAPIKeyDisplayFlag from json.
func (s *PlatformShopUpdatingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingResponseAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopUpdatingResponseAPIKeyDisplayFlag(v) {
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag0:
		*s = PlatformShopUpdatingResponseAPIKeyDisplayFlag0
	case PlatformShopUpdatingResponseAPIKeyDisplayFlag1:
		*s = PlatformShopUpdatingResponseAPIKeyDisplayFlag1
	default:
		*s = PlatformShopUpdatingResponseAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopUpdatingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseSharedCustomerFlag as json.
func (s PlatformShopUpdatingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopUpdatingResponseSharedCustomerFlag from json.
func (s *PlatformShopUpdatingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopUpdatingResponseSharedCustomerFlag(v) {
	case PlatformShopUpdatingResponseSharedCustomerFlag0:
		*s = PlatformShopUpdatingResponseSharedCustomerFlag0
	case PlatformShopUpdatingResponseSharedCustomerFlag1:
		*s = PlatformShopUpdatingResponseSharedCustomerFlag1
	default:
		*s = PlatformShopUpdatingResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopUpdatingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes PlatformShopUpdatingResponseShopType as json.
func (s PlatformShopUpdatingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes PlatformShopUpdatingResponseShopType from json.
func (s *PlatformShopUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlatformShopUpdatingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch PlatformShopUpdatingResponseShopType(v) {
	case PlatformShopUpdatingResponseShopTypePlatform:
		*s = PlatformShopUpdatingResponseShopTypePlatform
	case PlatformShopUpdatingResponseShopTypeTenant:
		*s = PlatformShopUpdatingResponseShopTypeTenant
	default:
		*s = PlatformShopUpdatingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s PlatformShopUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlatformShopUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DSAuthorizingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DSAuthorizingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.Param.Set {
			e.FieldStart("param")
			s.Param.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DSAuthorizingRequest = [1]string{
	0: "param",
}

// Decode decodes R3DSAuthorizingRequest from json.
func (s *R3DSAuthorizingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "param":
			if err := func() error {
				s.Param.Reset()
				if err := s.Param.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"param\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DSAuthorizingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DSAuthorizingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DSAuthorizingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DSAuthorizingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ChallengeURL.Set {
			e.FieldStart("challenge_url")
			s.ChallengeURL.Encode(e)
		}
	}
	{
		if s.Tds2TransResult.Set {
			e.FieldStart("tds2_trans_result")
			s.Tds2TransResult.Encode(e)
		}
	}
	{
		if s.Tds2TransResultReason.Set {
			e.FieldStart("tds2_trans_result_reason")
			s.Tds2TransResultReason.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DSAuthorizingResponse = [3]string{
	0: "challenge_url",
	1: "tds2_trans_result",
	2: "tds2_trans_result_reason",
}

// Decode decodes R3DSAuthorizingResponse from json.
func (s *R3DSAuthorizingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "challenge_url":
			if err := func() error {
				s.ChallengeURL.Reset()
				if err := s.ChallengeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"challenge_url\"")
			}
		case "tds2_trans_result":
			if err := func() error {
				s.Tds2TransResult.Reset()
				if err := s.Tds2TransResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result\"")
			}
		case "tds2_trans_result_reason":
			if err := func() error {
				s.Tds2TransResultReason.Reset()
				if err := s.Tds2TransResultReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result_reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DSAuthorizingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DSAuthorizingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSAuthorizingResponseTds2TransResult as json.
func (s R3DSAuthorizingResponseTds2TransResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DSAuthorizingResponseTds2TransResult from json.
func (s *R3DSAuthorizingResponseTds2TransResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingResponseTds2TransResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DSAuthorizingResponseTds2TransResult(v) {
	case R3DSAuthorizingResponseTds2TransResultY:
		*s = R3DSAuthorizingResponseTds2TransResultY
	case R3DSAuthorizingResponseTds2TransResultA:
		*s = R3DSAuthorizingResponseTds2TransResultA
	case R3DSAuthorizingResponseTds2TransResultC:
		*s = R3DSAuthorizingResponseTds2TransResultC
	case R3DSAuthorizingResponseTds2TransResultN:
		*s = R3DSAuthorizingResponseTds2TransResultN
	case R3DSAuthorizingResponseTds2TransResultU:
		*s = R3DSAuthorizingResponseTds2TransResultU
	case R3DSAuthorizingResponseTds2TransResultR:
		*s = R3DSAuthorizingResponseTds2TransResultR
	default:
		*s = R3DSAuthorizingResponseTds2TransResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DSAuthorizingResponseTds2TransResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingResponseTds2TransResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSAuthorizingResponseTds2TransResultReason as json.
func (s R3DSAuthorizingResponseTds2TransResultReason) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DSAuthorizingResponseTds2TransResultReason from json.
func (s *R3DSAuthorizingResponseTds2TransResultReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSAuthorizingResponseTds2TransResultReason to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DSAuthorizingResponseTds2TransResultReason(v) {
	case R3DSAuthorizingResponseTds2TransResultReason01:
		*s = R3DSAuthorizingResponseTds2TransResultReason01
	case R3DSAuthorizingResponseTds2TransResultReason02:
		*s = R3DSAuthorizingResponseTds2TransResultReason02
	case R3DSAuthorizingResponseTds2TransResultReason03:
		*s = R3DSAuthorizingResponseTds2TransResultReason03
	case R3DSAuthorizingResponseTds2TransResultReason04:
		*s = R3DSAuthorizingResponseTds2TransResultReason04
	case R3DSAuthorizingResponseTds2TransResultReason05:
		*s = R3DSAuthorizingResponseTds2TransResultReason05
	case R3DSAuthorizingResponseTds2TransResultReason06:
		*s = R3DSAuthorizingResponseTds2TransResultReason06
	case R3DSAuthorizingResponseTds2TransResultReason07:
		*s = R3DSAuthorizingResponseTds2TransResultReason07
	case R3DSAuthorizingResponseTds2TransResultReason08:
		*s = R3DSAuthorizingResponseTds2TransResultReason08
	case R3DSAuthorizingResponseTds2TransResultReason09:
		*s = R3DSAuthorizingResponseTds2TransResultReason09
	case R3DSAuthorizingResponseTds2TransResultReason11:
		*s = R3DSAuthorizingResponseTds2TransResultReason11
	case R3DSAuthorizingResponseTds2TransResultReason12:
		*s = R3DSAuthorizingResponseTds2TransResultReason12
	case R3DSAuthorizingResponseTds2TransResultReason13:
		*s = R3DSAuthorizingResponseTds2TransResultReason13
	case R3DSAuthorizingResponseTds2TransResultReason14:
		*s = R3DSAuthorizingResponseTds2TransResultReason14
	case R3DSAuthorizingResponseTds2TransResultReason15:
		*s = R3DSAuthorizingResponseTds2TransResultReason15
	case R3DSAuthorizingResponseTds2TransResultReason16:
		*s = R3DSAuthorizingResponseTds2TransResultReason16
	case R3DSAuthorizingResponseTds2TransResultReason17:
		*s = R3DSAuthorizingResponseTds2TransResultReason17
	case R3DSAuthorizingResponseTds2TransResultReason18:
		*s = R3DSAuthorizingResponseTds2TransResultReason18
	case R3DSAuthorizingResponseTds2TransResultReason19:
		*s = R3DSAuthorizingResponseTds2TransResultReason19
	case R3DSAuthorizingResponseTds2TransResultReason20:
		*s = R3DSAuthorizingResponseTds2TransResultReason20
	case R3DSAuthorizingResponseTds2TransResultReason21:
		*s = R3DSAuthorizingResponseTds2TransResultReason21
	case R3DSAuthorizingResponseTds2TransResultReason22:
		*s = R3DSAuthorizingResponseTds2TransResultReason22
	case R3DSAuthorizingResponseTds2TransResultReason23:
		*s = R3DSAuthorizingResponseTds2TransResultReason23
	case R3DSAuthorizingResponseTds2TransResultReason24:
		*s = R3DSAuthorizingResponseTds2TransResultReason24
	case R3DSAuthorizingResponseTds2TransResultReason25:
		*s = R3DSAuthorizingResponseTds2TransResultReason25
	case R3DSAuthorizingResponseTds2TransResultReason26:
		*s = R3DSAuthorizingResponseTds2TransResultReason26
	case R3DSAuthorizingResponseTds2TransResultReason8099:
		*s = R3DSAuthorizingResponseTds2TransResultReason8099
	default:
		*s = R3DSAuthorizingResponseTds2TransResultReason(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DSAuthorizingResponseTds2TransResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSAuthorizingResponseTds2TransResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *R3DSConfirmingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *R3DSConfirmingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Tds2TransResult.Set {
			e.FieldStart("tds2_trans_result")
			s.Tds2TransResult.Encode(e)
		}
	}
	{
		if s.Tds2TransResultReason.Set {
			e.FieldStart("tds2_trans_result_reason")
			s.Tds2TransResultReason.Encode(e)
		}
	}
}

var jsonFieldsNameOfR3DSConfirmingResponse = [2]string{
	0: "tds2_trans_result",
	1: "tds2_trans_result_reason",
}

// Decode decodes R3DSConfirmingResponse from json.
func (s *R3DSConfirmingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSConfirmingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tds2_trans_result":
			if err := func() error {
				s.Tds2TransResult.Reset()
				if err := s.Tds2TransResult.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result\"")
			}
		case "tds2_trans_result_reason":
			if err := func() error {
				s.Tds2TransResultReason.Reset()
				if err := s.Tds2TransResultReason.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_trans_result_reason\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode R3DSConfirmingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *R3DSConfirmingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSConfirmingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSConfirmingResponseTds2TransResult as json.
func (s R3DSConfirmingResponseTds2TransResult) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DSConfirmingResponseTds2TransResult from json.
func (s *R3DSConfirmingResponseTds2TransResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSConfirmingResponseTds2TransResult to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DSConfirmingResponseTds2TransResult(v) {
	case R3DSConfirmingResponseTds2TransResultY:
		*s = R3DSConfirmingResponseTds2TransResultY
	case R3DSConfirmingResponseTds2TransResultA:
		*s = R3DSConfirmingResponseTds2TransResultA
	case R3DSConfirmingResponseTds2TransResultC:
		*s = R3DSConfirmingResponseTds2TransResultC
	case R3DSConfirmingResponseTds2TransResultN:
		*s = R3DSConfirmingResponseTds2TransResultN
	case R3DSConfirmingResponseTds2TransResultU:
		*s = R3DSConfirmingResponseTds2TransResultU
	case R3DSConfirmingResponseTds2TransResultR:
		*s = R3DSConfirmingResponseTds2TransResultR
	default:
		*s = R3DSConfirmingResponseTds2TransResult(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DSConfirmingResponseTds2TransResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSConfirmingResponseTds2TransResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes R3DSConfirmingResponseTds2TransResultReason as json.
func (s R3DSConfirmingResponseTds2TransResultReason) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes R3DSConfirmingResponseTds2TransResultReason from json.
func (s *R3DSConfirmingResponseTds2TransResultReason) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode R3DSConfirmingResponseTds2TransResultReason to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch R3DSConfirmingResponseTds2TransResultReason(v) {
	case R3DSConfirmingResponseTds2TransResultReason01:
		*s = R3DSConfirmingResponseTds2TransResultReason01
	case R3DSConfirmingResponseTds2TransResultReason02:
		*s = R3DSConfirmingResponseTds2TransResultReason02
	case R3DSConfirmingResponseTds2TransResultReason03:
		*s = R3DSConfirmingResponseTds2TransResultReason03
	case R3DSConfirmingResponseTds2TransResultReason04:
		*s = R3DSConfirmingResponseTds2TransResultReason04
	case R3DSConfirmingResponseTds2TransResultReason05:
		*s = R3DSConfirmingResponseTds2TransResultReason05
	case R3DSConfirmingResponseTds2TransResultReason06:
		*s = R3DSConfirmingResponseTds2TransResultReason06
	case R3DSConfirmingResponseTds2TransResultReason07:
		*s = R3DSConfirmingResponseTds2TransResultReason07
	case R3DSConfirmingResponseTds2TransResultReason08:
		*s = R3DSConfirmingResponseTds2TransResultReason08
	case R3DSConfirmingResponseTds2TransResultReason09:
		*s = R3DSConfirmingResponseTds2TransResultReason09
	case R3DSConfirmingResponseTds2TransResultReason11:
		*s = R3DSConfirmingResponseTds2TransResultReason11
	case R3DSConfirmingResponseTds2TransResultReason12:
		*s = R3DSConfirmingResponseTds2TransResultReason12
	case R3DSConfirmingResponseTds2TransResultReason13:
		*s = R3DSConfirmingResponseTds2TransResultReason13
	case R3DSConfirmingResponseTds2TransResultReason14:
		*s = R3DSConfirmingResponseTds2TransResultReason14
	case R3DSConfirmingResponseTds2TransResultReason15:
		*s = R3DSConfirmingResponseTds2TransResultReason15
	case R3DSConfirmingResponseTds2TransResultReason16:
		*s = R3DSConfirmingResponseTds2TransResultReason16
	case R3DSConfirmingResponseTds2TransResultReason17:
		*s = R3DSConfirmingResponseTds2TransResultReason17
	case R3DSConfirmingResponseTds2TransResultReason18:
		*s = R3DSConfirmingResponseTds2TransResultReason18
	case R3DSConfirmingResponseTds2TransResultReason19:
		*s = R3DSConfirmingResponseTds2TransResultReason19
	case R3DSConfirmingResponseTds2TransResultReason20:
		*s = R3DSConfirmingResponseTds2TransResultReason20
	case R3DSConfirmingResponseTds2TransResultReason21:
		*s = R3DSConfirmingResponseTds2TransResultReason21
	case R3DSConfirmingResponseTds2TransResultReason22:
		*s = R3DSConfirmingResponseTds2TransResultReason22
	case R3DSConfirmingResponseTds2TransResultReason23:
		*s = R3DSConfirmingResponseTds2TransResultReason23
	case R3DSConfirmingResponseTds2TransResultReason24:
		*s = R3DSConfirmingResponseTds2TransResultReason24
	case R3DSConfirmingResponseTds2TransResultReason25:
		*s = R3DSConfirmingResponseTds2TransResultReason25
	case R3DSConfirmingResponseTds2TransResultReason26:
		*s = R3DSConfirmingResponseTds2TransResultReason26
	case R3DSConfirmingResponseTds2TransResultReason8099:
		*s = R3DSConfirmingResponseTds2TransResultReason8099
	default:
		*s = R3DSConfirmingResponseTds2TransResultReason(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s R3DSConfirmingResponseTds2TransResultReason) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *R3DSConfirmingResponseTds2TransResultReason) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK as json.
func (s RetrievePaymentOK) Encode(e *jx.Encoder) {
	switch s.Type {
	case RetrievePaymentOK0RetrievePaymentOK:
		s.RetrievePaymentOK0.Encode(e)
	case RetrievePaymentOK1RetrievePaymentOK:
		s.RetrievePaymentOK1.Encode(e)
	case RetrievePaymentOK2RetrievePaymentOK:
		s.RetrievePaymentOK2.Encode(e)
	case RetrievePaymentOK3RetrievePaymentOK:
		s.RetrievePaymentOK3.Encode(e)
	case RetrievePaymentOK4RetrievePaymentOK:
		s.RetrievePaymentOK4.Encode(e)
	}
}

func (s RetrievePaymentOK) encodeFields(e *jx.Encoder) {
	switch s.Type {
	case RetrievePaymentOK0RetrievePaymentOK:
		s.RetrievePaymentOK0.encodeFields(e)
	case RetrievePaymentOK1RetrievePaymentOK:
		s.RetrievePaymentOK1.encodeFields(e)
	case RetrievePaymentOK2RetrievePaymentOK:
		s.RetrievePaymentOK2.encodeFields(e)
	case RetrievePaymentOK3RetrievePaymentOK:
		s.RetrievePaymentOK3.encodeFields(e)
	case RetrievePaymentOK4RetrievePaymentOK:
		s.RetrievePaymentOK4.encodeFields(e)
	}
}

// Decode decodes RetrievePaymentOK from json.
func (s *RetrievePaymentOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK to nil")
	}
	// Sum type fields.
	if typ := d.Next(); typ != jx.Object {
		return errors.Errorf("unexpected json type %q", typ)
	}

	var found bool
	if err := d.Capture(func(d *jx.Decoder) error {
		return d.ObjBytes(func(d *jx.Decoder, key []byte) error {
			switch string(key) {
			case "card_id":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds_type":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_type":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_ret_url":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "tds2_status":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_name":
				match := RetrievePaymentOK0RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "send_url":
				match := RetrievePaymentOK1RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term_day":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_term":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_format":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_width":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "barcode_height":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "overpayment_flag":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_overpayment_flag":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_code":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "konbini_store_code":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "device_name":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "os_version":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_width":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "win_height":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "xdpi":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "ydpi":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_serial":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "invoice_id":
				match := RetrievePaymentOK2RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_url":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_expiry_date":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_url":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "redirect_type":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "order_description":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "capture_description":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "update_description":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "cancel_description":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "store_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "code_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "paypay_result_code":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_payment_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_capture_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_update_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_revert_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "merchant_refund_id":
				match := RetrievePaymentOK3RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "result_code":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "target_date":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "withdrawal_date":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "request_accept_end_date":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "transfer_return_date":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "payment_method_id":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_code":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "bank_name":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_code":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "branch_name":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			case "remarks":
				match := RetrievePaymentOK4RetrievePaymentOK
				if found && s.Type != match {
					s.Type = ""
					return errors.Errorf("multiple oneOf matches: (%v, %v)", s.Type, match)
				}
				found = true
				s.Type = match
			}
			return d.Skip()
		})
	}); err != nil {
		return errors.Wrap(err, "capture")
	}
	if !found {
		return errors.New("unable to detect sum type variant")
	}
	switch s.Type {
	case RetrievePaymentOK0RetrievePaymentOK:
		if err := s.RetrievePaymentOK0.Decode(d); err != nil {
			return err
		}
	case RetrievePaymentOK1RetrievePaymentOK:
		if err := s.RetrievePaymentOK1.Decode(d); err != nil {
			return err
		}
	case RetrievePaymentOK2RetrievePaymentOK:
		if err := s.RetrievePaymentOK2.Decode(d); err != nil {
			return err
		}
	case RetrievePaymentOK3RetrievePaymentOK:
		if err := s.RetrievePaymentOK3.Decode(d); err != nil {
			return err
		}
	case RetrievePaymentOK4RetrievePaymentOK:
		if err := s.RetrievePaymentOK4.Decode(d); err != nil {
			return err
		}
	default:
		return errors.Errorf("inferred invalid type: %s", s.Type)
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrievePaymentOK0) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrievePaymentOK0) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.TdsType.Set {
			e.FieldStart("tds_type")
			s.TdsType.Encode(e)
		}
	}
	{
		if s.Tds2Type.Set {
			e.FieldStart("tds2_type")
			s.Tds2Type.Encode(e)
		}
	}
	{
		if s.Tds2RetURL.Set {
			e.FieldStart("tds2_ret_url")
			s.Tds2RetURL.Encode(e)
		}
	}
	{
		if s.Tds2Status.Set {
			e.FieldStart("tds2_status")
			s.Tds2Status.Encode(e)
		}
	}
	{
		if s.MerchantName.Set {
			e.FieldStart("merchant_name")
			s.MerchantName.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfRetrievePaymentOK0 = [38]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "card_id",
	19: "brand",
	20: "card_no",
	21: "expire",
	22: "holder_name",
	23: "card_no_hash",
	24: "method",
	25: "pay_times",
	26: "subscription_id",
	27: "tds_type",
	28: "tds2_type",
	29: "tds2_ret_url",
	30: "tds2_status",
	31: "merchant_name",
	32: "forward",
	33: "issuer",
	34: "transaction_id",
	35: "approve",
	36: "auth_max_date",
	37: "item_code",
}

// Decode decodes RetrievePaymentOK0 from json.
func (s *RetrievePaymentOK0) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "tds_type":
			if err := func() error {
				s.TdsType.Reset()
				if err := s.TdsType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds_type\"")
			}
		case "tds2_type":
			if err := func() error {
				s.Tds2Type.Reset()
				if err := s.Tds2Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_type\"")
			}
		case "tds2_ret_url":
			if err := func() error {
				s.Tds2RetURL.Reset()
				if err := s.Tds2RetURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_ret_url\"")
			}
		case "tds2_status":
			if err := func() error {
				s.Tds2Status.Reset()
				if err := s.Tds2Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tds2_status\"")
			}
		case "merchant_name":
			if err := func() error {
				s.MerchantName.Reset()
				if err := s.MerchantName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_name\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentOK0")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrievePaymentOK0) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Brand as json.
func (s RetrievePaymentOK0Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0Brand from json.
func (s *RetrievePaymentOK0Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0Brand(v) {
	case RetrievePaymentOK0BrandVISA:
		*s = RetrievePaymentOK0BrandVISA
	case RetrievePaymentOK0BrandMASTER:
		*s = RetrievePaymentOK0BrandMASTER
	case RetrievePaymentOK0BrandJCB:
		*s = RetrievePaymentOK0BrandJCB
	case RetrievePaymentOK0BrandAMEX:
		*s = RetrievePaymentOK0BrandAMEX
	case RetrievePaymentOK0BrandDINERS:
		*s = RetrievePaymentOK0BrandDINERS
	case RetrievePaymentOK0BrandDISCOVER:
		*s = RetrievePaymentOK0BrandDISCOVER
	case RetrievePaymentOK0BrandEmpty:
		*s = RetrievePaymentOK0BrandEmpty
	default:
		*s = RetrievePaymentOK0Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0JobCode as json.
func (s RetrievePaymentOK0JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0JobCode from json.
func (s *RetrievePaymentOK0JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0JobCode(v) {
	case RetrievePaymentOK0JobCodeCHECK:
		*s = RetrievePaymentOK0JobCodeCHECK
	case RetrievePaymentOK0JobCodeAUTH:
		*s = RetrievePaymentOK0JobCodeAUTH
	case RetrievePaymentOK0JobCodeCAPTURE:
		*s = RetrievePaymentOK0JobCodeCAPTURE
	default:
		*s = RetrievePaymentOK0JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Method as json.
func (s RetrievePaymentOK0Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0Method from json.
func (s *RetrievePaymentOK0Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0Method(v) {
	case RetrievePaymentOK0Method1:
		*s = RetrievePaymentOK0Method1
	case RetrievePaymentOK0Method2:
		*s = RetrievePaymentOK0Method2
	case RetrievePaymentOK0Method5:
		*s = RetrievePaymentOK0Method5
	default:
		*s = RetrievePaymentOK0Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0PayTimes as json.
func (s RetrievePaymentOK0PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0PayTimes from json.
func (s *RetrievePaymentOK0PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0PayTimes(v) {
	case RetrievePaymentOK0PayTimes3:
		*s = RetrievePaymentOK0PayTimes3
	case RetrievePaymentOK0PayTimes5:
		*s = RetrievePaymentOK0PayTimes5
	case RetrievePaymentOK0PayTimes6:
		*s = RetrievePaymentOK0PayTimes6
	case RetrievePaymentOK0PayTimes10:
		*s = RetrievePaymentOK0PayTimes10
	case RetrievePaymentOK0PayTimes12:
		*s = RetrievePaymentOK0PayTimes12
	case RetrievePaymentOK0PayTimes15:
		*s = RetrievePaymentOK0PayTimes15
	case RetrievePaymentOK0PayTimes18:
		*s = RetrievePaymentOK0PayTimes18
	case RetrievePaymentOK0PayTimes20:
		*s = RetrievePaymentOK0PayTimes20
	case RetrievePaymentOK0PayTimes24:
		*s = RetrievePaymentOK0PayTimes24
	default:
		*s = RetrievePaymentOK0PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0PayType as json.
func (s RetrievePaymentOK0PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0PayType from json.
func (s *RetrievePaymentOK0PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0PayType(v) {
	case RetrievePaymentOK0PayTypeCard:
		*s = RetrievePaymentOK0PayTypeCard
	case RetrievePaymentOK0PayTypeKonbini:
		*s = RetrievePaymentOK0PayTypeKonbini
	case RetrievePaymentOK0PayTypePaypay:
		*s = RetrievePaymentOK0PayTypePaypay
	case RetrievePaymentOK0PayTypeApplepay:
		*s = RetrievePaymentOK0PayTypeApplepay
	case RetrievePaymentOK0PayTypeDirectdebit:
		*s = RetrievePaymentOK0PayTypeDirectdebit
	case RetrievePaymentOK0PayTypeVirtualaccount:
		*s = RetrievePaymentOK0PayTypeVirtualaccount
	default:
		*s = RetrievePaymentOK0PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Status as json.
func (s RetrievePaymentOK0Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0Status from json.
func (s *RetrievePaymentOK0Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0Status(v) {
	case RetrievePaymentOK0StatusUNPROCESSED:
		*s = RetrievePaymentOK0StatusUNPROCESSED
	case RetrievePaymentOK0StatusCHECKED:
		*s = RetrievePaymentOK0StatusCHECKED
	case RetrievePaymentOK0StatusAUTHORIZED:
		*s = RetrievePaymentOK0StatusAUTHORIZED
	case RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK0StatusAWAITINGCUSTOMERPAYMENT
	case RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK0StatusAWAITINGPAYMENTAPPROVAL
	case RetrievePaymentOK0StatusCAPTURED:
		*s = RetrievePaymentOK0StatusCAPTURED
	case RetrievePaymentOK0StatusCANCELED:
		*s = RetrievePaymentOK0StatusCANCELED
	case RetrievePaymentOK0StatusEXPIRED:
		*s = RetrievePaymentOK0StatusEXPIRED
	case RetrievePaymentOK0StatusAUTHENTICATED:
		*s = RetrievePaymentOK0StatusAUTHENTICATED
	case RetrievePaymentOK0StatusFAILED:
		*s = RetrievePaymentOK0StatusFAILED
	default:
		*s = RetrievePaymentOK0Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Tds2Status as json.
func (s RetrievePaymentOK0Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0Tds2Status from json.
func (s *RetrievePaymentOK0Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0Tds2Status(v) {
	case RetrievePaymentOK0Tds2StatusAUTHENTICATING:
		*s = RetrievePaymentOK0Tds2StatusAUTHENTICATING
	case RetrievePaymentOK0Tds2StatusCHALLENGE:
		*s = RetrievePaymentOK0Tds2StatusCHALLENGE
	case RetrievePaymentOK0Tds2StatusAUTHENTICATED:
		*s = RetrievePaymentOK0Tds2StatusAUTHENTICATED
	default:
		*s = RetrievePaymentOK0Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0Tds2Type as json.
func (s RetrievePaymentOK0Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0Tds2Type from json.
func (s *RetrievePaymentOK0Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0Tds2Type(v) {
	case RetrievePaymentOK0Tds2Type2:
		*s = RetrievePaymentOK0Tds2Type2
	case RetrievePaymentOK0Tds2Type3:
		*s = RetrievePaymentOK0Tds2Type3
	default:
		*s = RetrievePaymentOK0Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK0TdsType as json.
func (s RetrievePaymentOK0TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK0TdsType from json.
func (s *RetrievePaymentOK0TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK0TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK0TdsType(v) {
	case RetrievePaymentOK0TdsType0:
		*s = RetrievePaymentOK0TdsType0
	case RetrievePaymentOK0TdsType2:
		*s = RetrievePaymentOK0TdsType2
	default:
		*s = RetrievePaymentOK0TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK0TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK0TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrievePaymentOK1) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrievePaymentOK1) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.Brand.Set {
			e.FieldStart("brand")
			s.Brand.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.Expire.Set {
			e.FieldStart("expire")
			s.Expire.Encode(e)
		}
	}
	{
		if s.HolderName.Set {
			e.FieldStart("holder_name")
			s.HolderName.Encode(e)
		}
	}
	{
		if s.CardNoHash.Set {
			e.FieldStart("card_no_hash")
			s.CardNoHash.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.PayTimes.Set {
			e.FieldStart("pay_times")
			s.PayTimes.Encode(e)
		}
	}
	{
		if s.Forward.Set {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Issuer.Set {
			e.FieldStart("issuer")
			s.Issuer.Encode(e)
		}
	}
	{
		if s.TransactionID.Set {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.Approve.Set {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.ItemCode.Set {
			e.FieldStart("item_code")
			s.ItemCode.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfRetrievePaymentOK1 = [32]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "brand",
	19: "card_no",
	20: "expire",
	21: "holder_name",
	22: "card_no_hash",
	23: "method",
	24: "pay_times",
	25: "forward",
	26: "issuer",
	27: "transaction_id",
	28: "approve",
	29: "auth_max_date",
	30: "item_code",
	31: "send_url",
}

// Decode decodes RetrievePaymentOK1 from json.
func (s *RetrievePaymentOK1) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "brand":
			if err := func() error {
				s.Brand.Reset()
				if err := s.Brand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"brand\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "expire":
			if err := func() error {
				s.Expire.Reset()
				if err := s.Expire.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire\"")
			}
		case "holder_name":
			if err := func() error {
				s.HolderName.Reset()
				if err := s.HolderName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"holder_name\"")
			}
		case "card_no_hash":
			if err := func() error {
				s.CardNoHash.Reset()
				if err := s.CardNoHash.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_hash\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "pay_times":
			if err := func() error {
				s.PayTimes.Reset()
				if err := s.PayTimes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_times\"")
			}
		case "forward":
			if err := func() error {
				s.Forward.Reset()
				if err := s.Forward.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "issuer":
			if err := func() error {
				s.Issuer.Reset()
				if err := s.Issuer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"issuer\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID.Reset()
				if err := s.TransactionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "approve":
			if err := func() error {
				s.Approve.Reset()
				if err := s.Approve.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "item_code":
			if err := func() error {
				s.ItemCode.Reset()
				if err := s.ItemCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item_code\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentOK1")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrievePaymentOK1) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Brand as json.
func (s RetrievePaymentOK1Brand) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1Brand from json.
func (s *RetrievePaymentOK1Brand) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1Brand to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1Brand(v) {
	case RetrievePaymentOK1BrandVISA:
		*s = RetrievePaymentOK1BrandVISA
	case RetrievePaymentOK1BrandMASTER:
		*s = RetrievePaymentOK1BrandMASTER
	case RetrievePaymentOK1BrandJCB:
		*s = RetrievePaymentOK1BrandJCB
	case RetrievePaymentOK1BrandAMEX:
		*s = RetrievePaymentOK1BrandAMEX
	case RetrievePaymentOK1BrandDINERS:
		*s = RetrievePaymentOK1BrandDINERS
	case RetrievePaymentOK1BrandDISCOVER:
		*s = RetrievePaymentOK1BrandDISCOVER
	case RetrievePaymentOK1BrandEmpty:
		*s = RetrievePaymentOK1BrandEmpty
	default:
		*s = RetrievePaymentOK1Brand(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1Brand) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1Brand) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1JobCode as json.
func (s RetrievePaymentOK1JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1JobCode from json.
func (s *RetrievePaymentOK1JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1JobCode(v) {
	case RetrievePaymentOK1JobCodeAUTH:
		*s = RetrievePaymentOK1JobCodeAUTH
	case RetrievePaymentOK1JobCodeCAPTURE:
		*s = RetrievePaymentOK1JobCodeCAPTURE
	default:
		*s = RetrievePaymentOK1JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Method as json.
func (s RetrievePaymentOK1Method) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1Method from json.
func (s *RetrievePaymentOK1Method) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1Method to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1Method(v) {
	case RetrievePaymentOK1Method1:
		*s = RetrievePaymentOK1Method1
	case RetrievePaymentOK1Method2:
		*s = RetrievePaymentOK1Method2
	case RetrievePaymentOK1Method5:
		*s = RetrievePaymentOK1Method5
	default:
		*s = RetrievePaymentOK1Method(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1Method) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1Method) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1PayTimes as json.
func (s RetrievePaymentOK1PayTimes) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1PayTimes from json.
func (s *RetrievePaymentOK1PayTimes) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1PayTimes to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1PayTimes(v) {
	case RetrievePaymentOK1PayTimes3:
		*s = RetrievePaymentOK1PayTimes3
	case RetrievePaymentOK1PayTimes5:
		*s = RetrievePaymentOK1PayTimes5
	case RetrievePaymentOK1PayTimes6:
		*s = RetrievePaymentOK1PayTimes6
	case RetrievePaymentOK1PayTimes10:
		*s = RetrievePaymentOK1PayTimes10
	case RetrievePaymentOK1PayTimes12:
		*s = RetrievePaymentOK1PayTimes12
	case RetrievePaymentOK1PayTimes15:
		*s = RetrievePaymentOK1PayTimes15
	case RetrievePaymentOK1PayTimes18:
		*s = RetrievePaymentOK1PayTimes18
	case RetrievePaymentOK1PayTimes20:
		*s = RetrievePaymentOK1PayTimes20
	case RetrievePaymentOK1PayTimes24:
		*s = RetrievePaymentOK1PayTimes24
	default:
		*s = RetrievePaymentOK1PayTimes(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1PayTimes) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1PayTimes) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1PayType as json.
func (s RetrievePaymentOK1PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1PayType from json.
func (s *RetrievePaymentOK1PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1PayType(v) {
	case RetrievePaymentOK1PayTypeCard:
		*s = RetrievePaymentOK1PayTypeCard
	case RetrievePaymentOK1PayTypeKonbini:
		*s = RetrievePaymentOK1PayTypeKonbini
	case RetrievePaymentOK1PayTypePaypay:
		*s = RetrievePaymentOK1PayTypePaypay
	case RetrievePaymentOK1PayTypeApplepay:
		*s = RetrievePaymentOK1PayTypeApplepay
	case RetrievePaymentOK1PayTypeDirectdebit:
		*s = RetrievePaymentOK1PayTypeDirectdebit
	case RetrievePaymentOK1PayTypeVirtualaccount:
		*s = RetrievePaymentOK1PayTypeVirtualaccount
	default:
		*s = RetrievePaymentOK1PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK1Status as json.
func (s RetrievePaymentOK1Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK1Status from json.
func (s *RetrievePaymentOK1Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK1Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK1Status(v) {
	case RetrievePaymentOK1StatusUNPROCESSED:
		*s = RetrievePaymentOK1StatusUNPROCESSED
	case RetrievePaymentOK1StatusCHECKED:
		*s = RetrievePaymentOK1StatusCHECKED
	case RetrievePaymentOK1StatusAUTHORIZED:
		*s = RetrievePaymentOK1StatusAUTHORIZED
	case RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK1StatusAWAITINGCUSTOMERPAYMENT
	case RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK1StatusAWAITINGPAYMENTAPPROVAL
	case RetrievePaymentOK1StatusCAPTURED:
		*s = RetrievePaymentOK1StatusCAPTURED
	case RetrievePaymentOK1StatusCANCELED:
		*s = RetrievePaymentOK1StatusCANCELED
	case RetrievePaymentOK1StatusEXPIRED:
		*s = RetrievePaymentOK1StatusEXPIRED
	case RetrievePaymentOK1StatusAUTHENTICATED:
		*s = RetrievePaymentOK1StatusAUTHENTICATED
	case RetrievePaymentOK1StatusFAILED:
		*s = RetrievePaymentOK1StatusFAILED
	default:
		*s = RetrievePaymentOK1Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK1Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK1Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrievePaymentOK2) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrievePaymentOK2) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.PaymentTermDay.Set {
			e.FieldStart("payment_term_day")
			s.PaymentTermDay.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.BarcodeFormat.Set {
			e.FieldStart("barcode_format")
			s.BarcodeFormat.Encode(e)
		}
	}
	{
		if s.BarcodeWidth.Set {
			e.FieldStart("barcode_width")
			s.BarcodeWidth.Encode(e)
		}
	}
	{
		if s.BarcodeHeight.Set {
			e.FieldStart("barcode_height")
			s.BarcodeHeight.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.DeviceName.Set {
			e.FieldStart("device_name")
			s.DeviceName.Encode(e)
		}
	}
	{
		if len(s.OsVersion) != 0 {
			e.FieldStart("os_version")
			e.Raw(s.OsVersion)
		}
	}
	{
		if s.WinWidth.Set {
			e.FieldStart("win_width")
			s.WinWidth.Encode(e)
		}
	}
	{
		if s.WinHeight.Set {
			e.FieldStart("win_height")
			s.WinHeight.Encode(e)
		}
	}
	{
		if len(s.Xdpi) != 0 {
			e.FieldStart("xdpi")
			e.Raw(s.Xdpi)
		}
	}
	{
		if len(s.Ydpi) != 0 {
			e.FieldStart("ydpi")
			e.Raw(s.Ydpi)
		}
	}
	{
		if s.Result.Set {
			e.FieldStart("result")
			s.Result.Encode(e)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
}

var jsonFieldsNameOfRetrievePaymentOK2 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "payment_term_day",
	18: "payment_term",
	19: "payment_date",
	20: "barcode",
	21: "barcode_format",
	22: "barcode_width",
	23: "barcode_height",
	24: "overpayment_flag",
	25: "cancel_overpayment_flag",
	26: "konbini_code",
	27: "konbini_store_code",
	28: "device_name",
	29: "os_version",
	30: "win_width",
	31: "win_height",
	32: "xdpi",
	33: "ydpi",
	34: "result",
	35: "order_serial",
	36: "invoice_id",
}

// Decode decodes RetrievePaymentOK2 from json.
func (s *RetrievePaymentOK2) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2 to nil")
	}
	s.setDefaults()

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "payment_term_day":
			if err := func() error {
				s.PaymentTermDay.Reset()
				if err := s.PaymentTermDay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term_day\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode\"")
			}
		case "barcode_format":
			if err := func() error {
				s.BarcodeFormat.Reset()
				if err := s.BarcodeFormat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_format\"")
			}
		case "barcode_width":
			if err := func() error {
				s.BarcodeWidth.Reset()
				if err := s.BarcodeWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_width\"")
			}
		case "barcode_height":
			if err := func() error {
				s.BarcodeHeight.Reset()
				if err := s.BarcodeHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"barcode_height\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "device_name":
			if err := func() error {
				s.DeviceName.Reset()
				if err := s.DeviceName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"device_name\"")
			}
		case "os_version":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.OsVersion = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"os_version\"")
			}
		case "win_width":
			if err := func() error {
				s.WinWidth.Reset()
				if err := s.WinWidth.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_width\"")
			}
		case "win_height":
			if err := func() error {
				s.WinHeight.Reset()
				if err := s.WinHeight.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"win_height\"")
			}
		case "xdpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Xdpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"xdpi\"")
			}
		case "ydpi":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.Ydpi = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ydpi\"")
			}
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentOK2")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrievePaymentOK2) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2BarcodeFormat as json.
func (s RetrievePaymentOK2BarcodeFormat) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2BarcodeFormat from json.
func (s *RetrievePaymentOK2BarcodeFormat) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2BarcodeFormat to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2BarcodeFormat(v) {
	case RetrievePaymentOK2BarcodeFormatJPG:
		*s = RetrievePaymentOK2BarcodeFormatJPG
	case RetrievePaymentOK2BarcodeFormatPNG:
		*s = RetrievePaymentOK2BarcodeFormatPNG
	case RetrievePaymentOK2BarcodeFormatBmp:
		*s = RetrievePaymentOK2BarcodeFormatBmp
	default:
		*s = RetrievePaymentOK2BarcodeFormat(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2BarcodeFormat) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2BarcodeFormat) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2CancelOverpaymentFlag as json.
func (s RetrievePaymentOK2CancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2CancelOverpaymentFlag from json.
func (s *RetrievePaymentOK2CancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2CancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2CancelOverpaymentFlag(v) {
	case RetrievePaymentOK2CancelOverpaymentFlag0:
		*s = RetrievePaymentOK2CancelOverpaymentFlag0
	case RetrievePaymentOK2CancelOverpaymentFlag1:
		*s = RetrievePaymentOK2CancelOverpaymentFlag1
	default:
		*s = RetrievePaymentOK2CancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2CancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2CancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2KonbiniCode as json.
func (s RetrievePaymentOK2KonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2KonbiniCode from json.
func (s *RetrievePaymentOK2KonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2KonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2KonbiniCode(v) {
	case RetrievePaymentOK2KonbiniCode00010:
		*s = RetrievePaymentOK2KonbiniCode00010
	case RetrievePaymentOK2KonbiniCode00020:
		*s = RetrievePaymentOK2KonbiniCode00020
	case RetrievePaymentOK2KonbiniCode00030:
		*s = RetrievePaymentOK2KonbiniCode00030
	case RetrievePaymentOK2KonbiniCode00080:
		*s = RetrievePaymentOK2KonbiniCode00080
	case RetrievePaymentOK2KonbiniCode00760:
		*s = RetrievePaymentOK2KonbiniCode00760
	default:
		*s = RetrievePaymentOK2KonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2KonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2KonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2OverpaymentFlag as json.
func (s RetrievePaymentOK2OverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2OverpaymentFlag from json.
func (s *RetrievePaymentOK2OverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2OverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2OverpaymentFlag(v) {
	case RetrievePaymentOK2OverpaymentFlag0:
		*s = RetrievePaymentOK2OverpaymentFlag0
	case RetrievePaymentOK2OverpaymentFlag1:
		*s = RetrievePaymentOK2OverpaymentFlag1
	default:
		*s = RetrievePaymentOK2OverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2OverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2OverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2PayType as json.
func (s RetrievePaymentOK2PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2PayType from json.
func (s *RetrievePaymentOK2PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2PayType(v) {
	case RetrievePaymentOK2PayTypeCard:
		*s = RetrievePaymentOK2PayTypeCard
	case RetrievePaymentOK2PayTypeKonbini:
		*s = RetrievePaymentOK2PayTypeKonbini
	case RetrievePaymentOK2PayTypePaypay:
		*s = RetrievePaymentOK2PayTypePaypay
	case RetrievePaymentOK2PayTypeApplepay:
		*s = RetrievePaymentOK2PayTypeApplepay
	case RetrievePaymentOK2PayTypeDirectdebit:
		*s = RetrievePaymentOK2PayTypeDirectdebit
	case RetrievePaymentOK2PayTypeVirtualaccount:
		*s = RetrievePaymentOK2PayTypeVirtualaccount
	default:
		*s = RetrievePaymentOK2PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2Result as json.
func (s RetrievePaymentOK2Result) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2Result from json.
func (s *RetrievePaymentOK2Result) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2Result to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2Result(v) {
	case RetrievePaymentOK2Result000:
		*s = RetrievePaymentOK2Result000
	case RetrievePaymentOK2Result001:
		*s = RetrievePaymentOK2Result001
	case RetrievePaymentOK2Result002:
		*s = RetrievePaymentOK2Result002
	case RetrievePaymentOK2Result003:
		*s = RetrievePaymentOK2Result003
	case RetrievePaymentOK2Result004:
		*s = RetrievePaymentOK2Result004
	case RetrievePaymentOK2Result005:
		*s = RetrievePaymentOK2Result005
	case RetrievePaymentOK2Result006:
		*s = RetrievePaymentOK2Result006
	case RetrievePaymentOK2Result007:
		*s = RetrievePaymentOK2Result007
	case RetrievePaymentOK2Result008:
		*s = RetrievePaymentOK2Result008
	case RetrievePaymentOK2Result009:
		*s = RetrievePaymentOK2Result009
	case RetrievePaymentOK2Result010:
		*s = RetrievePaymentOK2Result010
	case RetrievePaymentOK2Result011:
		*s = RetrievePaymentOK2Result011
	case RetrievePaymentOK2Result012:
		*s = RetrievePaymentOK2Result012
	case RetrievePaymentOK2Result013:
		*s = RetrievePaymentOK2Result013
	case RetrievePaymentOK2Result900:
		*s = RetrievePaymentOK2Result900
	default:
		*s = RetrievePaymentOK2Result(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2Result) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2Result) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK2Status as json.
func (s RetrievePaymentOK2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK2Status from json.
func (s *RetrievePaymentOK2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK2Status(v) {
	case RetrievePaymentOK2StatusUNPROCESSED:
		*s = RetrievePaymentOK2StatusUNPROCESSED
	case RetrievePaymentOK2StatusCHECKED:
		*s = RetrievePaymentOK2StatusCHECKED
	case RetrievePaymentOK2StatusAUTHORIZED:
		*s = RetrievePaymentOK2StatusAUTHORIZED
	case RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK2StatusAWAITINGCUSTOMERPAYMENT
	case RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK2StatusAWAITINGPAYMENTAPPROVAL
	case RetrievePaymentOK2StatusCAPTURED:
		*s = RetrievePaymentOK2StatusCAPTURED
	case RetrievePaymentOK2StatusCANCELED:
		*s = RetrievePaymentOK2StatusCANCELED
	case RetrievePaymentOK2StatusEXPIRED:
		*s = RetrievePaymentOK2StatusEXPIRED
	case RetrievePaymentOK2StatusAUTHENTICATED:
		*s = RetrievePaymentOK2StatusAUTHENTICATED
	case RetrievePaymentOK2StatusFAILED:
		*s = RetrievePaymentOK2StatusFAILED
	default:
		*s = RetrievePaymentOK2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrievePaymentOK3) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrievePaymentOK3) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CodeURL.Set {
			e.FieldStart("code_url")
			s.CodeURL.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate.Set {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.RedirectURL.Set {
			e.FieldStart("redirect_url")
			s.RedirectURL.Encode(e)
		}
	}
	{
		if s.RedirectType.Set {
			e.FieldStart("redirect_type")
			s.RedirectType.Encode(e)
		}
	}
	{
		if s.AuthMaxDate.Set {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription.Set {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CaptureDescription.Set {
			e.FieldStart("capture_description")
			s.CaptureDescription.Encode(e)
		}
	}
	{
		if s.UpdateDescription.Set {
			e.FieldStart("update_description")
			s.UpdateDescription.Encode(e)
		}
	}
	{
		if s.CancelDescription.Set {
			e.FieldStart("cancel_description")
			s.CancelDescription.Encode(e)
		}
	}
	{
		if s.StoreID.Set {
			e.FieldStart("store_id")
			s.StoreID.Encode(e)
		}
	}
	{
		if s.CodeID.Set {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID.Set {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaypayResultCode.Set {
			e.FieldStart("paypay_result_code")
			s.PaypayResultCode.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID.Set {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantCaptureID.Set {
			e.FieldStart("merchant_capture_id")
			s.MerchantCaptureID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID.Set {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID.Set {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID.Set {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
}

var jsonFieldsNameOfRetrievePaymentOK3 = [37]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "job_code",
	17: "status",
	18: "code_url",
	19: "code_expiry_date",
	20: "redirect_url",
	21: "redirect_type",
	22: "auth_max_date",
	23: "order_description",
	24: "capture_description",
	25: "update_description",
	26: "cancel_description",
	27: "store_id",
	28: "code_id",
	29: "payment_id",
	30: "paypay_result_code",
	31: "merchant_payment_id",
	32: "merchant_capture_id",
	33: "merchant_update_id",
	34: "merchant_revert_id",
	35: "merchant_refund_id",
	36: "payment_date",
}

// Decode decodes RetrievePaymentOK3 from json.
func (s *RetrievePaymentOK3) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK3 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "code_url":
			if err := func() error {
				s.CodeURL.Reset()
				if err := s.CodeURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_url\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate.Reset()
				if err := s.CodeExpiryDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "redirect_url":
			if err := func() error {
				s.RedirectURL.Reset()
				if err := s.RedirectURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_url\"")
			}
		case "redirect_type":
			if err := func() error {
				s.RedirectType.Reset()
				if err := s.RedirectType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"redirect_type\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate.Reset()
				if err := s.AuthMaxDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription.Reset()
				if err := s.OrderDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "capture_description":
			if err := func() error {
				s.CaptureDescription.Reset()
				if err := s.CaptureDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"capture_description\"")
			}
		case "update_description":
			if err := func() error {
				s.UpdateDescription.Reset()
				if err := s.UpdateDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"update_description\"")
			}
		case "cancel_description":
			if err := func() error {
				s.CancelDescription.Reset()
				if err := s.CancelDescription.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_description\"")
			}
		case "store_id":
			if err := func() error {
				s.StoreID.Reset()
				if err := s.StoreID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"store_id\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID.Reset()
				if err := s.CodeID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID.Reset()
				if err := s.PaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "paypay_result_code":
			if err := func() error {
				s.PaypayResultCode.Reset()
				if err := s.PaypayResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_result_code\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID.Reset()
				if err := s.MerchantPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_capture_id":
			if err := func() error {
				s.MerchantCaptureID.Reset()
				if err := s.MerchantCaptureID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_capture_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID.Reset()
				if err := s.MerchantUpdateID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID.Reset()
				if err := s.MerchantRevertID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID.Reset()
				if err := s.MerchantRefundID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentOK3")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrievePaymentOK3) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK3) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3JobCode as json.
func (s RetrievePaymentOK3JobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK3JobCode from json.
func (s *RetrievePaymentOK3JobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK3JobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK3JobCode(v) {
	case RetrievePaymentOK3JobCodeAUTH:
		*s = RetrievePaymentOK3JobCodeAUTH
	case RetrievePaymentOK3JobCodeCAPTURE:
		*s = RetrievePaymentOK3JobCodeCAPTURE
	default:
		*s = RetrievePaymentOK3JobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK3JobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK3JobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3PayType as json.
func (s RetrievePaymentOK3PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK3PayType from json.
func (s *RetrievePaymentOK3PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK3PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK3PayType(v) {
	case RetrievePaymentOK3PayTypeCard:
		*s = RetrievePaymentOK3PayTypeCard
	case RetrievePaymentOK3PayTypeKonbini:
		*s = RetrievePaymentOK3PayTypeKonbini
	case RetrievePaymentOK3PayTypePaypay:
		*s = RetrievePaymentOK3PayTypePaypay
	case RetrievePaymentOK3PayTypeApplepay:
		*s = RetrievePaymentOK3PayTypeApplepay
	case RetrievePaymentOK3PayTypeDirectdebit:
		*s = RetrievePaymentOK3PayTypeDirectdebit
	case RetrievePaymentOK3PayTypeVirtualaccount:
		*s = RetrievePaymentOK3PayTypeVirtualaccount
	default:
		*s = RetrievePaymentOK3PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK3PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK3PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3RedirectType as json.
func (s RetrievePaymentOK3RedirectType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK3RedirectType from json.
func (s *RetrievePaymentOK3RedirectType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK3RedirectType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK3RedirectType(v) {
	case RetrievePaymentOK3RedirectType1:
		*s = RetrievePaymentOK3RedirectType1
	case RetrievePaymentOK3RedirectType2:
		*s = RetrievePaymentOK3RedirectType2
	default:
		*s = RetrievePaymentOK3RedirectType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK3RedirectType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK3RedirectType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK3Status as json.
func (s RetrievePaymentOK3Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK3Status from json.
func (s *RetrievePaymentOK3Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK3Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK3Status(v) {
	case RetrievePaymentOK3StatusUNPROCESSED:
		*s = RetrievePaymentOK3StatusUNPROCESSED
	case RetrievePaymentOK3StatusCHECKED:
		*s = RetrievePaymentOK3StatusCHECKED
	case RetrievePaymentOK3StatusAUTHORIZED:
		*s = RetrievePaymentOK3StatusAUTHORIZED
	case RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK3StatusAWAITINGCUSTOMERPAYMENT
	case RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK3StatusAWAITINGPAYMENTAPPROVAL
	case RetrievePaymentOK3StatusCAPTURED:
		*s = RetrievePaymentOK3StatusCAPTURED
	case RetrievePaymentOK3StatusCANCELED:
		*s = RetrievePaymentOK3StatusCANCELED
	case RetrievePaymentOK3StatusEXPIRED:
		*s = RetrievePaymentOK3StatusEXPIRED
	case RetrievePaymentOK3StatusAUTHENTICATED:
		*s = RetrievePaymentOK3StatusAUTHENTICATED
	case RetrievePaymentOK3StatusFAILED:
		*s = RetrievePaymentOK3StatusFAILED
	default:
		*s = RetrievePaymentOK3Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK3Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK3Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrievePaymentOK4) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrievePaymentOK4) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.BankCode.Set {
			e.FieldStart("bank_code")
			s.BankCode.Encode(e)
		}
	}
	{
		if s.BankName.Set {
			e.FieldStart("bank_name")
			s.BankName.Encode(e)
		}
	}
	{
		if s.BranchCode.Set {
			e.FieldStart("branch_code")
			s.BranchCode.Encode(e)
		}
	}
	{
		if s.BranchName.Set {
			e.FieldStart("branch_name")
			s.BranchName.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
}

var jsonFieldsNameOfRetrievePaymentOK4 = [29]string{
	0:  "shop_id",
	1:  "id",
	2:  "access_id",
	3:  "amount",
	4:  "tax",
	5:  "total_amount",
	6:  "client_field_1",
	7:  "client_field_2",
	8:  "client_field_3",
	9:  "process_date",
	10: "customer_id",
	11: "customer_group_id",
	12: "error_code",
	13: "created",
	14: "updated",
	15: "pay_type",
	16: "status",
	17: "result_code",
	18: "target_date",
	19: "withdrawal_date",
	20: "request_accept_end_date",
	21: "transfer_return_date",
	22: "payment_method_id",
	23: "bank_code",
	24: "bank_name",
	25: "branch_code",
	26: "branch_name",
	27: "remarks",
	28: "subscription_id",
}

// Decode decodes RetrievePaymentOK4 from json.
func (s *RetrievePaymentOK4) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK4 to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "bank_code":
			if err := func() error {
				s.BankCode.Reset()
				if err := s.BankCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_code\"")
			}
		case "bank_name":
			if err := func() error {
				s.BankName.Reset()
				if err := s.BankName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bank_name\"")
			}
		case "branch_code":
			if err := func() error {
				s.BranchCode.Reset()
				if err := s.BranchCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_code\"")
			}
		case "branch_name":
			if err := func() error {
				s.BranchName.Reset()
				if err := s.BranchName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"branch_name\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrievePaymentOK4")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrievePaymentOK4) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK4) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4PayType as json.
func (s RetrievePaymentOK4PayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK4PayType from json.
func (s *RetrievePaymentOK4PayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK4PayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK4PayType(v) {
	case RetrievePaymentOK4PayTypeCard:
		*s = RetrievePaymentOK4PayTypeCard
	case RetrievePaymentOK4PayTypeKonbini:
		*s = RetrievePaymentOK4PayTypeKonbini
	case RetrievePaymentOK4PayTypePaypay:
		*s = RetrievePaymentOK4PayTypePaypay
	case RetrievePaymentOK4PayTypeApplepay:
		*s = RetrievePaymentOK4PayTypeApplepay
	case RetrievePaymentOK4PayTypeDirectdebit:
		*s = RetrievePaymentOK4PayTypeDirectdebit
	case RetrievePaymentOK4PayTypeVirtualaccount:
		*s = RetrievePaymentOK4PayTypeVirtualaccount
	default:
		*s = RetrievePaymentOK4PayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK4PayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK4PayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4ResultCode as json.
func (s RetrievePaymentOK4ResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK4ResultCode from json.
func (s *RetrievePaymentOK4ResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK4ResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK4ResultCode(v) {
	case RetrievePaymentOK4ResultCode0:
		*s = RetrievePaymentOK4ResultCode0
	case RetrievePaymentOK4ResultCode1:
		*s = RetrievePaymentOK4ResultCode1
	case RetrievePaymentOK4ResultCode2:
		*s = RetrievePaymentOK4ResultCode2
	case RetrievePaymentOK4ResultCode3:
		*s = RetrievePaymentOK4ResultCode3
	case RetrievePaymentOK4ResultCode4:
		*s = RetrievePaymentOK4ResultCode4
	case RetrievePaymentOK4ResultCode8:
		*s = RetrievePaymentOK4ResultCode8
	case RetrievePaymentOK4ResultCode9:
		*s = RetrievePaymentOK4ResultCode9
	case RetrievePaymentOK4ResultCodeE:
		*s = RetrievePaymentOK4ResultCodeE
	case RetrievePaymentOK4ResultCodeN:
		*s = RetrievePaymentOK4ResultCodeN
	default:
		*s = RetrievePaymentOK4ResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK4ResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK4ResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RetrievePaymentOK4Status as json.
func (s RetrievePaymentOK4Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes RetrievePaymentOK4Status from json.
func (s *RetrievePaymentOK4Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrievePaymentOK4Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch RetrievePaymentOK4Status(v) {
	case RetrievePaymentOK4StatusUNPROCESSED:
		*s = RetrievePaymentOK4StatusUNPROCESSED
	case RetrievePaymentOK4StatusCHECKED:
		*s = RetrievePaymentOK4StatusCHECKED
	case RetrievePaymentOK4StatusAUTHORIZED:
		*s = RetrievePaymentOK4StatusAUTHORIZED
	case RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT:
		*s = RetrievePaymentOK4StatusAWAITINGCUSTOMERPAYMENT
	case RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL:
		*s = RetrievePaymentOK4StatusAWAITINGPAYMENTAPPROVAL
	case RetrievePaymentOK4StatusCAPTURED:
		*s = RetrievePaymentOK4StatusCAPTURED
	case RetrievePaymentOK4StatusCANCELED:
		*s = RetrievePaymentOK4StatusCANCELED
	case RetrievePaymentOK4StatusEXPIRED:
		*s = RetrievePaymentOK4StatusEXPIRED
	case RetrievePaymentOK4StatusAUTHENTICATED:
		*s = RetrievePaymentOK4StatusAUTHENTICATED
	case RetrievePaymentOK4StatusFAILED:
		*s = RetrievePaymentOK4StatusFAILED
	default:
		*s = RetrievePaymentOK4Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s RetrievePaymentOK4Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrievePaymentOK4Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RetrieveSubscriptionResultListOK) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RetrieveSubscriptionResultListOK) encodeFields(e *jx.Encoder) {
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.LastPage.Set {
			e.FieldStart("last_page")
			s.LastPage.Encode(e)
		}
	}
	{
		if s.CurrentPage.Set {
			e.FieldStart("current_page")
			s.CurrentPage.Encode(e)
		}
	}
	{
		if s.Limit.Set {
			e.FieldStart("limit")
			s.Limit.Encode(e)
		}
	}
	{
		if s.LinkNext.Set {
			e.FieldStart("link_next")
			s.LinkNext.Encode(e)
		}
	}
	{
		if s.LinkPrevious.Set {
			e.FieldStart("link_previous")
			s.LinkPrevious.Encode(e)
		}
	}
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfRetrieveSubscriptionResultListOK = [7]string{
	0: "total_count",
	1: "last_page",
	2: "current_page",
	3: "limit",
	4: "link_next",
	5: "link_previous",
	6: "list",
}

// Decode decodes RetrieveSubscriptionResultListOK from json.
func (s *RetrieveSubscriptionResultListOK) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RetrieveSubscriptionResultListOK to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "last_page":
			if err := func() error {
				s.LastPage.Reset()
				if err := s.LastPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"last_page\"")
			}
		case "current_page":
			if err := func() error {
				s.CurrentPage.Reset()
				if err := s.CurrentPage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"current_page\"")
			}
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "link_next":
			if err := func() error {
				s.LinkNext.Reset()
				if err := s.LinkNext.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_next\"")
			}
		case "link_previous":
			if err := func() error {
				s.LinkPrevious.Reset()
				if err := s.LinkPrevious.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"link_previous\"")
			}
		case "list":
			if err := func() error {
				s.List = make([]SubscriptionResult, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem SubscriptionResult
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RetrieveSubscriptionResultListOK")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RetrieveSubscriptionResultListOK) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RetrieveSubscriptionResultListOK) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Shop) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Shop) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfShop = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes Shop from json.
func (s *Shop) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Shop to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilShopShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Shop")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Shop) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Shop) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopAPIKeyDisplayFlag as json.
func (s ShopAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopAPIKeyDisplayFlag from json.
func (s *ShopAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopAPIKeyDisplayFlag(v) {
	case ShopAPIKeyDisplayFlag0:
		*s = ShopAPIKeyDisplayFlag0
	case ShopAPIKeyDisplayFlag1:
		*s = ShopAPIKeyDisplayFlag1
	default:
		*s = ShopAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopSharedCustomerFlag as json.
func (s ShopSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopSharedCustomerFlag from json.
func (s *ShopSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopSharedCustomerFlag(v) {
	case ShopSharedCustomerFlag0:
		*s = ShopSharedCustomerFlag0
	case ShopSharedCustomerFlag1:
		*s = ShopSharedCustomerFlag1
	default:
		*s = ShopSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ShopShopType as json.
func (s ShopShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ShopShopType from json.
func (s *ShopShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ShopShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ShopShopType(v) {
	case ShopShopTypePlatform:
		*s = ShopShopTypePlatform
	case ShopShopTypeTenant:
		*s = ShopShopTypeTenant
	default:
		*s = ShopShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ShopShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ShopShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Subscription) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Subscription) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscription = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes Subscription from json.
func (s *Subscription) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Subscription to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Subscription")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Subscription) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Subscription) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		e.FieldStart("plan_id")
		e.Str(s.PlanID)
	}
	{
		e.FieldStart("customer_id")
		e.Str(s.CustomerID)
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		e.FieldStart("start_date")
		e.Str(s.StartDate)
	}
	{
		if s.StopDate != nil {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.SendURL != nil {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionCreatingRequest = [16]string{
	0:  "id",
	1:  "pay_type",
	2:  "plan_id",
	3:  "customer_id",
	4:  "card_id",
	5:  "payment_method_id",
	6:  "start_date",
	7:  "stop_date",
	8:  "end_month_flag",
	9:  "initial_amount",
	10: "initial_tax",
	11: "remarks",
	12: "client_field_1",
	13: "client_field_2",
	14: "client_field_3",
	15: "send_url",
}

// Decode decodes SubscriptionCreatingRequest from json.
func (s *SubscriptionCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				v, err := d.Str()
				s.PlanID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			requiredBitSet[0] |= 1 << 3
			if err := func() error {
				v, err := d.Str()
				s.CustomerID = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "start_date":
			requiredBitSet[0] |= 1 << 6
			if err := func() error {
				v, err := d.Str()
				s.StartDate = string(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.StopDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.SendURL = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b01001110,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSubscriptionCreatingRequest) {
					name = jsonFieldsNameOfSubscriptionCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingRequestEndMonthFlag as json.
func (s SubscriptionCreatingRequestEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionCreatingRequestEndMonthFlag from json.
func (s *SubscriptionCreatingRequestEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingRequestEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionCreatingRequestEndMonthFlag(v) {
	case SubscriptionCreatingRequestEndMonthFlag0:
		*s = SubscriptionCreatingRequestEndMonthFlag0
	case SubscriptionCreatingRequestEndMonthFlag1:
		*s = SubscriptionCreatingRequestEndMonthFlag1
	default:
		*s = SubscriptionCreatingRequestEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionCreatingRequestEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingRequestEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingRequestPayType as json.
func (s SubscriptionCreatingRequestPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionCreatingRequestPayType from json.
func (s *SubscriptionCreatingRequestPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingRequestPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionCreatingRequestPayType(v) {
	case SubscriptionCreatingRequestPayTypeCard:
		*s = SubscriptionCreatingRequestPayTypeCard
	case SubscriptionCreatingRequestPayTypeDirectdebit:
		*s = SubscriptionCreatingRequestPayTypeDirectdebit
	default:
		*s = SubscriptionCreatingRequestPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionCreatingRequestPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingRequestPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionCreatingResponse = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes SubscriptionCreatingResponse from json.
func (s *SubscriptionCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponseEndMonthFlag as json.
func (s SubscriptionCreatingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionCreatingResponseEndMonthFlag from json.
func (s *SubscriptionCreatingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingResponseEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionCreatingResponseEndMonthFlag(v) {
	case SubscriptionCreatingResponseEndMonthFlag0:
		*s = SubscriptionCreatingResponseEndMonthFlag0
	case SubscriptionCreatingResponseEndMonthFlag1:
		*s = SubscriptionCreatingResponseEndMonthFlag1
	default:
		*s = SubscriptionCreatingResponseEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionCreatingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponsePayType as json.
func (s SubscriptionCreatingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionCreatingResponsePayType from json.
func (s *SubscriptionCreatingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionCreatingResponsePayType(v) {
	case SubscriptionCreatingResponsePayTypeCard:
		*s = SubscriptionCreatingResponsePayTypeCard
	case SubscriptionCreatingResponsePayTypeDirectdebit:
		*s = SubscriptionCreatingResponsePayTypeDirectdebit
	default:
		*s = SubscriptionCreatingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionCreatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionCreatingResponseStatus as json.
func (s SubscriptionCreatingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionCreatingResponseStatus from json.
func (s *SubscriptionCreatingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionCreatingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionCreatingResponseStatus(v) {
	case SubscriptionCreatingResponseStatusACTIVE:
		*s = SubscriptionCreatingResponseStatusACTIVE
	case SubscriptionCreatingResponseStatusRUNNING:
		*s = SubscriptionCreatingResponseStatusRUNNING
	case SubscriptionCreatingResponseStatusCANCELED:
		*s = SubscriptionCreatingResponseStatusCANCELED
	case SubscriptionCreatingResponseStatusINCOMPLETE:
		*s = SubscriptionCreatingResponseStatusINCOMPLETE
	default:
		*s = SubscriptionCreatingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionCreatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionCreatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionEndMonthFlag as json.
func (s SubscriptionEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionEndMonthFlag from json.
func (s *SubscriptionEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionEndMonthFlag(v) {
	case SubscriptionEndMonthFlag0:
		*s = SubscriptionEndMonthFlag0
	case SubscriptionEndMonthFlag1:
		*s = SubscriptionEndMonthFlag1
	default:
		*s = SubscriptionEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfSubscriptionListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes SubscriptionListRetrievingResponse from json.
func (s *SubscriptionListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Subscription, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Subscription
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionPayType as json.
func (s SubscriptionPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionPayType from json.
func (s *SubscriptionPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionPayType(v) {
	case SubscriptionPayTypeCard:
		*s = SubscriptionPayTypeCard
	case SubscriptionPayTypeDirectdebit:
		*s = SubscriptionPayTypeDirectdebit
	default:
		*s = SubscriptionPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionResult) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ProcessDate != nil {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.CardNo.Set {
			e.FieldStart("card_no")
			s.CardNo.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.IntervalPattern.Set {
			e.FieldStart("interval_pattern")
			s.IntervalPattern.Encode(e)
		}
	}
	{
		if s.IntervalCount.Set {
			e.FieldStart("interval_count")
			s.IntervalCount.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionResult = [23]string{
	0:  "id",
	1:  "pay_type",
	2:  "status",
	3:  "process_date",
	4:  "plan_id",
	5:  "amount",
	6:  "tax",
	7:  "total_amount",
	8:  "customer_id",
	9:  "payment_method_id",
	10: "card_id",
	11: "card_no",
	12: "shop_id",
	13: "access_id",
	14: "send_url",
	15: "client_field_1",
	16: "client_field_2",
	17: "client_field_3",
	18: "interval_pattern",
	19: "interval_count",
	20: "remarks",
	21: "error_code",
	22: "created",
}

// Decode decodes SubscriptionResult from json.
func (s *SubscriptionResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ProcessDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "card_no":
			if err := func() error {
				s.CardNo.Reset()
				if err := s.CardNo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "interval_pattern":
			if err := func() error {
				s.IntervalPattern.Reset()
				if err := s.IntervalPattern.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_pattern\"")
			}
		case "interval_count":
			if err := func() error {
				s.IntervalCount.Reset()
				if err := s.IntervalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"interval_count\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultIntervalCount as json.
func (s SubscriptionResultIntervalCount) Encode(e *jx.Encoder) {
	e.Float64(float64(s))
}

// Decode decodes SubscriptionResultIntervalCount from json.
func (s *SubscriptionResultIntervalCount) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultIntervalCount to nil")
	}
	v, err := d.Float64()
	if err != nil {
		return err
	}
	*s = SubscriptionResultIntervalCount(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionResultIntervalCount) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultIntervalCount) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultIntervalPattern as json.
func (s SubscriptionResultIntervalPattern) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionResultIntervalPattern from json.
func (s *SubscriptionResultIntervalPattern) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultIntervalPattern to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionResultIntervalPattern(v) {
	case SubscriptionResultIntervalPatternMonth:
		*s = SubscriptionResultIntervalPatternMonth
	case SubscriptionResultIntervalPatternYear:
		*s = SubscriptionResultIntervalPatternYear
	default:
		*s = SubscriptionResultIntervalPattern(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionResultIntervalPattern) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultIntervalPattern) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultPayType as json.
func (s SubscriptionResultPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionResultPayType from json.
func (s *SubscriptionResultPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionResultPayType(v) {
	case SubscriptionResultPayTypeCard:
		*s = SubscriptionResultPayTypeCard
	case SubscriptionResultPayTypeDirectdebit:
		*s = SubscriptionResultPayTypeDirectdebit
	default:
		*s = SubscriptionResultPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionResultPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionResultStatus as json.
func (s SubscriptionResultStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionResultStatus from json.
func (s *SubscriptionResultStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionResultStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionResultStatus(v) {
	case SubscriptionResultStatusCHECKED:
		*s = SubscriptionResultStatusCHECKED
	case SubscriptionResultStatusSUCCEEDED:
		*s = SubscriptionResultStatusSUCCEEDED
	case SubscriptionResultStatusFAILED:
		*s = SubscriptionResultStatusFAILED
	default:
		*s = SubscriptionResultStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionResultStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionResultStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionRetrievingResponse = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes SubscriptionRetrievingResponse from json.
func (s *SubscriptionRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponseEndMonthFlag as json.
func (s SubscriptionRetrievingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionRetrievingResponseEndMonthFlag from json.
func (s *SubscriptionRetrievingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionRetrievingResponseEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionRetrievingResponseEndMonthFlag(v) {
	case SubscriptionRetrievingResponseEndMonthFlag0:
		*s = SubscriptionRetrievingResponseEndMonthFlag0
	case SubscriptionRetrievingResponseEndMonthFlag1:
		*s = SubscriptionRetrievingResponseEndMonthFlag1
	default:
		*s = SubscriptionRetrievingResponseEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionRetrievingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionRetrievingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponsePayType as json.
func (s SubscriptionRetrievingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionRetrievingResponsePayType from json.
func (s *SubscriptionRetrievingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionRetrievingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionRetrievingResponsePayType(v) {
	case SubscriptionRetrievingResponsePayTypeCard:
		*s = SubscriptionRetrievingResponsePayTypeCard
	case SubscriptionRetrievingResponsePayTypeDirectdebit:
		*s = SubscriptionRetrievingResponsePayTypeDirectdebit
	default:
		*s = SubscriptionRetrievingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionRetrievingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionRetrievingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionRetrievingResponseStatus as json.
func (s SubscriptionRetrievingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionRetrievingResponseStatus from json.
func (s *SubscriptionRetrievingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionRetrievingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionRetrievingResponseStatus(v) {
	case SubscriptionRetrievingResponseStatusACTIVE:
		*s = SubscriptionRetrievingResponseStatusACTIVE
	case SubscriptionRetrievingResponseStatusRUNNING:
		*s = SubscriptionRetrievingResponseStatusRUNNING
	case SubscriptionRetrievingResponseStatusCANCELED:
		*s = SubscriptionRetrievingResponseStatusCANCELED
	case SubscriptionRetrievingResponseStatusINCOMPLETE:
		*s = SubscriptionRetrievingResponseStatusINCOMPLETE
	default:
		*s = SubscriptionRetrievingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionRetrievingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionRetrievingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionStatus as json.
func (s SubscriptionStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionStatus from json.
func (s *SubscriptionStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionStatus(v) {
	case SubscriptionStatusACTIVE:
		*s = SubscriptionStatusACTIVE
	case SubscriptionStatusRUNNING:
		*s = SubscriptionStatusRUNNING
	case SubscriptionStatusCANCELED:
		*s = SubscriptionStatusCANCELED
	case SubscriptionStatusINCOMPLETE:
		*s = SubscriptionStatusINCOMPLETE
	default:
		*s = SubscriptionStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionUnsubscribingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionUnsubscribingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionUnsubscribingResponse = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes SubscriptionUnsubscribingResponse from json.
func (s *SubscriptionUnsubscribingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUnsubscribingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionUnsubscribingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionUnsubscribingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUnsubscribingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponseEndMonthFlag as json.
func (s SubscriptionUnsubscribingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUnsubscribingResponseEndMonthFlag from json.
func (s *SubscriptionUnsubscribingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUnsubscribingResponseEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUnsubscribingResponseEndMonthFlag(v) {
	case SubscriptionUnsubscribingResponseEndMonthFlag0:
		*s = SubscriptionUnsubscribingResponseEndMonthFlag0
	case SubscriptionUnsubscribingResponseEndMonthFlag1:
		*s = SubscriptionUnsubscribingResponseEndMonthFlag1
	default:
		*s = SubscriptionUnsubscribingResponseEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUnsubscribingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUnsubscribingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponsePayType as json.
func (s SubscriptionUnsubscribingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUnsubscribingResponsePayType from json.
func (s *SubscriptionUnsubscribingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUnsubscribingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUnsubscribingResponsePayType(v) {
	case SubscriptionUnsubscribingResponsePayTypeCard:
		*s = SubscriptionUnsubscribingResponsePayTypeCard
	case SubscriptionUnsubscribingResponsePayTypeDirectdebit:
		*s = SubscriptionUnsubscribingResponsePayTypeDirectdebit
	default:
		*s = SubscriptionUnsubscribingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUnsubscribingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUnsubscribingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUnsubscribingResponseStatus as json.
func (s SubscriptionUnsubscribingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUnsubscribingResponseStatus from json.
func (s *SubscriptionUnsubscribingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUnsubscribingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUnsubscribingResponseStatus(v) {
	case SubscriptionUnsubscribingResponseStatusACTIVE:
		*s = SubscriptionUnsubscribingResponseStatusACTIVE
	case SubscriptionUnsubscribingResponseStatusRUNNING:
		*s = SubscriptionUnsubscribingResponseStatusRUNNING
	case SubscriptionUnsubscribingResponseStatusCANCELED:
		*s = SubscriptionUnsubscribingResponseStatusCANCELED
	case SubscriptionUnsubscribingResponseStatusINCOMPLETE:
		*s = SubscriptionUnsubscribingResponseStatusINCOMPLETE
	default:
		*s = SubscriptionUnsubscribingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUnsubscribingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUnsubscribingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		e.FieldStart("pay_type")
		s.PayType.Encode(e)
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate != nil {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionUpdatingRequest = [11]string{
	0:  "pay_type",
	1:  "plan_id",
	2:  "start_date",
	3:  "stop_date",
	4:  "end_month_flag",
	5:  "initial_amount",
	6:  "initial_tax",
	7:  "remarks",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
}

// Decode decodes SubscriptionUpdatingRequest from json.
func (s *SubscriptionUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingRequest to nil")
	}
	var requiredBitSet [2]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "pay_type":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.StopDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionUpdatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [2]uint8{
		0b00000001,
		0b00000000,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfSubscriptionUpdatingRequest) {
					name = jsonFieldsNameOfSubscriptionUpdatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingRequestEndMonthFlag as json.
func (s SubscriptionUpdatingRequestEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUpdatingRequestEndMonthFlag from json.
func (s *SubscriptionUpdatingRequestEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingRequestEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUpdatingRequestEndMonthFlag(v) {
	case SubscriptionUpdatingRequestEndMonthFlag0:
		*s = SubscriptionUpdatingRequestEndMonthFlag0
	case SubscriptionUpdatingRequestEndMonthFlag1:
		*s = SubscriptionUpdatingRequestEndMonthFlag1
	default:
		*s = SubscriptionUpdatingRequestEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUpdatingRequestEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingRequestEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingRequestPayType as json.
func (s SubscriptionUpdatingRequestPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUpdatingRequestPayType from json.
func (s *SubscriptionUpdatingRequestPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingRequestPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUpdatingRequestPayType(v) {
	case SubscriptionUpdatingRequestPayTypeCard:
		*s = SubscriptionUpdatingRequestPayTypeCard
	case SubscriptionUpdatingRequestPayTypeDirectdebit:
		*s = SubscriptionUpdatingRequestPayTypeDirectdebit
	default:
		*s = SubscriptionUpdatingRequestPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUpdatingRequestPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingRequestPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SubscriptionUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SubscriptionUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.PlanName.Set {
			e.FieldStart("plan_name")
			s.PlanName.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.TotalAmount.Set {
			e.FieldStart("total_amount")
			s.TotalAmount.Encode(e)
		}
	}
	{
		if s.InitialAmount.Set {
			e.FieldStart("initial_amount")
			s.InitialAmount.Encode(e)
		}
	}
	{
		if s.InitialTax.Set {
			e.FieldStart("initial_tax")
			s.InitialTax.Encode(e)
		}
	}
	{
		if s.InitialTotalAmount.Set {
			e.FieldStart("initial_total_amount")
			s.InitialTotalAmount.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.SendURL.Set {
			e.FieldStart("send_url")
			s.SendURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks != nil {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfSubscriptionUpdatingResponse = [27]string{
	0:  "id",
	1:  "shop_id",
	2:  "pay_type",
	3:  "plan_id",
	4:  "plan_name",
	5:  "customer_id",
	6:  "card_id",
	7:  "payment_method_id",
	8:  "amount",
	9:  "tax",
	10: "total_amount",
	11: "initial_amount",
	12: "initial_tax",
	13: "initial_total_amount",
	14: "status",
	15: "start_date",
	16: "next_charge_date",
	17: "stop_date",
	18: "end_month_flag",
	19: "send_url",
	20: "error_code",
	21: "client_field_1",
	22: "client_field_2",
	23: "client_field_3",
	24: "remarks",
	25: "created",
	26: "updated",
}

// Decode decodes SubscriptionUpdatingResponse from json.
func (s *SubscriptionUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "plan_name":
			if err := func() error {
				s.PlanName.Reset()
				if err := s.PlanName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_name\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "total_amount":
			if err := func() error {
				s.TotalAmount.Reset()
				if err := s.TotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_amount\"")
			}
		case "initial_amount":
			if err := func() error {
				s.InitialAmount.Reset()
				if err := s.InitialAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_amount\"")
			}
		case "initial_tax":
			if err := func() error {
				s.InitialTax.Reset()
				if err := s.InitialTax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_tax\"")
			}
		case "initial_total_amount":
			if err := func() error {
				s.InitialTotalAmount.Reset()
				if err := s.InitialTotalAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"initial_total_amount\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "send_url":
			if err := func() error {
				s.SendURL.Reset()
				if err := s.SendURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Remarks = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SubscriptionUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SubscriptionUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponseEndMonthFlag as json.
func (s SubscriptionUpdatingResponseEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUpdatingResponseEndMonthFlag from json.
func (s *SubscriptionUpdatingResponseEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingResponseEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUpdatingResponseEndMonthFlag(v) {
	case SubscriptionUpdatingResponseEndMonthFlag0:
		*s = SubscriptionUpdatingResponseEndMonthFlag0
	case SubscriptionUpdatingResponseEndMonthFlag1:
		*s = SubscriptionUpdatingResponseEndMonthFlag1
	default:
		*s = SubscriptionUpdatingResponseEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUpdatingResponseEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingResponseEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponsePayType as json.
func (s SubscriptionUpdatingResponsePayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUpdatingResponsePayType from json.
func (s *SubscriptionUpdatingResponsePayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingResponsePayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUpdatingResponsePayType(v) {
	case SubscriptionUpdatingResponsePayTypeCard:
		*s = SubscriptionUpdatingResponsePayTypeCard
	case SubscriptionUpdatingResponsePayTypeDirectdebit:
		*s = SubscriptionUpdatingResponsePayTypeDirectdebit
	default:
		*s = SubscriptionUpdatingResponsePayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUpdatingResponsePayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingResponsePayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SubscriptionUpdatingResponseStatus as json.
func (s SubscriptionUpdatingResponseStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes SubscriptionUpdatingResponseStatus from json.
func (s *SubscriptionUpdatingResponseStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SubscriptionUpdatingResponseStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch SubscriptionUpdatingResponseStatus(v) {
	case SubscriptionUpdatingResponseStatusACTIVE:
		*s = SubscriptionUpdatingResponseStatusACTIVE
	case SubscriptionUpdatingResponseStatusRUNNING:
		*s = SubscriptionUpdatingResponseStatusRUNNING
	case SubscriptionUpdatingResponseStatusCANCELED:
		*s = SubscriptionUpdatingResponseStatusCANCELED
	case SubscriptionUpdatingResponseStatusINCOMPLETE:
		*s = SubscriptionUpdatingResponseStatusINCOMPLETE
	default:
		*s = SubscriptionUpdatingResponseStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s SubscriptionUpdatingResponseStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SubscriptionUpdatingResponseStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdTenantName as json.
func (s TdTenantName) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes TdTenantName from json.
func (s *TdTenantName) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TdTenantName to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = TdTenantName(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TdTenantName) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TdTenantName) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Status as json.
func (s Tds2Status) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2Status from json.
func (s *Tds2Status) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2Status to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2Status(v) {
	case Tds2StatusAUTHENTICATING:
		*s = Tds2StatusAUTHENTICATING
	case Tds2StatusCHALLENGE:
		*s = Tds2StatusCHALLENGE
	case Tds2StatusACTIVATED:
		*s = Tds2StatusACTIVATED
	case Tds2StatusAUTHENTICATED:
		*s = Tds2StatusAUTHENTICATED
	default:
		*s = Tds2Status(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2Status) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2Status) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tds2Type as json.
func (s Tds2Type) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tds2Type from json.
func (s *Tds2Type) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tds2Type to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tds2Type(v) {
	case Tds2Type2:
		*s = Tds2Type2
	case Tds2Type3:
		*s = Tds2Type3
	default:
		*s = Tds2Type(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tds2Type) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tds2Type) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TdsType as json.
func (s TdsType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TdsType from json.
func (s *TdsType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TdsType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TdsType(v) {
	case TdsType0:
		*s = TdsType0
	case TdsType2:
		*s = TdsType2
	default:
		*s = TdsType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TdsType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TdsType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TenantShopListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TenantShopListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfTenantShopListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes TenantShopListRetrievingResponse from json.
func (s *TenantShopListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]Shop, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem Shop
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantShopListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TenantShopListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TenantShopRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TenantShopRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfTenantShopRetrievingResponse = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes TenantShopRetrievingResponse from json.
func (s *TenantShopRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilTenantShopRetrievingResponseShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantShopRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TenantShopRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseAPIKeyDisplayFlag as json.
func (s TenantShopRetrievingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopRetrievingResponseAPIKeyDisplayFlag from json.
func (s *TenantShopRetrievingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopRetrievingResponseAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopRetrievingResponseAPIKeyDisplayFlag(v) {
	case TenantShopRetrievingResponseAPIKeyDisplayFlag0:
		*s = TenantShopRetrievingResponseAPIKeyDisplayFlag0
	case TenantShopRetrievingResponseAPIKeyDisplayFlag1:
		*s = TenantShopRetrievingResponseAPIKeyDisplayFlag1
	default:
		*s = TenantShopRetrievingResponseAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopRetrievingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopRetrievingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseSharedCustomerFlag as json.
func (s TenantShopRetrievingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopRetrievingResponseSharedCustomerFlag from json.
func (s *TenantShopRetrievingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopRetrievingResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopRetrievingResponseSharedCustomerFlag(v) {
	case TenantShopRetrievingResponseSharedCustomerFlag0:
		*s = TenantShopRetrievingResponseSharedCustomerFlag0
	case TenantShopRetrievingResponseSharedCustomerFlag1:
		*s = TenantShopRetrievingResponseSharedCustomerFlag1
	default:
		*s = TenantShopRetrievingResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopRetrievingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopRetrievingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopRetrievingResponseShopType as json.
func (s TenantShopRetrievingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopRetrievingResponseShopType from json.
func (s *TenantShopRetrievingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopRetrievingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopRetrievingResponseShopType(v) {
	case TenantShopRetrievingResponseShopTypePlatform:
		*s = TenantShopRetrievingResponseShopTypePlatform
	case TenantShopRetrievingResponseShopTypeTenant:
		*s = TenantShopRetrievingResponseShopTypeTenant
	default:
		*s = TenantShopRetrievingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopRetrievingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopRetrievingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TenantShopUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TenantShopUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ExaminationMasterID.Set {
			e.FieldStart("examination_master_id")
			s.ExaminationMasterID.Encode(e)
		}
	}
	{
		if s.PlatformRate != nil {
			e.FieldStart("platform_rate")
			s.PlatformRate.Encode(e)
		}
	}
	{
		if s.FixedFee != nil {
			e.FieldStart("fixed_fee")
			s.FixedFee.Encode(e)
		}
	}
	{
		if s.WebRegistrationFee != nil {
			e.FieldStart("web_registration_fee")
			s.WebRegistrationFee.Encode(e)
		}
	}
	{
		if s.PaypayContentCategoryType != nil {
			e.FieldStart("paypay_content_category_type")
			s.PaypayContentCategoryType.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag != nil {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfTenantShopUpdatingRequest = [6]string{
	0: "examination_master_id",
	1: "platform_rate",
	2: "fixed_fee",
	3: "web_registration_fee",
	4: "paypay_content_category_type",
	5: "api_key_display_flag",
}

// Decode decodes TenantShopUpdatingRequest from json.
func (s *TenantShopUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "examination_master_id":
			if err := func() error {
				s.ExaminationMasterID.Reset()
				if err := s.ExaminationMasterID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_master_id\"")
			}
		case "platform_rate":
			if err := func() error {
				s.PlatformRate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PlatformRate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate\"")
			}
		case "fixed_fee":
			if err := func() error {
				s.FixedFee = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.FixedFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fixed_fee\"")
			}
		case "web_registration_fee":
			if err := func() error {
				s.WebRegistrationFee = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.WebRegistrationFee = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"web_registration_fee\"")
			}
		case "paypay_content_category_type":
			if err := func() error {
				s.PaypayContentCategoryType = nil
				var elem NilTenantShopUpdatingRequestPaypayContentCategoryType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaypayContentCategoryType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"paypay_content_category_type\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag = nil
				var elem NilTenantShopUpdatingRequestAPIKeyDisplayFlag
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.APIKeyDisplayFlag = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantShopUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TenantShopUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestAPIKeyDisplayFlag as json.
func (s TenantShopUpdatingRequestAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingRequestAPIKeyDisplayFlag from json.
func (s *TenantShopUpdatingRequestAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingRequestAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingRequestAPIKeyDisplayFlag(v) {
	case TenantShopUpdatingRequestAPIKeyDisplayFlag0:
		*s = TenantShopUpdatingRequestAPIKeyDisplayFlag0
	case TenantShopUpdatingRequestAPIKeyDisplayFlag1:
		*s = TenantShopUpdatingRequestAPIKeyDisplayFlag1
	default:
		*s = TenantShopUpdatingRequestAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingRequestAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingRequestAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestExaminationMasterID as json.
func (s TenantShopUpdatingRequestExaminationMasterID) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingRequestExaminationMasterID from json.
func (s *TenantShopUpdatingRequestExaminationMasterID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingRequestExaminationMasterID to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingRequestExaminationMasterID(v) {
	case TenantShopUpdatingRequestExaminationMasterIDVM:
		*s = TenantShopUpdatingRequestExaminationMasterIDVM
	case TenantShopUpdatingRequestExaminationMasterIDJad:
		*s = TenantShopUpdatingRequestExaminationMasterIDJad
	case TenantShopUpdatingRequestExaminationMasterIDApplepayVM:
		*s = TenantShopUpdatingRequestExaminationMasterIDApplepayVM
	case TenantShopUpdatingRequestExaminationMasterIDApplepayJad:
		*s = TenantShopUpdatingRequestExaminationMasterIDApplepayJad
	case TenantShopUpdatingRequestExaminationMasterIDKonbini:
		*s = TenantShopUpdatingRequestExaminationMasterIDKonbini
	case TenantShopUpdatingRequestExaminationMasterIDPaypay:
		*s = TenantShopUpdatingRequestExaminationMasterIDPaypay
	case TenantShopUpdatingRequestExaminationMasterIDDirectdebit:
		*s = TenantShopUpdatingRequestExaminationMasterIDDirectdebit
	default:
		*s = TenantShopUpdatingRequestExaminationMasterID(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingRequestExaminationMasterID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingRequestExaminationMasterID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingRequestPaypayContentCategoryType as json.
func (s TenantShopUpdatingRequestPaypayContentCategoryType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingRequestPaypayContentCategoryType from json.
func (s *TenantShopUpdatingRequestPaypayContentCategoryType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingRequestPaypayContentCategoryType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingRequestPaypayContentCategoryType(v) {
	case TenantShopUpdatingRequestPaypayContentCategoryType1:
		*s = TenantShopUpdatingRequestPaypayContentCategoryType1
	case TenantShopUpdatingRequestPaypayContentCategoryType2:
		*s = TenantShopUpdatingRequestPaypayContentCategoryType2
	default:
		*s = TenantShopUpdatingRequestPaypayContentCategoryType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingRequestPaypayContentCategoryType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingRequestPaypayContentCategoryType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TenantShopUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TenantShopUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.ShopName.Set {
			e.FieldStart("shop_name")
			s.ShopName.Encode(e)
		}
	}
	{
		if s.ShopNameKana.Set {
			e.FieldStart("shop_name_kana")
			s.ShopNameKana.Encode(e)
		}
	}
	{
		if s.ShopType != nil {
			e.FieldStart("shop_type")
			s.ShopType.Encode(e)
		}
	}
	{
		if s.PlatformID.Set {
			e.FieldStart("platform_id")
			s.PlatformID.Encode(e)
		}
	}
	{
		if s.PlatformName.Set {
			e.FieldStart("platform_name")
			s.PlatformName.Encode(e)
		}
	}
	{
		if s.SharedCustomerFlag.Set {
			e.FieldStart("shared_customer_flag")
			s.SharedCustomerFlag.Encode(e)
		}
	}
	{
		if s.CustomerGroupID.Set {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.PlatformRateList != nil {
			e.FieldStart("platform_rate_list")
			e.ArrStart()
			for _, elem := range s.PlatformRateList {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
	{
		if s.SendMailAddress.Set {
			e.FieldStart("send_mail_address")
			s.SendMailAddress.Encode(e)
		}
	}
	{
		if s.ShopMailAddress.Set {
			e.FieldStart("shop_mail_address")
			s.ShopMailAddress.Encode(e)
		}
	}
	{
		if s.LogKeepDays.Set {
			e.FieldStart("log_keep_days")
			s.LogKeepDays.Encode(e)
		}
	}
	{
		if s.APIVersion.Set {
			e.FieldStart("api_version")
			s.APIVersion.Encode(e)
		}
	}
	{
		if s.APIKeyDisplayFlag.Set {
			e.FieldStart("api_key_display_flag")
			s.APIKeyDisplayFlag.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfTenantShopUpdatingResponse = [16]string{
	0:  "id",
	1:  "shop_name",
	2:  "shop_name_kana",
	3:  "shop_type",
	4:  "platform_id",
	5:  "platform_name",
	6:  "shared_customer_flag",
	7:  "customer_group_id",
	8:  "platform_rate_list",
	9:  "send_mail_address",
	10: "shop_mail_address",
	11: "log_keep_days",
	12: "api_version",
	13: "api_key_display_flag",
	14: "created",
	15: "updated",
}

// Decode decodes TenantShopUpdatingResponse from json.
func (s *TenantShopUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "shop_name":
			if err := func() error {
				s.ShopName.Reset()
				if err := s.ShopName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name\"")
			}
		case "shop_name_kana":
			if err := func() error {
				s.ShopNameKana.Reset()
				if err := s.ShopNameKana.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_name_kana\"")
			}
		case "shop_type":
			if err := func() error {
				s.ShopType = nil
				var elem NilTenantShopUpdatingResponseShopType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ShopType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_type\"")
			}
		case "platform_id":
			if err := func() error {
				s.PlatformID.Reset()
				if err := s.PlatformID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_id\"")
			}
		case "platform_name":
			if err := func() error {
				s.PlatformName.Reset()
				if err := s.PlatformName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_name\"")
			}
		case "shared_customer_flag":
			if err := func() error {
				s.SharedCustomerFlag.Reset()
				if err := s.SharedCustomerFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shared_customer_flag\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID.Reset()
				if err := s.CustomerGroupID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "platform_rate_list":
			if err := func() error {
				s.PlatformRateList = make([]PlatformRateConfig, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem PlatformRateConfig
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.PlatformRateList = append(s.PlatformRateList, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"platform_rate_list\"")
			}
		case "send_mail_address":
			if err := func() error {
				s.SendMailAddress.Reset()
				if err := s.SendMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"send_mail_address\"")
			}
		case "shop_mail_address":
			if err := func() error {
				s.ShopMailAddress.Reset()
				if err := s.ShopMailAddress.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_mail_address\"")
			}
		case "log_keep_days":
			if err := func() error {
				s.LogKeepDays.Reset()
				if err := s.LogKeepDays.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"log_keep_days\"")
			}
		case "api_version":
			if err := func() error {
				s.APIVersion.Reset()
				if err := s.APIVersion.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_version\"")
			}
		case "api_key_display_flag":
			if err := func() error {
				s.APIKeyDisplayFlag.Reset()
				if err := s.APIKeyDisplayFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"api_key_display_flag\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TenantShopUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TenantShopUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseAPIKeyDisplayFlag as json.
func (s TenantShopUpdatingResponseAPIKeyDisplayFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingResponseAPIKeyDisplayFlag from json.
func (s *TenantShopUpdatingResponseAPIKeyDisplayFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingResponseAPIKeyDisplayFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingResponseAPIKeyDisplayFlag(v) {
	case TenantShopUpdatingResponseAPIKeyDisplayFlag0:
		*s = TenantShopUpdatingResponseAPIKeyDisplayFlag0
	case TenantShopUpdatingResponseAPIKeyDisplayFlag1:
		*s = TenantShopUpdatingResponseAPIKeyDisplayFlag1
	default:
		*s = TenantShopUpdatingResponseAPIKeyDisplayFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingResponseAPIKeyDisplayFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingResponseAPIKeyDisplayFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseSharedCustomerFlag as json.
func (s TenantShopUpdatingResponseSharedCustomerFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingResponseSharedCustomerFlag from json.
func (s *TenantShopUpdatingResponseSharedCustomerFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingResponseSharedCustomerFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingResponseSharedCustomerFlag(v) {
	case TenantShopUpdatingResponseSharedCustomerFlag0:
		*s = TenantShopUpdatingResponseSharedCustomerFlag0
	case TenantShopUpdatingResponseSharedCustomerFlag1:
		*s = TenantShopUpdatingResponseSharedCustomerFlag1
	default:
		*s = TenantShopUpdatingResponseSharedCustomerFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingResponseSharedCustomerFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingResponseSharedCustomerFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes TenantShopUpdatingResponseShopType as json.
func (s TenantShopUpdatingResponseShopType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes TenantShopUpdatingResponseShopType from json.
func (s *TenantShopUpdatingResponseShopType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TenantShopUpdatingResponseShopType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch TenantShopUpdatingResponseShopType(v) {
	case TenantShopUpdatingResponseShopTypePlatform:
		*s = TenantShopUpdatingResponseShopTypePlatform
	case TenantShopUpdatingResponseShopTypeTenant:
		*s = TenantShopUpdatingResponseShopTypeTenant
	default:
		*s = TenantShopUpdatingResponseShopType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s TenantShopUpdatingResponseShopType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TenantShopUpdatingResponseShopType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CustomerGroupID != nil {
			e.FieldStart("customer_group_id")
			s.CustomerGroupID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.CardNoDisplay.Set {
			e.FieldStart("card_no_display")
			s.CardNoDisplay.Encode(e)
		}
	}
	{
		if s.ExpireDisplay != nil {
			e.FieldStart("expire_display")
			s.ExpireDisplay.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ProcessType.Set {
			e.FieldStart("process_type")
			s.ProcessType.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Forward != nil {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventCard = [12]string{
	0:  "shop_id",
	1:  "customer_id",
	2:  "customer_group_id",
	3:  "card_id",
	4:  "default_flag",
	5:  "card_no_display",
	6:  "expire_display",
	7:  "process_date",
	8:  "process_type",
	9:  "pay_type",
	10: "forward",
	11: "event",
}

// Decode decodes WebhookEventCard from json.
func (s *WebhookEventCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "customer_group_id":
			if err := func() error {
				s.CustomerGroupID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CustomerGroupID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_group_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "card_no_display":
			if err := func() error {
				s.CardNoDisplay.Reset()
				if err := s.CardNoDisplay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_no_display\"")
			}
		case "expire_display":
			if err := func() error {
				s.ExpireDisplay = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ExpireDisplay = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"expire_display\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "process_type":
			if err := func() error {
				s.ProcessType.Reset()
				if err := s.ProcessType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_type\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "forward":
			if err := func() error {
				s.Forward = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Forward = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardDefaultFlag as json.
func (s WebhookEventCardDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardDefaultFlag from json.
func (s *WebhookEventCardDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardDefaultFlag(v) {
	case WebhookEventCardDefaultFlag0:
		*s = WebhookEventCardDefaultFlag0
	case WebhookEventCardDefaultFlag1:
		*s = WebhookEventCardDefaultFlag1
	default:
		*s = WebhookEventCardDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardEvent as json.
func (s WebhookEventCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardEvent from json.
func (s *WebhookEventCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardEvent(v) {
	case WebhookEventCardEventPaymentsCardRegist:
		*s = WebhookEventCardEventPaymentsCardRegist
	case WebhookEventCardEventPaymentsCardExec:
		*s = WebhookEventCardEventPaymentsCardExec
	case WebhookEventCardEventPaymentsCardCapture:
		*s = WebhookEventCardEventPaymentsCardCapture
	case WebhookEventCardEventPaymentsCardCancel:
		*s = WebhookEventCardEventPaymentsCardCancel
	case WebhookEventCardEventPaymentsCardAuth:
		*s = WebhookEventCardEventPaymentsCardAuth
	case WebhookEventCardEventPaymentsCardChange:
		*s = WebhookEventCardEventPaymentsCardChange
	case WebhookEventCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventCardEventPaymentsCardSecure2Authenticate
	case WebhookEventCardEventPaymentsCardSecure2Result:
		*s = WebhookEventCardEventPaymentsCardSecure2Result
	case WebhookEventCardEventPaymentsCardSecure:
		*s = WebhookEventCardEventPaymentsCardSecure
	case WebhookEventCardEventPaymentsApplepayRegist:
		*s = WebhookEventCardEventPaymentsApplepayRegist
	case WebhookEventCardEventPaymentsApplepayExec:
		*s = WebhookEventCardEventPaymentsApplepayExec
	case WebhookEventCardEventPaymentsApplepayCapture:
		*s = WebhookEventCardEventPaymentsApplepayCapture
	case WebhookEventCardEventPaymentsApplepayCancel:
		*s = WebhookEventCardEventPaymentsApplepayCancel
	case WebhookEventCardEventPaymentsKonbiniRegist:
		*s = WebhookEventCardEventPaymentsKonbiniRegist
	case WebhookEventCardEventPaymentsKonbiniExec:
		*s = WebhookEventCardEventPaymentsKonbiniExec
	case WebhookEventCardEventPaymentsKonbiniCancel:
		*s = WebhookEventCardEventPaymentsKonbiniCancel
	case WebhookEventCardEventPaymentsKonbiniComplete:
		*s = WebhookEventCardEventPaymentsKonbiniComplete
	case WebhookEventCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventCardEventPaymentsKonbiniCompleteStub
	case WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventCardEventPaymentsPaypayRegist:
		*s = WebhookEventCardEventPaymentsPaypayRegist
	case WebhookEventCardEventPaymentsPaypayExec:
		*s = WebhookEventCardEventPaymentsPaypayExec
	case WebhookEventCardEventPaymentsPaypayCapture:
		*s = WebhookEventCardEventPaymentsPaypayCapture
	case WebhookEventCardEventPaymentsPaypayCancel:
		*s = WebhookEventCardEventPaymentsPaypayCancel
	case WebhookEventCardEventPaymentsPaypayChange:
		*s = WebhookEventCardEventPaymentsPaypayChange
	case WebhookEventCardEventPaymentsPaypayComplete:
		*s = WebhookEventCardEventPaymentsPaypayComplete
	case WebhookEventCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventCardEventPaymentsDirectdebitRegist
	case WebhookEventCardEventPaymentsDirectdebitExec:
		*s = WebhookEventCardEventPaymentsDirectdebitExec
	case WebhookEventCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventCardEventPaymentsDirectdebitCancel
	case WebhookEventCardEventPaymentsDirectdebitChange:
		*s = WebhookEventCardEventPaymentsDirectdebitChange
	case WebhookEventCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventCardEventPaymentsDirectdebitComplete
	case WebhookEventCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventCardEventCustomersPaymentMethodsUpdated
	case WebhookEventCardEventCardRegist:
		*s = WebhookEventCardEventCardRegist
	case WebhookEventCardEventCardUpdate:
		*s = WebhookEventCardEventCardUpdate
	case WebhookEventCardEventSubscriptionCardRegist:
		*s = WebhookEventCardEventSubscriptionCardRegist
	case WebhookEventCardEventSubscriptionCardDelete:
		*s = WebhookEventCardEventSubscriptionCardDelete
	case WebhookEventCardEventSubscriptionCardUpdate:
		*s = WebhookEventCardEventSubscriptionCardUpdate
	case WebhookEventCardEventRecurringCardBatch:
		*s = WebhookEventCardEventRecurringCardBatch
	case WebhookEventCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventCardEventSubscriptionDirectdebitRegist
	case WebhookEventCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventCardEventSubscriptionDirectdebitDelete
	case WebhookEventCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventCardEventSubscriptionDirectdebitUpdate
	case WebhookEventCardEventRecurringDirectdebitBatch:
		*s = WebhookEventCardEventRecurringDirectdebitBatch
	case WebhookEventCardEventPaymentsBulkCardRegist:
		*s = WebhookEventCardEventPaymentsBulkCardRegist
	case WebhookEventCardEventPaymentsBulkCardBatch:
		*s = WebhookEventCardEventPaymentsBulkCardBatch
	case WebhookEventCardEventContractsStatusCodeUpdated:
		*s = WebhookEventCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardPayType as json.
func (s WebhookEventCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardPayType from json.
func (s *WebhookEventCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardPayType(v) {
	case WebhookEventCardPayTypeCard:
		*s = WebhookEventCardPayTypeCard
	default:
		*s = WebhookEventCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCardProcessType as json.
func (s WebhookEventCardProcessType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCardProcessType from json.
func (s *WebhookEventCardProcessType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCardProcessType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCardProcessType(v) {
	case WebhookEventCardProcessTypeI:
		*s = WebhookEventCardProcessTypeI
	case WebhookEventCardProcessTypeU:
		*s = WebhookEventCardProcessTypeU
	default:
		*s = WebhookEventCardProcessType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCardProcessType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCardProcessType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventContract) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventContract) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Body != nil {
			e.FieldStart("body")
			e.ArrStart()
			for _, elem := range s.Body {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWebhookEventContract = [3]string{
	0: "shop_id",
	1: "event",
	2: "body",
}

// Decode decodes WebhookEventContract from json.
func (s *WebhookEventContract) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContract to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "body":
			if err := func() error {
				s.Body = make([]WebhookEventContractBodyItem, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WebhookEventContractBodyItem
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.Body = append(s.Body, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"body\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventContract")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventContract) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContract) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventContractBodyItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventContractBodyItem) encodeFields(e *jx.Encoder) {
	{
		if s.Acquirer.Set {
			e.FieldStart("acquirer")
			s.Acquirer.Encode(e)
		}
	}
	{
		if s.ExaminationTask.Set {
			e.FieldStart("examination_task")
			s.ExaminationTask.Encode(e)
		}
	}
	{
		if s.StatusCode.Set {
			e.FieldStart("status_code")
			s.StatusCode.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.IsUpdated.Set {
			e.FieldStart("is_updated")
			s.IsUpdated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventContractBodyItem = [5]string{
	0: "acquirer",
	1: "examination_task",
	2: "status_code",
	3: "status",
	4: "is_updated",
}

// Decode decodes WebhookEventContractBodyItem from json.
func (s *WebhookEventContractBodyItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContractBodyItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "acquirer":
			if err := func() error {
				s.Acquirer.Reset()
				if err := s.Acquirer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"acquirer\"")
			}
		case "examination_task":
			if err := func() error {
				s.ExaminationTask.Reset()
				if err := s.ExaminationTask.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"examination_task\"")
			}
		case "status_code":
			if err := func() error {
				s.StatusCode.Reset()
				if err := s.StatusCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status_code\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "is_updated":
			if err := func() error {
				s.IsUpdated.Reset()
				if err := s.IsUpdated.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"is_updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventContractBodyItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventContractBodyItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContractBodyItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractBodyItemAcquirer as json.
func (s WebhookEventContractBodyItemAcquirer) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventContractBodyItemAcquirer from json.
func (s *WebhookEventContractBodyItemAcquirer) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContractBodyItemAcquirer to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventContractBodyItemAcquirer(v) {
	case WebhookEventContractBodyItemAcquirerUC:
		*s = WebhookEventContractBodyItemAcquirerUC
	case WebhookEventContractBodyItemAcquirerTFC:
		*s = WebhookEventContractBodyItemAcquirerTFC
	case WebhookEventContractBodyItemAcquirerJCBAMEX:
		*s = WebhookEventContractBodyItemAcquirerJCBAMEX
	case WebhookEventContractBodyItemAcquirerDINERS:
		*s = WebhookEventContractBodyItemAcquirerDINERS
	case WebhookEventContractBodyItemAcquirerAPPLEPAYUC:
		*s = WebhookEventContractBodyItemAcquirerAPPLEPAYUC
	case WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX:
		*s = WebhookEventContractBodyItemAcquirerAPPLEPAYJCBAMEX
	case WebhookEventContractBodyItemAcquirerPAYSLE:
		*s = WebhookEventContractBodyItemAcquirerPAYSLE
	case WebhookEventContractBodyItemAcquirerPAYPAY:
		*s = WebhookEventContractBodyItemAcquirerPAYPAY
	case WebhookEventContractBodyItemAcquirerDIRECTDEBIT:
		*s = WebhookEventContractBodyItemAcquirerDIRECTDEBIT
	default:
		*s = WebhookEventContractBodyItemAcquirer(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventContractBodyItemAcquirer) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContractBodyItemAcquirer) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractBodyItemStatusCode as json.
func (s WebhookEventContractBodyItemStatusCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventContractBodyItemStatusCode from json.
func (s *WebhookEventContractBodyItemStatusCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContractBodyItemStatusCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventContractBodyItemStatusCode(v) {
	case WebhookEventContractBodyItemStatusCode701:
		*s = WebhookEventContractBodyItemStatusCode701
	case WebhookEventContractBodyItemStatusCode702:
		*s = WebhookEventContractBodyItemStatusCode702
	case WebhookEventContractBodyItemStatusCode703:
		*s = WebhookEventContractBodyItemStatusCode703
	case WebhookEventContractBodyItemStatusCode704:
		*s = WebhookEventContractBodyItemStatusCode704
	case WebhookEventContractBodyItemStatusCode705:
		*s = WebhookEventContractBodyItemStatusCode705
	case WebhookEventContractBodyItemStatusCode706:
		*s = WebhookEventContractBodyItemStatusCode706
	case WebhookEventContractBodyItemStatusCode707:
		*s = WebhookEventContractBodyItemStatusCode707
	case WebhookEventContractBodyItemStatusCode708:
		*s = WebhookEventContractBodyItemStatusCode708
	case WebhookEventContractBodyItemStatusCode709:
		*s = WebhookEventContractBodyItemStatusCode709
	default:
		*s = WebhookEventContractBodyItemStatusCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventContractBodyItemStatusCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContractBodyItemStatusCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventContractEvent as json.
func (s WebhookEventContractEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventContractEvent from json.
func (s *WebhookEventContractEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventContractEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventContractEvent(v) {
	case WebhookEventContractEventPaymentsCardRegist:
		*s = WebhookEventContractEventPaymentsCardRegist
	case WebhookEventContractEventPaymentsCardExec:
		*s = WebhookEventContractEventPaymentsCardExec
	case WebhookEventContractEventPaymentsCardCapture:
		*s = WebhookEventContractEventPaymentsCardCapture
	case WebhookEventContractEventPaymentsCardCancel:
		*s = WebhookEventContractEventPaymentsCardCancel
	case WebhookEventContractEventPaymentsCardAuth:
		*s = WebhookEventContractEventPaymentsCardAuth
	case WebhookEventContractEventPaymentsCardChange:
		*s = WebhookEventContractEventPaymentsCardChange
	case WebhookEventContractEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventContractEventPaymentsCardSecure2Authenticate
	case WebhookEventContractEventPaymentsCardSecure2Result:
		*s = WebhookEventContractEventPaymentsCardSecure2Result
	case WebhookEventContractEventPaymentsCardSecure:
		*s = WebhookEventContractEventPaymentsCardSecure
	case WebhookEventContractEventPaymentsApplepayRegist:
		*s = WebhookEventContractEventPaymentsApplepayRegist
	case WebhookEventContractEventPaymentsApplepayExec:
		*s = WebhookEventContractEventPaymentsApplepayExec
	case WebhookEventContractEventPaymentsApplepayCapture:
		*s = WebhookEventContractEventPaymentsApplepayCapture
	case WebhookEventContractEventPaymentsApplepayCancel:
		*s = WebhookEventContractEventPaymentsApplepayCancel
	case WebhookEventContractEventPaymentsKonbiniRegist:
		*s = WebhookEventContractEventPaymentsKonbiniRegist
	case WebhookEventContractEventPaymentsKonbiniExec:
		*s = WebhookEventContractEventPaymentsKonbiniExec
	case WebhookEventContractEventPaymentsKonbiniCancel:
		*s = WebhookEventContractEventPaymentsKonbiniCancel
	case WebhookEventContractEventPaymentsKonbiniComplete:
		*s = WebhookEventContractEventPaymentsKonbiniComplete
	case WebhookEventContractEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventContractEventPaymentsKonbiniCompleteStub
	case WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventContractEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventContractEventPaymentsPaypayRegist:
		*s = WebhookEventContractEventPaymentsPaypayRegist
	case WebhookEventContractEventPaymentsPaypayExec:
		*s = WebhookEventContractEventPaymentsPaypayExec
	case WebhookEventContractEventPaymentsPaypayCapture:
		*s = WebhookEventContractEventPaymentsPaypayCapture
	case WebhookEventContractEventPaymentsPaypayCancel:
		*s = WebhookEventContractEventPaymentsPaypayCancel
	case WebhookEventContractEventPaymentsPaypayChange:
		*s = WebhookEventContractEventPaymentsPaypayChange
	case WebhookEventContractEventPaymentsPaypayComplete:
		*s = WebhookEventContractEventPaymentsPaypayComplete
	case WebhookEventContractEventPaymentsDirectdebitRegist:
		*s = WebhookEventContractEventPaymentsDirectdebitRegist
	case WebhookEventContractEventPaymentsDirectdebitExec:
		*s = WebhookEventContractEventPaymentsDirectdebitExec
	case WebhookEventContractEventPaymentsDirectdebitCancel:
		*s = WebhookEventContractEventPaymentsDirectdebitCancel
	case WebhookEventContractEventPaymentsDirectdebitChange:
		*s = WebhookEventContractEventPaymentsDirectdebitChange
	case WebhookEventContractEventPaymentsDirectdebitComplete:
		*s = WebhookEventContractEventPaymentsDirectdebitComplete
	case WebhookEventContractEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventContractEventPaymentsDirectdebitCompleteStub
	case WebhookEventContractEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventContractEventCustomersPaymentMethodsUpdated
	case WebhookEventContractEventCardRegist:
		*s = WebhookEventContractEventCardRegist
	case WebhookEventContractEventCardUpdate:
		*s = WebhookEventContractEventCardUpdate
	case WebhookEventContractEventSubscriptionCardRegist:
		*s = WebhookEventContractEventSubscriptionCardRegist
	case WebhookEventContractEventSubscriptionCardDelete:
		*s = WebhookEventContractEventSubscriptionCardDelete
	case WebhookEventContractEventSubscriptionCardUpdate:
		*s = WebhookEventContractEventSubscriptionCardUpdate
	case WebhookEventContractEventRecurringCardBatch:
		*s = WebhookEventContractEventRecurringCardBatch
	case WebhookEventContractEventSubscriptionDirectdebitRegist:
		*s = WebhookEventContractEventSubscriptionDirectdebitRegist
	case WebhookEventContractEventSubscriptionDirectdebitDelete:
		*s = WebhookEventContractEventSubscriptionDirectdebitDelete
	case WebhookEventContractEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventContractEventSubscriptionDirectdebitUpdate
	case WebhookEventContractEventRecurringDirectdebitBatch:
		*s = WebhookEventContractEventRecurringDirectdebitBatch
	case WebhookEventContractEventPaymentsBulkCardRegist:
		*s = WebhookEventContractEventPaymentsBulkCardRegist
	case WebhookEventContractEventPaymentsBulkCardBatch:
		*s = WebhookEventContractEventPaymentsBulkCardBatch
	case WebhookEventContractEventContractsStatusCodeUpdated:
		*s = WebhookEventContractEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventContractEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventContractEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventContractEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventCustomerPaymentMethod) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventCustomerPaymentMethod) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ApplicationType != nil {
			e.FieldStart("application_type")
			s.ApplicationType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventCustomerPaymentMethod = [10]string{
	0: "shop_id",
	1: "customer_id",
	2: "payment_method_id",
	3: "pay_type",
	4: "status",
	5: "client_field_1",
	6: "client_field_2",
	7: "client_field_3",
	8: "application_type",
	9: "event",
}

// Decode decodes WebhookEventCustomerPaymentMethod from json.
func (s *WebhookEventCustomerPaymentMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethod to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "application_type":
			if err := func() error {
				s.ApplicationType = nil
				var elem NilWebhookEventCustomerPaymentMethodApplicationType
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ApplicationType = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"application_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventCustomerPaymentMethod")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventCustomerPaymentMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodApplicationType as json.
func (s WebhookEventCustomerPaymentMethodApplicationType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCustomerPaymentMethodApplicationType from json.
func (s *WebhookEventCustomerPaymentMethodApplicationType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethodApplicationType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCustomerPaymentMethodApplicationType(v) {
	case WebhookEventCustomerPaymentMethodApplicationTypePAPER:
		*s = WebhookEventCustomerPaymentMethodApplicationTypePAPER
	case WebhookEventCustomerPaymentMethodApplicationTypeONLINE:
		*s = WebhookEventCustomerPaymentMethodApplicationTypeONLINE
	default:
		*s = WebhookEventCustomerPaymentMethodApplicationType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCustomerPaymentMethodApplicationType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethodApplicationType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodEvent as json.
func (s WebhookEventCustomerPaymentMethodEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCustomerPaymentMethodEvent from json.
func (s *WebhookEventCustomerPaymentMethodEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethodEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCustomerPaymentMethodEvent(v) {
	case WebhookEventCustomerPaymentMethodEventPaymentsCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsCardExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardExec
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardCapture
	case WebhookEventCustomerPaymentMethodEventPaymentsCardCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardCancel
	case WebhookEventCustomerPaymentMethodEventPaymentsCardAuth:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardAuth
	case WebhookEventCustomerPaymentMethodEventPaymentsCardChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardChange
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Authenticate
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure2Result
	case WebhookEventCustomerPaymentMethodEventPaymentsCardSecure:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsCardSecure
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayExec
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayCapture
	case WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsApplepayCancel
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExec
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCancel
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniComplete
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniCompleteStub
	case WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayExec
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayCapture
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayCancel
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayChange
	case WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsPaypayComplete
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitExec
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCancel
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitChange
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitComplete
	case WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsDirectdebitCompleteStub
	case WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventCustomerPaymentMethodEventCustomersPaymentMethodsUpdated
	case WebhookEventCustomerPaymentMethodEventCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventCardRegist
	case WebhookEventCustomerPaymentMethodEventCardUpdate:
		*s = WebhookEventCustomerPaymentMethodEventCardUpdate
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardRegist
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardDelete
	case WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionCardUpdate
	case WebhookEventCustomerPaymentMethodEventRecurringCardBatch:
		*s = WebhookEventCustomerPaymentMethodEventRecurringCardBatch
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitRegist
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitDelete
	case WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventCustomerPaymentMethodEventSubscriptionDirectdebitUpdate
	case WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch:
		*s = WebhookEventCustomerPaymentMethodEventRecurringDirectdebitBatch
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsBulkCardRegist
	case WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch:
		*s = WebhookEventCustomerPaymentMethodEventPaymentsBulkCardBatch
	case WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated:
		*s = WebhookEventCustomerPaymentMethodEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventCustomerPaymentMethodEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCustomerPaymentMethodEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethodEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodPayType as json.
func (s WebhookEventCustomerPaymentMethodPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCustomerPaymentMethodPayType from json.
func (s *WebhookEventCustomerPaymentMethodPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethodPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCustomerPaymentMethodPayType(v) {
	case WebhookEventCustomerPaymentMethodPayTypeCard:
		*s = WebhookEventCustomerPaymentMethodPayTypeCard
	case WebhookEventCustomerPaymentMethodPayTypeDirectdebit:
		*s = WebhookEventCustomerPaymentMethodPayTypeDirectdebit
	default:
		*s = WebhookEventCustomerPaymentMethodPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCustomerPaymentMethodPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethodPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventCustomerPaymentMethodStatus as json.
func (s WebhookEventCustomerPaymentMethodStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventCustomerPaymentMethodStatus from json.
func (s *WebhookEventCustomerPaymentMethodStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventCustomerPaymentMethodStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventCustomerPaymentMethodStatus(v) {
	case WebhookEventCustomerPaymentMethodStatusINACTIVATED:
		*s = WebhookEventCustomerPaymentMethodStatusINACTIVATED
	case WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION:
		*s = WebhookEventCustomerPaymentMethodStatusAWAITINGCUSTOMERACTION
	case WebhookEventCustomerPaymentMethodStatusACTIVATED:
		*s = WebhookEventCustomerPaymentMethodStatusACTIVATED
	case WebhookEventCustomerPaymentMethodStatusFAILED:
		*s = WebhookEventCustomerPaymentMethodStatusFAILED
	default:
		*s = WebhookEventCustomerPaymentMethodStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventCustomerPaymentMethodStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventCustomerPaymentMethodStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentApplePay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentApplePay) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.Forward != nil {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.TransactionID != nil {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.TransactionDate.Set {
			e.FieldStart("transaction_date")
			s.TransactionDate.Encode(e)
		}
	}
	{
		if s.Approve != nil {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentApplePay = [20]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "method",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "amount",
	11: "tax",
	12: "currency",
	13: "job_code",
	14: "forward",
	15: "transaction_id",
	16: "transaction_date",
	17: "approve",
	18: "error_code",
	19: "event",
}

// Decode decodes WebhookEventPaymentApplePay from json.
func (s *WebhookEventPaymentApplePay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "forward":
			if err := func() error {
				s.Forward = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Forward = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TransactionID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "transaction_date":
			if err := func() error {
				s.TransactionDate.Reset()
				if err := s.TransactionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_date\"")
			}
		case "approve":
			if err := func() error {
				s.Approve = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Approve = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentApplePay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentApplePay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayCurrency as json.
func (s WebhookEventPaymentApplePayCurrency) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayCurrency from json.
func (s *WebhookEventPaymentApplePayCurrency) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayCurrency to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayCurrency(v) {
	case WebhookEventPaymentApplePayCurrencyJPY:
		*s = WebhookEventPaymentApplePayCurrencyJPY
	default:
		*s = WebhookEventPaymentApplePayCurrency(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayCurrency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayCurrency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayEvent as json.
func (s WebhookEventPaymentApplePayEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayEvent from json.
func (s *WebhookEventPaymentApplePayEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayEvent(v) {
	case WebhookEventPaymentApplePayEventPaymentsCardRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsCardRegist
	case WebhookEventPaymentApplePayEventPaymentsCardExec:
		*s = WebhookEventPaymentApplePayEventPaymentsCardExec
	case WebhookEventPaymentApplePayEventPaymentsCardCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsCardCapture
	case WebhookEventPaymentApplePayEventPaymentsCardCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsCardCancel
	case WebhookEventPaymentApplePayEventPaymentsCardAuth:
		*s = WebhookEventPaymentApplePayEventPaymentsCardAuth
	case WebhookEventPaymentApplePayEventPaymentsCardChange:
		*s = WebhookEventPaymentApplePayEventPaymentsCardChange
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentApplePayEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure2Result
	case WebhookEventPaymentApplePayEventPaymentsCardSecure:
		*s = WebhookEventPaymentApplePayEventPaymentsCardSecure
	case WebhookEventPaymentApplePayEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayRegist
	case WebhookEventPaymentApplePayEventPaymentsApplepayExec:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayExec
	case WebhookEventPaymentApplePayEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayCapture
	case WebhookEventPaymentApplePayEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsApplepayCancel
	case WebhookEventPaymentApplePayEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniRegist
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniExec
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniCancel
	case WebhookEventPaymentApplePayEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniComplete
	case WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentApplePayEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentApplePayEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayRegist
	case WebhookEventPaymentApplePayEventPaymentsPaypayExec:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayExec
	case WebhookEventPaymentApplePayEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayCapture
	case WebhookEventPaymentApplePayEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayCancel
	case WebhookEventPaymentApplePayEventPaymentsPaypayChange:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayChange
	case WebhookEventPaymentApplePayEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsPaypayComplete
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitRegist
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitExec
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitCancel
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitChange
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitComplete
	case WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentApplePayEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentApplePayEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentApplePayEventCardRegist:
		*s = WebhookEventPaymentApplePayEventCardRegist
	case WebhookEventPaymentApplePayEventCardUpdate:
		*s = WebhookEventPaymentApplePayEventCardUpdate
	case WebhookEventPaymentApplePayEventSubscriptionCardRegist:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardRegist
	case WebhookEventPaymentApplePayEventSubscriptionCardDelete:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardDelete
	case WebhookEventPaymentApplePayEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentApplePayEventSubscriptionCardUpdate
	case WebhookEventPaymentApplePayEventRecurringCardBatch:
		*s = WebhookEventPaymentApplePayEventRecurringCardBatch
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentApplePayEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentApplePayEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentApplePayEventRecurringDirectdebitBatch
	case WebhookEventPaymentApplePayEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentApplePayEventPaymentsBulkCardRegist
	case WebhookEventPaymentApplePayEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentApplePayEventPaymentsBulkCardBatch
	case WebhookEventPaymentApplePayEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentApplePayEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentApplePayEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayJobCode as json.
func (s WebhookEventPaymentApplePayJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayJobCode from json.
func (s *WebhookEventPaymentApplePayJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayJobCode(v) {
	case WebhookEventPaymentApplePayJobCodeAUTH:
		*s = WebhookEventPaymentApplePayJobCodeAUTH
	case WebhookEventPaymentApplePayJobCodeCAPTURE:
		*s = WebhookEventPaymentApplePayJobCodeCAPTURE
	default:
		*s = WebhookEventPaymentApplePayJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayMethod as json.
func (s WebhookEventPaymentApplePayMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayMethod from json.
func (s *WebhookEventPaymentApplePayMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayMethod(v) {
	case WebhookEventPaymentApplePayMethod1:
		*s = WebhookEventPaymentApplePayMethod1
	case WebhookEventPaymentApplePayMethod2:
		*s = WebhookEventPaymentApplePayMethod2
	case WebhookEventPaymentApplePayMethod5:
		*s = WebhookEventPaymentApplePayMethod5
	default:
		*s = WebhookEventPaymentApplePayMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayPayType as json.
func (s WebhookEventPaymentApplePayPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayPayType from json.
func (s *WebhookEventPaymentApplePayPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayPayType(v) {
	case WebhookEventPaymentApplePayPayTypeCard:
		*s = WebhookEventPaymentApplePayPayTypeCard
	case WebhookEventPaymentApplePayPayTypeKonbini:
		*s = WebhookEventPaymentApplePayPayTypeKonbini
	case WebhookEventPaymentApplePayPayTypePaypay:
		*s = WebhookEventPaymentApplePayPayTypePaypay
	case WebhookEventPaymentApplePayPayTypeApplepay:
		*s = WebhookEventPaymentApplePayPayTypeApplepay
	case WebhookEventPaymentApplePayPayTypeDirectdebit:
		*s = WebhookEventPaymentApplePayPayTypeDirectdebit
	case WebhookEventPaymentApplePayPayTypeVirtualaccount:
		*s = WebhookEventPaymentApplePayPayTypeVirtualaccount
	default:
		*s = WebhookEventPaymentApplePayPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentApplePayStatus as json.
func (s WebhookEventPaymentApplePayStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentApplePayStatus from json.
func (s *WebhookEventPaymentApplePayStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentApplePayStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentApplePayStatus(v) {
	case WebhookEventPaymentApplePayStatusUNPROCESSED:
		*s = WebhookEventPaymentApplePayStatusUNPROCESSED
	case WebhookEventPaymentApplePayStatusCHECKED:
		*s = WebhookEventPaymentApplePayStatusCHECKED
	case WebhookEventPaymentApplePayStatusAUTHORIZED:
		*s = WebhookEventPaymentApplePayStatusAUTHORIZED
	case WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentApplePayStatusAWAITINGCUSTOMERPAYMENT
	case WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentApplePayStatusAWAITINGPAYMENTAPPROVAL
	case WebhookEventPaymentApplePayStatusCAPTURED:
		*s = WebhookEventPaymentApplePayStatusCAPTURED
	case WebhookEventPaymentApplePayStatusCANCELED:
		*s = WebhookEventPaymentApplePayStatusCANCELED
	case WebhookEventPaymentApplePayStatusEXPIRED:
		*s = WebhookEventPaymentApplePayStatusEXPIRED
	case WebhookEventPaymentApplePayStatusAUTHENTICATED:
		*s = WebhookEventPaymentApplePayStatusAUTHENTICATED
	case WebhookEventPaymentApplePayStatusFAILED:
		*s = WebhookEventPaymentApplePayStatusFAILED
	default:
		*s = WebhookEventPaymentApplePayStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentApplePayStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentApplePayStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentBulkBatchCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentBulkBatchCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.SucceededCount.Set {
			e.FieldStart("succeeded_count")
			s.SucceededCount.Encode(e)
		}
	}
	{
		if s.FailedCount.Set {
			e.FieldStart("failed_count")
			s.FailedCount.Encode(e)
		}
	}
	{
		if s.TotalCount.Set {
			e.FieldStart("total_count")
			s.TotalCount.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentBulkBatchCard = [9]string{
	0: "shop_id",
	1: "bulk_payment_id",
	2: "file_name",
	3: "status",
	4: "succeeded_count",
	5: "failed_count",
	6: "total_count",
	7: "pay_type",
	8: "event",
}

// Decode decodes WebhookEventPaymentBulkBatchCard from json.
func (s *WebhookEventPaymentBulkBatchCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkBatchCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "succeeded_count":
			if err := func() error {
				s.SucceededCount.Reset()
				if err := s.SucceededCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded_count\"")
			}
		case "failed_count":
			if err := func() error {
				s.FailedCount.Reset()
				if err := s.FailedCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed_count\"")
			}
		case "total_count":
			if err := func() error {
				s.TotalCount.Reset()
				if err := s.TotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total_count\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentBulkBatchCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentBulkBatchCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkBatchCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardEvent as json.
func (s WebhookEventPaymentBulkBatchCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkBatchCardEvent from json.
func (s *WebhookEventPaymentBulkBatchCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkBatchCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkBatchCardEvent(v) {
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardExec
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardCapture
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardCancel
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardAuth
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardChange
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure2Result
	case WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsCardSecure
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayExec
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCapture
	case WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsApplepayCancel
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExec
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCancel
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniComplete
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayExec
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCapture
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayCancel
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayChange
	case WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsPaypayComplete
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitExec
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCancel
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitChange
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitComplete
	case WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentBulkBatchCardEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentBulkBatchCardEventCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventCardRegist
	case WebhookEventPaymentBulkBatchCardEventCardUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventCardUpdate
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardRegist
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardDelete
	case WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionCardUpdate
	case WebhookEventPaymentBulkBatchCardEventRecurringCardBatch:
		*s = WebhookEventPaymentBulkBatchCardEventRecurringCardBatch
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentBulkBatchCardEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentBulkBatchCardEventRecurringDirectdebitBatch
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardRegist
	case WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentBulkBatchCardEventPaymentsBulkCardBatch
	case WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentBulkBatchCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentBulkBatchCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkBatchCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkBatchCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardPayType as json.
func (s WebhookEventPaymentBulkBatchCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkBatchCardPayType from json.
func (s *WebhookEventPaymentBulkBatchCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkBatchCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkBatchCardPayType(v) {
	case WebhookEventPaymentBulkBatchCardPayTypeCard:
		*s = WebhookEventPaymentBulkBatchCardPayTypeCard
	default:
		*s = WebhookEventPaymentBulkBatchCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkBatchCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkBatchCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkBatchCardStatus as json.
func (s WebhookEventPaymentBulkBatchCardStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkBatchCardStatus from json.
func (s *WebhookEventPaymentBulkBatchCardStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkBatchCardStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkBatchCardStatus(v) {
	case WebhookEventPaymentBulkBatchCardStatusCHECKING:
		*s = WebhookEventPaymentBulkBatchCardStatusCHECKING
	case WebhookEventPaymentBulkBatchCardStatusCHECKED:
		*s = WebhookEventPaymentBulkBatchCardStatusCHECKED
	case WebhookEventPaymentBulkBatchCardStatusRUNNING:
		*s = WebhookEventPaymentBulkBatchCardStatusRUNNING
	case WebhookEventPaymentBulkBatchCardStatusCOMPLETED:
		*s = WebhookEventPaymentBulkBatchCardStatusCOMPLETED
	case WebhookEventPaymentBulkBatchCardStatusERROR:
		*s = WebhookEventPaymentBulkBatchCardStatusERROR
	default:
		*s = WebhookEventPaymentBulkBatchCardStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkBatchCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkBatchCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentBulkRegistCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentBulkRegistCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.FileName.Set {
			e.FieldStart("file_name")
			s.FileName.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.RegistTotalCount.Set {
			e.FieldStart("regist_total_count")
			s.RegistTotalCount.Encode(e)
		}
	}
	{
		if s.ErrorTotalCount.Set {
			e.FieldStart("error_total_count")
			s.ErrorTotalCount.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.BulkSearchURL.Set {
			e.FieldStart("bulk_search_url")
			s.BulkSearchURL.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentBulkRegistCard = [10]string{
	0: "shop_id",
	1: "bulk_payment_id",
	2: "file_name",
	3: "status",
	4: "regist_total_count",
	5: "error_total_count",
	6: "pay_type",
	7: "bulk_search_url",
	8: "error_code",
	9: "event",
}

// Decode decodes WebhookEventPaymentBulkRegistCard from json.
func (s *WebhookEventPaymentBulkRegistCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkRegistCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"file_name\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "regist_total_count":
			if err := func() error {
				s.RegistTotalCount.Reset()
				if err := s.RegistTotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"regist_total_count\"")
			}
		case "error_total_count":
			if err := func() error {
				s.ErrorTotalCount.Reset()
				if err := s.ErrorTotalCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_total_count\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "bulk_search_url":
			if err := func() error {
				s.BulkSearchURL.Reset()
				if err := s.BulkSearchURL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_search_url\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentBulkRegistCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentBulkRegistCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkRegistCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardEvent as json.
func (s WebhookEventPaymentBulkRegistCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkRegistCardEvent from json.
func (s *WebhookEventPaymentBulkRegistCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkRegistCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkRegistCardEvent(v) {
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardExec
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardCapture
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardCancel
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardAuth
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardChange
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure2Result
	case WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsCardSecure
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayExec
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCapture
	case WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsApplepayCancel
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExec
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCancel
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniComplete
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayExec
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCapture
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayCancel
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayChange
	case WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsPaypayComplete
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitExec
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCancel
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitChange
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitComplete
	case WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentBulkRegistCardEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentBulkRegistCardEventCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventCardRegist
	case WebhookEventPaymentBulkRegistCardEventCardUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventCardUpdate
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardRegist
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardDelete
	case WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionCardUpdate
	case WebhookEventPaymentBulkRegistCardEventRecurringCardBatch:
		*s = WebhookEventPaymentBulkRegistCardEventRecurringCardBatch
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentBulkRegistCardEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentBulkRegistCardEventRecurringDirectdebitBatch
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardRegist
	case WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentBulkRegistCardEventPaymentsBulkCardBatch
	case WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentBulkRegistCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentBulkRegistCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkRegistCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkRegistCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardPayType as json.
func (s WebhookEventPaymentBulkRegistCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkRegistCardPayType from json.
func (s *WebhookEventPaymentBulkRegistCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkRegistCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkRegistCardPayType(v) {
	case WebhookEventPaymentBulkRegistCardPayTypeCard:
		*s = WebhookEventPaymentBulkRegistCardPayTypeCard
	default:
		*s = WebhookEventPaymentBulkRegistCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkRegistCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkRegistCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentBulkRegistCardStatus as json.
func (s WebhookEventPaymentBulkRegistCardStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentBulkRegistCardStatus from json.
func (s *WebhookEventPaymentBulkRegistCardStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentBulkRegistCardStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentBulkRegistCardStatus(v) {
	case WebhookEventPaymentBulkRegistCardStatusCHECKING:
		*s = WebhookEventPaymentBulkRegistCardStatusCHECKING
	case WebhookEventPaymentBulkRegistCardStatusCHECKED:
		*s = WebhookEventPaymentBulkRegistCardStatusCHECKED
	case WebhookEventPaymentBulkRegistCardStatusRUNNING:
		*s = WebhookEventPaymentBulkRegistCardStatusRUNNING
	case WebhookEventPaymentBulkRegistCardStatusCOMPLETED:
		*s = WebhookEventPaymentBulkRegistCardStatusCOMPLETED
	case WebhookEventPaymentBulkRegistCardStatusERROR:
		*s = WebhookEventPaymentBulkRegistCardStatusERROR
	default:
		*s = WebhookEventPaymentBulkRegistCardStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentBulkRegistCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentBulkRegistCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.Method.Set {
			e.FieldStart("method")
			s.Method.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.Currency.Set {
			e.FieldStart("currency")
			s.Currency.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.BulkPaymentID.Set {
			e.FieldStart("bulk_payment_id")
			s.BulkPaymentID.Encode(e)
		}
	}
	{
		if s.Forward != nil {
			e.FieldStart("forward")
			s.Forward.Encode(e)
		}
	}
	{
		if s.TransactionID != nil {
			e.FieldStart("transaction_id")
			s.TransactionID.Encode(e)
		}
	}
	{
		if s.TransactionDate.Set {
			e.FieldStart("transaction_date")
			s.TransactionDate.Encode(e)
		}
	}
	{
		if s.Approve != nil {
			e.FieldStart("approve")
			s.Approve.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentCard = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "method",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "amount",
	11: "tax",
	12: "currency",
	13: "job_code",
	14: "subscription_id",
	15: "bulk_payment_id",
	16: "forward",
	17: "transaction_id",
	18: "transaction_date",
	19: "approve",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentCard from json.
func (s *WebhookEventPaymentCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "method":
			if err := func() error {
				s.Method.Reset()
				if err := s.Method.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"method\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "currency":
			if err := func() error {
				s.Currency.Reset()
				if err := s.Currency.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currency\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "bulk_payment_id":
			if err := func() error {
				s.BulkPaymentID.Reset()
				if err := s.BulkPaymentID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bulk_payment_id\"")
			}
		case "forward":
			if err := func() error {
				s.Forward = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Forward = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"forward\"")
			}
		case "transaction_id":
			if err := func() error {
				s.TransactionID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.TransactionID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_id\"")
			}
		case "transaction_date":
			if err := func() error {
				s.TransactionDate.Reset()
				if err := s.TransactionDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transaction_date\"")
			}
		case "approve":
			if err := func() error {
				s.Approve = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Approve = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"approve\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardCurrency as json.
func (s WebhookEventPaymentCardCurrency) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardCurrency from json.
func (s *WebhookEventPaymentCardCurrency) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardCurrency to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardCurrency(v) {
	case WebhookEventPaymentCardCurrencyJPY:
		*s = WebhookEventPaymentCardCurrencyJPY
	default:
		*s = WebhookEventPaymentCardCurrency(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardCurrency) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardCurrency) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardEvent as json.
func (s WebhookEventPaymentCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardEvent from json.
func (s *WebhookEventPaymentCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardEvent(v) {
	case WebhookEventPaymentCardEventPaymentsCardRegist:
		*s = WebhookEventPaymentCardEventPaymentsCardRegist
	case WebhookEventPaymentCardEventPaymentsCardExec:
		*s = WebhookEventPaymentCardEventPaymentsCardExec
	case WebhookEventPaymentCardEventPaymentsCardCapture:
		*s = WebhookEventPaymentCardEventPaymentsCardCapture
	case WebhookEventPaymentCardEventPaymentsCardCancel:
		*s = WebhookEventPaymentCardEventPaymentsCardCancel
	case WebhookEventPaymentCardEventPaymentsCardAuth:
		*s = WebhookEventPaymentCardEventPaymentsCardAuth
	case WebhookEventPaymentCardEventPaymentsCardChange:
		*s = WebhookEventPaymentCardEventPaymentsCardChange
	case WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentCardEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure2Result
	case WebhookEventPaymentCardEventPaymentsCardSecure:
		*s = WebhookEventPaymentCardEventPaymentsCardSecure
	case WebhookEventPaymentCardEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentCardEventPaymentsApplepayRegist
	case WebhookEventPaymentCardEventPaymentsApplepayExec:
		*s = WebhookEventPaymentCardEventPaymentsApplepayExec
	case WebhookEventPaymentCardEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentCardEventPaymentsApplepayCapture
	case WebhookEventPaymentCardEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentCardEventPaymentsApplepayCancel
	case WebhookEventPaymentCardEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniRegist
	case WebhookEventPaymentCardEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniExec
	case WebhookEventPaymentCardEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniCancel
	case WebhookEventPaymentCardEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniComplete
	case WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentCardEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentCardEventPaymentsPaypayRegist
	case WebhookEventPaymentCardEventPaymentsPaypayExec:
		*s = WebhookEventPaymentCardEventPaymentsPaypayExec
	case WebhookEventPaymentCardEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentCardEventPaymentsPaypayCapture
	case WebhookEventPaymentCardEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentCardEventPaymentsPaypayCancel
	case WebhookEventPaymentCardEventPaymentsPaypayChange:
		*s = WebhookEventPaymentCardEventPaymentsPaypayChange
	case WebhookEventPaymentCardEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentCardEventPaymentsPaypayComplete
	case WebhookEventPaymentCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitRegist
	case WebhookEventPaymentCardEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitExec
	case WebhookEventPaymentCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitCancel
	case WebhookEventPaymentCardEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitChange
	case WebhookEventPaymentCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitComplete
	case WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentCardEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentCardEventCardRegist:
		*s = WebhookEventPaymentCardEventCardRegist
	case WebhookEventPaymentCardEventCardUpdate:
		*s = WebhookEventPaymentCardEventCardUpdate
	case WebhookEventPaymentCardEventSubscriptionCardRegist:
		*s = WebhookEventPaymentCardEventSubscriptionCardRegist
	case WebhookEventPaymentCardEventSubscriptionCardDelete:
		*s = WebhookEventPaymentCardEventSubscriptionCardDelete
	case WebhookEventPaymentCardEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentCardEventSubscriptionCardUpdate
	case WebhookEventPaymentCardEventRecurringCardBatch:
		*s = WebhookEventPaymentCardEventRecurringCardBatch
	case WebhookEventPaymentCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentCardEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentCardEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentCardEventRecurringDirectdebitBatch
	case WebhookEventPaymentCardEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentCardEventPaymentsBulkCardRegist
	case WebhookEventPaymentCardEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentCardEventPaymentsBulkCardBatch
	case WebhookEventPaymentCardEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardJobCode as json.
func (s WebhookEventPaymentCardJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardJobCode from json.
func (s *WebhookEventPaymentCardJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardJobCode(v) {
	case WebhookEventPaymentCardJobCodeCHECK:
		*s = WebhookEventPaymentCardJobCodeCHECK
	case WebhookEventPaymentCardJobCodeAUTH:
		*s = WebhookEventPaymentCardJobCodeAUTH
	case WebhookEventPaymentCardJobCodeCAPTURE:
		*s = WebhookEventPaymentCardJobCodeCAPTURE
	default:
		*s = WebhookEventPaymentCardJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardMethod as json.
func (s WebhookEventPaymentCardMethod) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardMethod from json.
func (s *WebhookEventPaymentCardMethod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardMethod to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardMethod(v) {
	case WebhookEventPaymentCardMethod1:
		*s = WebhookEventPaymentCardMethod1
	case WebhookEventPaymentCardMethod2:
		*s = WebhookEventPaymentCardMethod2
	case WebhookEventPaymentCardMethod5:
		*s = WebhookEventPaymentCardMethod5
	default:
		*s = WebhookEventPaymentCardMethod(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardMethod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardMethod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardPayType as json.
func (s WebhookEventPaymentCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardPayType from json.
func (s *WebhookEventPaymentCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardPayType(v) {
	case WebhookEventPaymentCardPayTypeCard:
		*s = WebhookEventPaymentCardPayTypeCard
	case WebhookEventPaymentCardPayTypeKonbini:
		*s = WebhookEventPaymentCardPayTypeKonbini
	case WebhookEventPaymentCardPayTypePaypay:
		*s = WebhookEventPaymentCardPayTypePaypay
	case WebhookEventPaymentCardPayTypeApplepay:
		*s = WebhookEventPaymentCardPayTypeApplepay
	case WebhookEventPaymentCardPayTypeDirectdebit:
		*s = WebhookEventPaymentCardPayTypeDirectdebit
	case WebhookEventPaymentCardPayTypeVirtualaccount:
		*s = WebhookEventPaymentCardPayTypeVirtualaccount
	default:
		*s = WebhookEventPaymentCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentCardStatus as json.
func (s WebhookEventPaymentCardStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentCardStatus from json.
func (s *WebhookEventPaymentCardStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentCardStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentCardStatus(v) {
	case WebhookEventPaymentCardStatusUNPROCESSED:
		*s = WebhookEventPaymentCardStatusUNPROCESSED
	case WebhookEventPaymentCardStatusCHECKED:
		*s = WebhookEventPaymentCardStatusCHECKED
	case WebhookEventPaymentCardStatusAUTHORIZED:
		*s = WebhookEventPaymentCardStatusAUTHORIZED
	case WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentCardStatusAWAITINGCUSTOMERPAYMENT
	case WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentCardStatusAWAITINGPAYMENTAPPROVAL
	case WebhookEventPaymentCardStatusCAPTURED:
		*s = WebhookEventPaymentCardStatusCAPTURED
	case WebhookEventPaymentCardStatusCANCELED:
		*s = WebhookEventPaymentCardStatusCANCELED
	case WebhookEventPaymentCardStatusEXPIRED:
		*s = WebhookEventPaymentCardStatusEXPIRED
	case WebhookEventPaymentCardStatusAUTHENTICATED:
		*s = WebhookEventPaymentCardStatusAUTHENTICATED
	case WebhookEventPaymentCardStatusFAILED:
		*s = WebhookEventPaymentCardStatusFAILED
	default:
		*s = WebhookEventPaymentCardStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.ResultCode.Set {
			e.FieldStart("result_code")
			s.ResultCode.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.TargetDate.Set {
			e.FieldStart("target_date")
			s.TargetDate.Encode(e)
		}
	}
	{
		if s.WithdrawalDate.Set {
			e.FieldStart("withdrawal_date")
			s.WithdrawalDate.Encode(e)
		}
	}
	{
		if s.RequestAcceptEndDate.Set {
			e.FieldStart("request_accept_end_date")
			s.RequestAcceptEndDate.Encode(e)
		}
	}
	{
		if s.TransferReturnDate.Set {
			e.FieldStart("transfer_return_date")
			s.TransferReturnDate.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentDirectDebit = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "payment_method_id",
	7:  "result_code",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
	11: "amount",
	12: "tax",
	13: "process_date",
	14: "target_date",
	15: "withdrawal_date",
	16: "request_accept_end_date",
	17: "transfer_return_date",
	18: "remarks",
	19: "subscription_id",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentDirectDebit from json.
func (s *WebhookEventPaymentDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "result_code":
			if err := func() error {
				s.ResultCode.Reset()
				if err := s.ResultCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"result_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "target_date":
			if err := func() error {
				s.TargetDate.Reset()
				if err := s.TargetDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"target_date\"")
			}
		case "withdrawal_date":
			if err := func() error {
				s.WithdrawalDate.Reset()
				if err := s.WithdrawalDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"withdrawal_date\"")
			}
		case "request_accept_end_date":
			if err := func() error {
				s.RequestAcceptEndDate.Reset()
				if err := s.RequestAcceptEndDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"request_accept_end_date\"")
			}
		case "transfer_return_date":
			if err := func() error {
				s.TransferReturnDate.Reset()
				if err := s.TransferReturnDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"transfer_return_date\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitEvent as json.
func (s WebhookEventPaymentDirectDebitEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentDirectDebitEvent from json.
func (s *WebhookEventPaymentDirectDebitEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebitEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentDirectDebitEvent(v) {
	case WebhookEventPaymentDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardRegist
	case WebhookEventPaymentDirectDebitEventPaymentsCardExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardExec
	case WebhookEventPaymentDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardCapture
	case WebhookEventPaymentDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardCancel
	case WebhookEventPaymentDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardAuth
	case WebhookEventPaymentDirectDebitEventPaymentsCardChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardChange
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure2Result
	case WebhookEventPaymentDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventPaymentDirectDebitEventPaymentsCardSecure
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayRegist
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayExec
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayCapture
	case WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsApplepayCancel
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniRegist
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniExec
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniCancel
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniComplete
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayRegist
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayExec
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayCapture
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayCancel
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayChange
	case WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsPaypayComplete
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitRegist
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitExec
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCancel
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitChange
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitComplete
	case WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentDirectDebitEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentDirectDebitEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentDirectDebitEventCardRegist:
		*s = WebhookEventPaymentDirectDebitEventCardRegist
	case WebhookEventPaymentDirectDebitEventCardUpdate:
		*s = WebhookEventPaymentDirectDebitEventCardUpdate
	case WebhookEventPaymentDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardRegist
	case WebhookEventPaymentDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardDelete
	case WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionCardUpdate
	case WebhookEventPaymentDirectDebitEventRecurringCardBatch:
		*s = WebhookEventPaymentDirectDebitEventRecurringCardBatch
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentDirectDebitEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentDirectDebitEventRecurringDirectdebitBatch
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentDirectDebitEventPaymentsBulkCardRegist
	case WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentDirectDebitEventPaymentsBulkCardBatch
	case WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentDirectDebitEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentDirectDebitEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitPayType as json.
func (s WebhookEventPaymentDirectDebitPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentDirectDebitPayType from json.
func (s *WebhookEventPaymentDirectDebitPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebitPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentDirectDebitPayType(v) {
	case WebhookEventPaymentDirectDebitPayTypeCard:
		*s = WebhookEventPaymentDirectDebitPayTypeCard
	case WebhookEventPaymentDirectDebitPayTypeKonbini:
		*s = WebhookEventPaymentDirectDebitPayTypeKonbini
	case WebhookEventPaymentDirectDebitPayTypePaypay:
		*s = WebhookEventPaymentDirectDebitPayTypePaypay
	case WebhookEventPaymentDirectDebitPayTypeApplepay:
		*s = WebhookEventPaymentDirectDebitPayTypeApplepay
	case WebhookEventPaymentDirectDebitPayTypeDirectdebit:
		*s = WebhookEventPaymentDirectDebitPayTypeDirectdebit
	case WebhookEventPaymentDirectDebitPayTypeVirtualaccount:
		*s = WebhookEventPaymentDirectDebitPayTypeVirtualaccount
	default:
		*s = WebhookEventPaymentDirectDebitPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitResultCode as json.
func (s WebhookEventPaymentDirectDebitResultCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentDirectDebitResultCode from json.
func (s *WebhookEventPaymentDirectDebitResultCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebitResultCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentDirectDebitResultCode(v) {
	case WebhookEventPaymentDirectDebitResultCode0:
		*s = WebhookEventPaymentDirectDebitResultCode0
	case WebhookEventPaymentDirectDebitResultCode1:
		*s = WebhookEventPaymentDirectDebitResultCode1
	case WebhookEventPaymentDirectDebitResultCode2:
		*s = WebhookEventPaymentDirectDebitResultCode2
	case WebhookEventPaymentDirectDebitResultCode3:
		*s = WebhookEventPaymentDirectDebitResultCode3
	case WebhookEventPaymentDirectDebitResultCode4:
		*s = WebhookEventPaymentDirectDebitResultCode4
	case WebhookEventPaymentDirectDebitResultCode8:
		*s = WebhookEventPaymentDirectDebitResultCode8
	case WebhookEventPaymentDirectDebitResultCode9:
		*s = WebhookEventPaymentDirectDebitResultCode9
	case WebhookEventPaymentDirectDebitResultCodeE:
		*s = WebhookEventPaymentDirectDebitResultCodeE
	case WebhookEventPaymentDirectDebitResultCodeN:
		*s = WebhookEventPaymentDirectDebitResultCodeN
	default:
		*s = WebhookEventPaymentDirectDebitResultCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentDirectDebitResultCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebitResultCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentDirectDebitStatus as json.
func (s WebhookEventPaymentDirectDebitStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentDirectDebitStatus from json.
func (s *WebhookEventPaymentDirectDebitStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentDirectDebitStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentDirectDebitStatus(v) {
	case WebhookEventPaymentDirectDebitStatusUNPROCESSED:
		*s = WebhookEventPaymentDirectDebitStatusUNPROCESSED
	case WebhookEventPaymentDirectDebitStatusCHECKED:
		*s = WebhookEventPaymentDirectDebitStatusCHECKED
	case WebhookEventPaymentDirectDebitStatusAUTHORIZED:
		*s = WebhookEventPaymentDirectDebitStatusAUTHORIZED
	case WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentDirectDebitStatusAWAITINGCUSTOMERPAYMENT
	case WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentDirectDebitStatusAWAITINGPAYMENTAPPROVAL
	case WebhookEventPaymentDirectDebitStatusCAPTURED:
		*s = WebhookEventPaymentDirectDebitStatusCAPTURED
	case WebhookEventPaymentDirectDebitStatusCANCELED:
		*s = WebhookEventPaymentDirectDebitStatusCANCELED
	case WebhookEventPaymentDirectDebitStatusEXPIRED:
		*s = WebhookEventPaymentDirectDebitStatusEXPIRED
	case WebhookEventPaymentDirectDebitStatusAUTHENTICATED:
		*s = WebhookEventPaymentDirectDebitStatusAUTHENTICATED
	case WebhookEventPaymentDirectDebitStatusFAILED:
		*s = WebhookEventPaymentDirectDebitStatusFAILED
	default:
		*s = WebhookEventPaymentDirectDebitStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentDirectDebitStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentDirectDebitStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentKonbini) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentKonbini) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.OverpaymentFlag.Set {
			e.FieldStart("overpayment_flag")
			s.OverpaymentFlag.Encode(e)
		}
	}
	{
		if s.CancelOverpaymentFlag.Set {
			e.FieldStart("cancel_overpayment_flag")
			s.CancelOverpaymentFlag.Encode(e)
		}
	}
	{
		if s.PaymentDate.Set {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.PaymentTerm.Set {
			e.FieldStart("payment_term")
			s.PaymentTerm.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.KonbiniCode.Set {
			e.FieldStart("konbini_code")
			s.KonbiniCode.Encode(e)
		}
	}
	{
		if len(s.KonbiniStoreCode) != 0 {
			e.FieldStart("konbini_store_code")
			e.Raw(s.KonbiniStoreCode)
		}
	}
	{
		if s.OrderSerial.Set {
			e.FieldStart("order_serial")
			s.OrderSerial.Encode(e)
		}
	}
	{
		if s.InvoiceID.Set {
			e.FieldStart("invoice_id")
			s.InvoiceID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentKonbini = [22]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "overpayment_flag",
	7:  "cancel_overpayment_flag",
	8:  "payment_date",
	9:  "payment_term",
	10: "process_date",
	11: "client_field_1",
	12: "client_field_2",
	13: "client_field_3",
	14: "amount",
	15: "tax",
	16: "konbini_code",
	17: "konbini_store_code",
	18: "order_serial",
	19: "invoice_id",
	20: "error_code",
	21: "event",
}

// Decode decodes WebhookEventPaymentKonbini from json.
func (s *WebhookEventPaymentKonbini) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbini to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "overpayment_flag":
			if err := func() error {
				s.OverpaymentFlag.Reset()
				if err := s.OverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"overpayment_flag\"")
			}
		case "cancel_overpayment_flag":
			if err := func() error {
				s.CancelOverpaymentFlag.Reset()
				if err := s.CancelOverpaymentFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancel_overpayment_flag\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate.Reset()
				if err := s.PaymentDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "payment_term":
			if err := func() error {
				s.PaymentTerm.Reset()
				if err := s.PaymentTerm.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_term\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "konbini_code":
			if err := func() error {
				s.KonbiniCode.Reset()
				if err := s.KonbiniCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_code\"")
			}
		case "konbini_store_code":
			if err := func() error {
				v, err := d.RawAppend(nil)
				s.KonbiniStoreCode = jx.Raw(v)
				if err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"konbini_store_code\"")
			}
		case "order_serial":
			if err := func() error {
				s.OrderSerial.Reset()
				if err := s.OrderSerial.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_serial\"")
			}
		case "invoice_id":
			if err := func() error {
				s.InvoiceID.Reset()
				if err := s.InvoiceID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"invoice_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentKonbini")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentKonbini) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbini) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniCancelOverpaymentFlag as json.
func (s WebhookEventPaymentKonbiniCancelOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniCancelOverpaymentFlag from json.
func (s *WebhookEventPaymentKonbiniCancelOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniCancelOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniCancelOverpaymentFlag(v) {
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag0:
		*s = WebhookEventPaymentKonbiniCancelOverpaymentFlag0
	case WebhookEventPaymentKonbiniCancelOverpaymentFlag1:
		*s = WebhookEventPaymentKonbiniCancelOverpaymentFlag1
	default:
		*s = WebhookEventPaymentKonbiniCancelOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniCancelOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniCancelOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniEvent as json.
func (s WebhookEventPaymentKonbiniEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniEvent from json.
func (s *WebhookEventPaymentKonbiniEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniEvent(v) {
	case WebhookEventPaymentKonbiniEventPaymentsCardRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardRegist
	case WebhookEventPaymentKonbiniEventPaymentsCardExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardExec
	case WebhookEventPaymentKonbiniEventPaymentsCardCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardCapture
	case WebhookEventPaymentKonbiniEventPaymentsCardCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardCancel
	case WebhookEventPaymentKonbiniEventPaymentsCardAuth:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardAuth
	case WebhookEventPaymentKonbiniEventPaymentsCardChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardChange
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure2Result
	case WebhookEventPaymentKonbiniEventPaymentsCardSecure:
		*s = WebhookEventPaymentKonbiniEventPaymentsCardSecure
	case WebhookEventPaymentKonbiniEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayRegist
	case WebhookEventPaymentKonbiniEventPaymentsApplepayExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayExec
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayCapture
	case WebhookEventPaymentKonbiniEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsApplepayCancel
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniRegist
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniExec
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniCancel
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniComplete
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentKonbiniEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentKonbiniEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayRegist
	case WebhookEventPaymentKonbiniEventPaymentsPaypayExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayExec
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayCapture
	case WebhookEventPaymentKonbiniEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayCancel
	case WebhookEventPaymentKonbiniEventPaymentsPaypayChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayChange
	case WebhookEventPaymentKonbiniEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsPaypayComplete
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitRegist
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitExec
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitCancel
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitChange
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitComplete
	case WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentKonbiniEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentKonbiniEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentKonbiniEventCardRegist:
		*s = WebhookEventPaymentKonbiniEventCardRegist
	case WebhookEventPaymentKonbiniEventCardUpdate:
		*s = WebhookEventPaymentKonbiniEventCardUpdate
	case WebhookEventPaymentKonbiniEventSubscriptionCardRegist:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardRegist
	case WebhookEventPaymentKonbiniEventSubscriptionCardDelete:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardDelete
	case WebhookEventPaymentKonbiniEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentKonbiniEventSubscriptionCardUpdate
	case WebhookEventPaymentKonbiniEventRecurringCardBatch:
		*s = WebhookEventPaymentKonbiniEventRecurringCardBatch
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentKonbiniEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentKonbiniEventRecurringDirectdebitBatch
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentKonbiniEventPaymentsBulkCardRegist
	case WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentKonbiniEventPaymentsBulkCardBatch
	case WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentKonbiniEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentKonbiniEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniKonbiniCode as json.
func (s WebhookEventPaymentKonbiniKonbiniCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniKonbiniCode from json.
func (s *WebhookEventPaymentKonbiniKonbiniCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniKonbiniCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniKonbiniCode(v) {
	case WebhookEventPaymentKonbiniKonbiniCode00010:
		*s = WebhookEventPaymentKonbiniKonbiniCode00010
	case WebhookEventPaymentKonbiniKonbiniCode00020:
		*s = WebhookEventPaymentKonbiniKonbiniCode00020
	case WebhookEventPaymentKonbiniKonbiniCode00030:
		*s = WebhookEventPaymentKonbiniKonbiniCode00030
	case WebhookEventPaymentKonbiniKonbiniCode00080:
		*s = WebhookEventPaymentKonbiniKonbiniCode00080
	case WebhookEventPaymentKonbiniKonbiniCode00760:
		*s = WebhookEventPaymentKonbiniKonbiniCode00760
	default:
		*s = WebhookEventPaymentKonbiniKonbiniCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniKonbiniCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniKonbiniCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniOverpaymentFlag as json.
func (s WebhookEventPaymentKonbiniOverpaymentFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniOverpaymentFlag from json.
func (s *WebhookEventPaymentKonbiniOverpaymentFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniOverpaymentFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniOverpaymentFlag(v) {
	case WebhookEventPaymentKonbiniOverpaymentFlag0:
		*s = WebhookEventPaymentKonbiniOverpaymentFlag0
	case WebhookEventPaymentKonbiniOverpaymentFlag1:
		*s = WebhookEventPaymentKonbiniOverpaymentFlag1
	default:
		*s = WebhookEventPaymentKonbiniOverpaymentFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniOverpaymentFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniOverpaymentFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniPayType as json.
func (s WebhookEventPaymentKonbiniPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniPayType from json.
func (s *WebhookEventPaymentKonbiniPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniPayType(v) {
	case WebhookEventPaymentKonbiniPayTypeCard:
		*s = WebhookEventPaymentKonbiniPayTypeCard
	case WebhookEventPaymentKonbiniPayTypeKonbini:
		*s = WebhookEventPaymentKonbiniPayTypeKonbini
	case WebhookEventPaymentKonbiniPayTypePaypay:
		*s = WebhookEventPaymentKonbiniPayTypePaypay
	case WebhookEventPaymentKonbiniPayTypeApplepay:
		*s = WebhookEventPaymentKonbiniPayTypeApplepay
	case WebhookEventPaymentKonbiniPayTypeDirectdebit:
		*s = WebhookEventPaymentKonbiniPayTypeDirectdebit
	case WebhookEventPaymentKonbiniPayTypeVirtualaccount:
		*s = WebhookEventPaymentKonbiniPayTypeVirtualaccount
	default:
		*s = WebhookEventPaymentKonbiniPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentKonbiniStatus as json.
func (s WebhookEventPaymentKonbiniStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentKonbiniStatus from json.
func (s *WebhookEventPaymentKonbiniStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentKonbiniStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentKonbiniStatus(v) {
	case WebhookEventPaymentKonbiniStatusUNPROCESSED:
		*s = WebhookEventPaymentKonbiniStatusUNPROCESSED
	case WebhookEventPaymentKonbiniStatusCHECKED:
		*s = WebhookEventPaymentKonbiniStatusCHECKED
	case WebhookEventPaymentKonbiniStatusAUTHORIZED:
		*s = WebhookEventPaymentKonbiniStatusAUTHORIZED
	case WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentKonbiniStatusAWAITINGCUSTOMERPAYMENT
	case WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentKonbiniStatusAWAITINGPAYMENTAPPROVAL
	case WebhookEventPaymentKonbiniStatusCAPTURED:
		*s = WebhookEventPaymentKonbiniStatusCAPTURED
	case WebhookEventPaymentKonbiniStatusCANCELED:
		*s = WebhookEventPaymentKonbiniStatusCANCELED
	case WebhookEventPaymentKonbiniStatusEXPIRED:
		*s = WebhookEventPaymentKonbiniStatusEXPIRED
	case WebhookEventPaymentKonbiniStatusAUTHENTICATED:
		*s = WebhookEventPaymentKonbiniStatusAUTHENTICATED
	case WebhookEventPaymentKonbiniStatusFAILED:
		*s = WebhookEventPaymentKonbiniStatusFAILED
	default:
		*s = WebhookEventPaymentKonbiniStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentKonbiniStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentKonbiniStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventPaymentPayPay) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventPaymentPayPay) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.OrderID.Set {
			e.FieldStart("order_id")
			s.OrderID.Encode(e)
		}
	}
	{
		if s.AccessID.Set {
			e.FieldStart("access_id")
			s.AccessID.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.JobCode.Set {
			e.FieldStart("job_code")
			s.JobCode.Encode(e)
		}
	}
	{
		if s.ClientField1 != nil {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2 != nil {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3 != nil {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Tax.Set {
			e.FieldStart("tax")
			s.Tax.Encode(e)
		}
	}
	{
		if s.CodeExpiryDate != nil {
			e.FieldStart("code_expiry_date")
			s.CodeExpiryDate.Encode(e)
		}
	}
	{
		if s.AuthMaxDate != nil {
			e.FieldStart("auth_max_date")
			s.AuthMaxDate.Encode(e)
		}
	}
	{
		if s.OrderDescription != nil {
			e.FieldStart("order_description")
			s.OrderDescription.Encode(e)
		}
	}
	{
		if s.CodeID != nil {
			e.FieldStart("code_id")
			s.CodeID.Encode(e)
		}
	}
	{
		if s.PaymentID != nil {
			e.FieldStart("payment_id")
			s.PaymentID.Encode(e)
		}
	}
	{
		if s.PaymentDate != nil {
			e.FieldStart("payment_date")
			s.PaymentDate.Encode(e)
		}
	}
	{
		if s.MerchantPaymentID != nil {
			e.FieldStart("merchant_payment_id")
			s.MerchantPaymentID.Encode(e)
		}
	}
	{
		if s.MerchantUpdateID != nil {
			e.FieldStart("merchant_update_id")
			s.MerchantUpdateID.Encode(e)
		}
	}
	{
		if s.MerchantRevertID != nil {
			e.FieldStart("merchant_revert_id")
			s.MerchantRevertID.Encode(e)
		}
	}
	{
		if s.MerchantRefundID != nil {
			e.FieldStart("merchant_refund_id")
			s.MerchantRefundID.Encode(e)
		}
	}
	{
		if s.ErrorCode.Set {
			e.FieldStart("error_code")
			s.ErrorCode.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventPaymentPayPay = [25]string{
	0:  "shop_id",
	1:  "order_id",
	2:  "access_id",
	3:  "pay_type",
	4:  "status",
	5:  "customer_id",
	6:  "process_date",
	7:  "job_code",
	8:  "client_field_1",
	9:  "client_field_2",
	10: "client_field_3",
	11: "amount",
	12: "tax",
	13: "code_expiry_date",
	14: "auth_max_date",
	15: "order_description",
	16: "code_id",
	17: "payment_id",
	18: "payment_date",
	19: "merchant_payment_id",
	20: "merchant_update_id",
	21: "merchant_revert_id",
	22: "merchant_refund_id",
	23: "error_code",
	24: "event",
}

// Decode decodes WebhookEventPaymentPayPay from json.
func (s *WebhookEventPaymentPayPay) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPay to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "order_id":
			if err := func() error {
				s.OrderID.Reset()
				if err := s.OrderID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_id\"")
			}
		case "access_id":
			if err := func() error {
				s.AccessID.Reset()
				if err := s.AccessID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"access_id\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "job_code":
			if err := func() error {
				s.JobCode.Reset()
				if err := s.JobCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"job_code\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField1 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField2 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3 = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.ClientField3 = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "tax":
			if err := func() error {
				s.Tax.Reset()
				if err := s.Tax.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tax\"")
			}
		case "code_expiry_date":
			if err := func() error {
				s.CodeExpiryDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CodeExpiryDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_expiry_date\"")
			}
		case "auth_max_date":
			if err := func() error {
				s.AuthMaxDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.AuthMaxDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auth_max_date\"")
			}
		case "order_description":
			if err := func() error {
				s.OrderDescription = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.OrderDescription = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order_description\"")
			}
		case "code_id":
			if err := func() error {
				s.CodeID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.CodeID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"code_id\"")
			}
		case "payment_id":
			if err := func() error {
				s.PaymentID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_id\"")
			}
		case "payment_date":
			if err := func() error {
				s.PaymentDate = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.PaymentDate = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_date\"")
			}
		case "merchant_payment_id":
			if err := func() error {
				s.MerchantPaymentID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.MerchantPaymentID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_payment_id\"")
			}
		case "merchant_update_id":
			if err := func() error {
				s.MerchantUpdateID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.MerchantUpdateID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_update_id\"")
			}
		case "merchant_revert_id":
			if err := func() error {
				s.MerchantRevertID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.MerchantRevertID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_revert_id\"")
			}
		case "merchant_refund_id":
			if err := func() error {
				s.MerchantRefundID = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.MerchantRefundID = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"merchant_refund_id\"")
			}
		case "error_code":
			if err := func() error {
				s.ErrorCode.Reset()
				if err := s.ErrorCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"error_code\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventPaymentPayPay")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventPaymentPayPay) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPay) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayEvent as json.
func (s WebhookEventPaymentPayPayEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentPayPayEvent from json.
func (s *WebhookEventPaymentPayPayEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPayEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentPayPayEvent(v) {
	case WebhookEventPaymentPayPayEventPaymentsCardRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsCardRegist
	case WebhookEventPaymentPayPayEventPaymentsCardExec:
		*s = WebhookEventPaymentPayPayEventPaymentsCardExec
	case WebhookEventPaymentPayPayEventPaymentsCardCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsCardCapture
	case WebhookEventPaymentPayPayEventPaymentsCardCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsCardCancel
	case WebhookEventPaymentPayPayEventPaymentsCardAuth:
		*s = WebhookEventPaymentPayPayEventPaymentsCardAuth
	case WebhookEventPaymentPayPayEventPaymentsCardChange:
		*s = WebhookEventPaymentPayPayEventPaymentsCardChange
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure2Authenticate
	case WebhookEventPaymentPayPayEventPaymentsCardSecure2Result:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure2Result
	case WebhookEventPaymentPayPayEventPaymentsCardSecure:
		*s = WebhookEventPaymentPayPayEventPaymentsCardSecure
	case WebhookEventPaymentPayPayEventPaymentsApplepayRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayRegist
	case WebhookEventPaymentPayPayEventPaymentsApplepayExec:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayExec
	case WebhookEventPaymentPayPayEventPaymentsApplepayCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayCapture
	case WebhookEventPaymentPayPayEventPaymentsApplepayCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsApplepayCancel
	case WebhookEventPaymentPayPayEventPaymentsKonbiniRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniRegist
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExec:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniExec
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniCancel
	case WebhookEventPaymentPayPayEventPaymentsKonbiniComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniComplete
	case WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniCompleteStub
	case WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventPaymentPayPayEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventPaymentPayPayEventPaymentsPaypayRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayRegist
	case WebhookEventPaymentPayPayEventPaymentsPaypayExec:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayExec
	case WebhookEventPaymentPayPayEventPaymentsPaypayCapture:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayCapture
	case WebhookEventPaymentPayPayEventPaymentsPaypayCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayCancel
	case WebhookEventPaymentPayPayEventPaymentsPaypayChange:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayChange
	case WebhookEventPaymentPayPayEventPaymentsPaypayComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsPaypayComplete
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitRegist
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitExec:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitExec
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitCancel
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitChange:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitChange
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitComplete
	case WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventPaymentPayPayEventPaymentsDirectdebitCompleteStub
	case WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventPaymentPayPayEventCustomersPaymentMethodsUpdated
	case WebhookEventPaymentPayPayEventCardRegist:
		*s = WebhookEventPaymentPayPayEventCardRegist
	case WebhookEventPaymentPayPayEventCardUpdate:
		*s = WebhookEventPaymentPayPayEventCardUpdate
	case WebhookEventPaymentPayPayEventSubscriptionCardRegist:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardRegist
	case WebhookEventPaymentPayPayEventSubscriptionCardDelete:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardDelete
	case WebhookEventPaymentPayPayEventSubscriptionCardUpdate:
		*s = WebhookEventPaymentPayPayEventSubscriptionCardUpdate
	case WebhookEventPaymentPayPayEventRecurringCardBatch:
		*s = WebhookEventPaymentPayPayEventRecurringCardBatch
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitRegist
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitDelete
	case WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventPaymentPayPayEventSubscriptionDirectdebitUpdate
	case WebhookEventPaymentPayPayEventRecurringDirectdebitBatch:
		*s = WebhookEventPaymentPayPayEventRecurringDirectdebitBatch
	case WebhookEventPaymentPayPayEventPaymentsBulkCardRegist:
		*s = WebhookEventPaymentPayPayEventPaymentsBulkCardRegist
	case WebhookEventPaymentPayPayEventPaymentsBulkCardBatch:
		*s = WebhookEventPaymentPayPayEventPaymentsBulkCardBatch
	case WebhookEventPaymentPayPayEventContractsStatusCodeUpdated:
		*s = WebhookEventPaymentPayPayEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventPaymentPayPayEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentPayPayEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPayEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayJobCode as json.
func (s WebhookEventPaymentPayPayJobCode) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentPayPayJobCode from json.
func (s *WebhookEventPaymentPayPayJobCode) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPayJobCode to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentPayPayJobCode(v) {
	case WebhookEventPaymentPayPayJobCodeAUTH:
		*s = WebhookEventPaymentPayPayJobCodeAUTH
	case WebhookEventPaymentPayPayJobCodeCAPTURE:
		*s = WebhookEventPaymentPayPayJobCodeCAPTURE
	default:
		*s = WebhookEventPaymentPayPayJobCode(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentPayPayJobCode) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPayJobCode) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayPayType as json.
func (s WebhookEventPaymentPayPayPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentPayPayPayType from json.
func (s *WebhookEventPaymentPayPayPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPayPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentPayPayPayType(v) {
	case WebhookEventPaymentPayPayPayTypeCard:
		*s = WebhookEventPaymentPayPayPayTypeCard
	case WebhookEventPaymentPayPayPayTypeKonbini:
		*s = WebhookEventPaymentPayPayPayTypeKonbini
	case WebhookEventPaymentPayPayPayTypePaypay:
		*s = WebhookEventPaymentPayPayPayTypePaypay
	case WebhookEventPaymentPayPayPayTypeApplepay:
		*s = WebhookEventPaymentPayPayPayTypeApplepay
	case WebhookEventPaymentPayPayPayTypeDirectdebit:
		*s = WebhookEventPaymentPayPayPayTypeDirectdebit
	case WebhookEventPaymentPayPayPayTypeVirtualaccount:
		*s = WebhookEventPaymentPayPayPayTypeVirtualaccount
	default:
		*s = WebhookEventPaymentPayPayPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentPayPayPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPayPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventPaymentPayPayStatus as json.
func (s WebhookEventPaymentPayPayStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventPaymentPayPayStatus from json.
func (s *WebhookEventPaymentPayPayStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventPaymentPayPayStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventPaymentPayPayStatus(v) {
	case WebhookEventPaymentPayPayStatusUNPROCESSED:
		*s = WebhookEventPaymentPayPayStatusUNPROCESSED
	case WebhookEventPaymentPayPayStatusCHECKED:
		*s = WebhookEventPaymentPayPayStatusCHECKED
	case WebhookEventPaymentPayPayStatusAUTHORIZED:
		*s = WebhookEventPaymentPayPayStatusAUTHORIZED
	case WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT:
		*s = WebhookEventPaymentPayPayStatusAWAITINGCUSTOMERPAYMENT
	case WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL:
		*s = WebhookEventPaymentPayPayStatusAWAITINGPAYMENTAPPROVAL
	case WebhookEventPaymentPayPayStatusCAPTURED:
		*s = WebhookEventPaymentPayPayStatusCAPTURED
	case WebhookEventPaymentPayPayStatusCANCELED:
		*s = WebhookEventPaymentPayPayStatusCANCELED
	case WebhookEventPaymentPayPayStatusEXPIRED:
		*s = WebhookEventPaymentPayPayStatusEXPIRED
	case WebhookEventPaymentPayPayStatusAUTHENTICATED:
		*s = WebhookEventPaymentPayPayStatusAUTHENTICATED
	case WebhookEventPaymentPayPayStatusFAILED:
		*s = WebhookEventPaymentPayPayStatusFAILED
	default:
		*s = WebhookEventPaymentPayPayStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventPaymentPayPayStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventPaymentPayPayStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventRecurringBatchCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventRecurringBatchCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Succeeded.Set {
			e.FieldStart("succeeded")
			s.Succeeded.Encode(e)
		}
	}
	{
		if s.Failed.Set {
			e.FieldStart("failed")
			s.Failed.Encode(e)
		}
	}
	{
		if s.Total.Set {
			e.FieldStart("total")
			s.Total.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ChargeDate.Set {
			e.FieldStart("charge_date")
			s.ChargeDate.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventRecurringBatchCard = [8]string{
	0: "shop_id",
	1: "succeeded",
	2: "failed",
	3: "total",
	4: "process_date",
	5: "charge_date",
	6: "pay_type",
	7: "event",
}

// Decode decodes WebhookEventRecurringBatchCard from json.
func (s *WebhookEventRecurringBatchCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "succeeded":
			if err := func() error {
				s.Succeeded.Reset()
				if err := s.Succeeded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded\"")
			}
		case "failed":
			if err := func() error {
				s.Failed.Reset()
				if err := s.Failed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed\"")
			}
		case "total":
			if err := func() error {
				s.Total.Reset()
				if err := s.Total.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "charge_date":
			if err := func() error {
				s.ChargeDate.Reset()
				if err := s.ChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge_date\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventRecurringBatchCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventRecurringBatchCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchCardEvent as json.
func (s WebhookEventRecurringBatchCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventRecurringBatchCardEvent from json.
func (s *WebhookEventRecurringBatchCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventRecurringBatchCardEvent(v) {
	case WebhookEventRecurringBatchCardEventPaymentsCardRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardRegist
	case WebhookEventRecurringBatchCardEventPaymentsCardExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardExec
	case WebhookEventRecurringBatchCardEventPaymentsCardCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardCapture
	case WebhookEventRecurringBatchCardEventPaymentsCardCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardCancel
	case WebhookEventRecurringBatchCardEventPaymentsCardAuth:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardAuth
	case WebhookEventRecurringBatchCardEventPaymentsCardChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardChange
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure2Authenticate
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure2Result
	case WebhookEventRecurringBatchCardEventPaymentsCardSecure:
		*s = WebhookEventRecurringBatchCardEventPaymentsCardSecure
	case WebhookEventRecurringBatchCardEventPaymentsApplepayRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayRegist
	case WebhookEventRecurringBatchCardEventPaymentsApplepayExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayExec
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayCapture
	case WebhookEventRecurringBatchCardEventPaymentsApplepayCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsApplepayCancel
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniRegist
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniExec
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniCancel
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniComplete
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniCompleteStub
	case WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventRecurringBatchCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventRecurringBatchCardEventPaymentsPaypayRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayRegist
	case WebhookEventRecurringBatchCardEventPaymentsPaypayExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayExec
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCapture:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayCapture
	case WebhookEventRecurringBatchCardEventPaymentsPaypayCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayCancel
	case WebhookEventRecurringBatchCardEventPaymentsPaypayChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayChange
	case WebhookEventRecurringBatchCardEventPaymentsPaypayComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsPaypayComplete
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitRegist
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitExec
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitCancel
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitChange
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitComplete
	case WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventRecurringBatchCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventRecurringBatchCardEventCustomersPaymentMethodsUpdated
	case WebhookEventRecurringBatchCardEventCardRegist:
		*s = WebhookEventRecurringBatchCardEventCardRegist
	case WebhookEventRecurringBatchCardEventCardUpdate:
		*s = WebhookEventRecurringBatchCardEventCardUpdate
	case WebhookEventRecurringBatchCardEventSubscriptionCardRegist:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardRegist
	case WebhookEventRecurringBatchCardEventSubscriptionCardDelete:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardDelete
	case WebhookEventRecurringBatchCardEventSubscriptionCardUpdate:
		*s = WebhookEventRecurringBatchCardEventSubscriptionCardUpdate
	case WebhookEventRecurringBatchCardEventRecurringCardBatch:
		*s = WebhookEventRecurringBatchCardEventRecurringCardBatch
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitRegist
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitDelete
	case WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventRecurringBatchCardEventSubscriptionDirectdebitUpdate
	case WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch:
		*s = WebhookEventRecurringBatchCardEventRecurringDirectdebitBatch
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist:
		*s = WebhookEventRecurringBatchCardEventPaymentsBulkCardRegist
	case WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch:
		*s = WebhookEventRecurringBatchCardEventPaymentsBulkCardBatch
	case WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated:
		*s = WebhookEventRecurringBatchCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventRecurringBatchCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventRecurringBatchCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchCardPayType as json.
func (s WebhookEventRecurringBatchCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventRecurringBatchCardPayType from json.
func (s *WebhookEventRecurringBatchCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventRecurringBatchCardPayType(v) {
	case WebhookEventRecurringBatchCardPayTypeCard:
		*s = WebhookEventRecurringBatchCardPayTypeCard
	case WebhookEventRecurringBatchCardPayTypeDirectdebit:
		*s = WebhookEventRecurringBatchCardPayTypeDirectdebit
	default:
		*s = WebhookEventRecurringBatchCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventRecurringBatchCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventRecurringBatchDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventRecurringBatchDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.Succeeded.Set {
			e.FieldStart("succeeded")
			s.Succeeded.Encode(e)
		}
	}
	{
		if s.Failed.Set {
			e.FieldStart("failed")
			s.Failed.Encode(e)
		}
	}
	{
		if s.Total.Set {
			e.FieldStart("total")
			s.Total.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.ChargeDate.Set {
			e.FieldStart("charge_date")
			s.ChargeDate.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventRecurringBatchDirectDebit = [8]string{
	0: "shop_id",
	1: "succeeded",
	2: "failed",
	3: "total",
	4: "process_date",
	5: "charge_date",
	6: "pay_type",
	7: "event",
}

// Decode decodes WebhookEventRecurringBatchDirectDebit from json.
func (s *WebhookEventRecurringBatchDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "succeeded":
			if err := func() error {
				s.Succeeded.Reset()
				if err := s.Succeeded.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"succeeded\"")
			}
		case "failed":
			if err := func() error {
				s.Failed.Reset()
				if err := s.Failed.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"failed\"")
			}
		case "total":
			if err := func() error {
				s.Total.Reset()
				if err := s.Total.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"total\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "charge_date":
			if err := func() error {
				s.ChargeDate.Reset()
				if err := s.ChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"charge_date\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventRecurringBatchDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventRecurringBatchDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchDirectDebitEvent as json.
func (s WebhookEventRecurringBatchDirectDebitEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventRecurringBatchDirectDebitEvent from json.
func (s *WebhookEventRecurringBatchDirectDebitEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchDirectDebitEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventRecurringBatchDirectDebitEvent(v) {
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardExec
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardCapture
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardCancel
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardAuth
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardChange
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Authenticate
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure2Result
	case WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsCardSecure
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayExec
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCapture
	case WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsApplepayCancel
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExec
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCancel
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniComplete
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniCompleteStub
	case WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayExec
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCapture
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayCancel
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayChange
	case WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsPaypayComplete
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitExec
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCancel
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitChange
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitComplete
	case WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsDirectdebitCompleteStub
	case WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventRecurringBatchDirectDebitEventCustomersPaymentMethodsUpdated
	case WebhookEventRecurringBatchDirectDebitEventCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventCardRegist
	case WebhookEventRecurringBatchDirectDebitEventCardUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventCardUpdate
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardRegist
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardDelete
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionCardUpdate
	case WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventRecurringCardBatch
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitRegist
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitDelete
	case WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventRecurringBatchDirectDebitEventSubscriptionDirectdebitUpdate
	case WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventRecurringDirectdebitBatch
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardRegist
	case WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventRecurringBatchDirectDebitEventPaymentsBulkCardBatch
	case WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventRecurringBatchDirectDebitEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventRecurringBatchDirectDebitEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventRecurringBatchDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventRecurringBatchDirectDebitPayType as json.
func (s WebhookEventRecurringBatchDirectDebitPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventRecurringBatchDirectDebitPayType from json.
func (s *WebhookEventRecurringBatchDirectDebitPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventRecurringBatchDirectDebitPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventRecurringBatchDirectDebitPayType(v) {
	case WebhookEventRecurringBatchDirectDebitPayTypeCard:
		*s = WebhookEventRecurringBatchDirectDebitPayTypeCard
	case WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit:
		*s = WebhookEventRecurringBatchDirectDebitPayTypeDirectdebit
	default:
		*s = WebhookEventRecurringBatchDirectDebitPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventRecurringBatchDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventRecurringBatchDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventSubscriptionCard) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventSubscriptionCard) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.CardID.Set {
			e.FieldStart("card_id")
			s.CardID.Encode(e)
		}
	}
	{
		if s.DefaultCardFlag.Set {
			e.FieldStart("default_card_flag")
			s.DefaultCardFlag.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.ProcessDate.Set {
			e.FieldStart("process_date")
			s.ProcessDate.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventSubscriptionCard = [17]string{
	0:  "shop_id",
	1:  "subscription_id",
	2:  "plan_id",
	3:  "customer_id",
	4:  "card_id",
	5:  "default_card_flag",
	6:  "status",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "process_date",
	11: "start_date",
	12: "stop_date",
	13: "next_charge_date",
	14: "end_month_flag",
	15: "pay_type",
	16: "event",
}

// Decode decodes WebhookEventSubscriptionCard from json.
func (s *WebhookEventSubscriptionCard) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCard to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "card_id":
			if err := func() error {
				s.CardID.Reset()
				if err := s.CardID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"card_id\"")
			}
		case "default_card_flag":
			if err := func() error {
				s.DefaultCardFlag.Reset()
				if err := s.DefaultCardFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_card_flag\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "process_date":
			if err := func() error {
				s.ProcessDate.Reset()
				if err := s.ProcessDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"process_date\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventSubscriptionCard")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventSubscriptionCard) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCard) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardDefaultCardFlag as json.
func (s WebhookEventSubscriptionCardDefaultCardFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionCardDefaultCardFlag from json.
func (s *WebhookEventSubscriptionCardDefaultCardFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCardDefaultCardFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionCardDefaultCardFlag(v) {
	case WebhookEventSubscriptionCardDefaultCardFlag0:
		*s = WebhookEventSubscriptionCardDefaultCardFlag0
	case WebhookEventSubscriptionCardDefaultCardFlag1:
		*s = WebhookEventSubscriptionCardDefaultCardFlag1
	default:
		*s = WebhookEventSubscriptionCardDefaultCardFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionCardDefaultCardFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCardDefaultCardFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardEndMonthFlag as json.
func (s WebhookEventSubscriptionCardEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionCardEndMonthFlag from json.
func (s *WebhookEventSubscriptionCardEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCardEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionCardEndMonthFlag(v) {
	case WebhookEventSubscriptionCardEndMonthFlag0:
		*s = WebhookEventSubscriptionCardEndMonthFlag0
	case WebhookEventSubscriptionCardEndMonthFlag1:
		*s = WebhookEventSubscriptionCardEndMonthFlag1
	default:
		*s = WebhookEventSubscriptionCardEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionCardEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCardEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardEvent as json.
func (s WebhookEventSubscriptionCardEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionCardEvent from json.
func (s *WebhookEventSubscriptionCardEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCardEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionCardEvent(v) {
	case WebhookEventSubscriptionCardEventPaymentsCardRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsCardRegist
	case WebhookEventSubscriptionCardEventPaymentsCardExec:
		*s = WebhookEventSubscriptionCardEventPaymentsCardExec
	case WebhookEventSubscriptionCardEventPaymentsCardCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsCardCapture
	case WebhookEventSubscriptionCardEventPaymentsCardCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsCardCancel
	case WebhookEventSubscriptionCardEventPaymentsCardAuth:
		*s = WebhookEventSubscriptionCardEventPaymentsCardAuth
	case WebhookEventSubscriptionCardEventPaymentsCardChange:
		*s = WebhookEventSubscriptionCardEventPaymentsCardChange
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure2Authenticate
	case WebhookEventSubscriptionCardEventPaymentsCardSecure2Result:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure2Result
	case WebhookEventSubscriptionCardEventPaymentsCardSecure:
		*s = WebhookEventSubscriptionCardEventPaymentsCardSecure
	case WebhookEventSubscriptionCardEventPaymentsApplepayRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayRegist
	case WebhookEventSubscriptionCardEventPaymentsApplepayExec:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayExec
	case WebhookEventSubscriptionCardEventPaymentsApplepayCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayCapture
	case WebhookEventSubscriptionCardEventPaymentsApplepayCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsApplepayCancel
	case WebhookEventSubscriptionCardEventPaymentsKonbiniRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniRegist
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExec:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniExec
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniCancel
	case WebhookEventSubscriptionCardEventPaymentsKonbiniComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniComplete
	case WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniCompleteStub
	case WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventSubscriptionCardEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventSubscriptionCardEventPaymentsPaypayRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayRegist
	case WebhookEventSubscriptionCardEventPaymentsPaypayExec:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayExec
	case WebhookEventSubscriptionCardEventPaymentsPaypayCapture:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayCapture
	case WebhookEventSubscriptionCardEventPaymentsPaypayCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayCancel
	case WebhookEventSubscriptionCardEventPaymentsPaypayChange:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayChange
	case WebhookEventSubscriptionCardEventPaymentsPaypayComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsPaypayComplete
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitRegist
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitExec:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitExec
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitCancel
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitChange:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitChange
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitComplete
	case WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventSubscriptionCardEventPaymentsDirectdebitCompleteStub
	case WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventSubscriptionCardEventCustomersPaymentMethodsUpdated
	case WebhookEventSubscriptionCardEventCardRegist:
		*s = WebhookEventSubscriptionCardEventCardRegist
	case WebhookEventSubscriptionCardEventCardUpdate:
		*s = WebhookEventSubscriptionCardEventCardUpdate
	case WebhookEventSubscriptionCardEventSubscriptionCardRegist:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardRegist
	case WebhookEventSubscriptionCardEventSubscriptionCardDelete:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardDelete
	case WebhookEventSubscriptionCardEventSubscriptionCardUpdate:
		*s = WebhookEventSubscriptionCardEventSubscriptionCardUpdate
	case WebhookEventSubscriptionCardEventRecurringCardBatch:
		*s = WebhookEventSubscriptionCardEventRecurringCardBatch
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitRegist
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitDelete
	case WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventSubscriptionCardEventSubscriptionDirectdebitUpdate
	case WebhookEventSubscriptionCardEventRecurringDirectdebitBatch:
		*s = WebhookEventSubscriptionCardEventRecurringDirectdebitBatch
	case WebhookEventSubscriptionCardEventPaymentsBulkCardRegist:
		*s = WebhookEventSubscriptionCardEventPaymentsBulkCardRegist
	case WebhookEventSubscriptionCardEventPaymentsBulkCardBatch:
		*s = WebhookEventSubscriptionCardEventPaymentsBulkCardBatch
	case WebhookEventSubscriptionCardEventContractsStatusCodeUpdated:
		*s = WebhookEventSubscriptionCardEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventSubscriptionCardEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionCardEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCardEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardPayType as json.
func (s WebhookEventSubscriptionCardPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionCardPayType from json.
func (s *WebhookEventSubscriptionCardPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCardPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionCardPayType(v) {
	case WebhookEventSubscriptionCardPayTypeCard:
		*s = WebhookEventSubscriptionCardPayTypeCard
	case WebhookEventSubscriptionCardPayTypeDirectdebit:
		*s = WebhookEventSubscriptionCardPayTypeDirectdebit
	default:
		*s = WebhookEventSubscriptionCardPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionCardPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCardPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionCardStatus as json.
func (s WebhookEventSubscriptionCardStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionCardStatus from json.
func (s *WebhookEventSubscriptionCardStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionCardStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionCardStatus(v) {
	case WebhookEventSubscriptionCardStatusACTIVE:
		*s = WebhookEventSubscriptionCardStatusACTIVE
	case WebhookEventSubscriptionCardStatusRUNNING:
		*s = WebhookEventSubscriptionCardStatusRUNNING
	case WebhookEventSubscriptionCardStatusCANCELED:
		*s = WebhookEventSubscriptionCardStatusCANCELED
	case WebhookEventSubscriptionCardStatusINCOMPLETE:
		*s = WebhookEventSubscriptionCardStatusINCOMPLETE
	default:
		*s = WebhookEventSubscriptionCardStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionCardStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionCardStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookEventSubscriptionDirectDebit) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookEventSubscriptionDirectDebit) encodeFields(e *jx.Encoder) {
	{
		if s.ShopID.Set {
			e.FieldStart("shop_id")
			s.ShopID.Encode(e)
		}
	}
	{
		if s.SubscriptionID.Set {
			e.FieldStart("subscription_id")
			s.SubscriptionID.Encode(e)
		}
	}
	{
		if s.PlanID.Set {
			e.FieldStart("plan_id")
			s.PlanID.Encode(e)
		}
	}
	{
		if s.CustomerID.Set {
			e.FieldStart("customer_id")
			s.CustomerID.Encode(e)
		}
	}
	{
		if s.PaymentMethodID.Set {
			e.FieldStart("payment_method_id")
			s.PaymentMethodID.Encode(e)
		}
	}
	{
		if s.DefaultFlag.Set {
			e.FieldStart("default_flag")
			s.DefaultFlag.Encode(e)
		}
	}
	{
		if s.Status.Set {
			e.FieldStart("status")
			s.Status.Encode(e)
		}
	}
	{
		if s.ClientField1.Set {
			e.FieldStart("client_field_1")
			s.ClientField1.Encode(e)
		}
	}
	{
		if s.ClientField2.Set {
			e.FieldStart("client_field_2")
			s.ClientField2.Encode(e)
		}
	}
	{
		if s.ClientField3.Set {
			e.FieldStart("client_field_3")
			s.ClientField3.Encode(e)
		}
	}
	{
		if s.Remarks.Set {
			e.FieldStart("remarks")
			s.Remarks.Encode(e)
		}
	}
	{
		if s.StartDate.Set {
			e.FieldStart("start_date")
			s.StartDate.Encode(e)
		}
	}
	{
		if s.StopDate.Set {
			e.FieldStart("stop_date")
			s.StopDate.Encode(e)
		}
	}
	{
		if s.NextChargeDate.Set {
			e.FieldStart("next_charge_date")
			s.NextChargeDate.Encode(e)
		}
	}
	{
		if s.EndMonthFlag.Set {
			e.FieldStart("end_month_flag")
			s.EndMonthFlag.Encode(e)
		}
	}
	{
		if s.PayType.Set {
			e.FieldStart("pay_type")
			s.PayType.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookEventSubscriptionDirectDebit = [17]string{
	0:  "shop_id",
	1:  "subscription_id",
	2:  "plan_id",
	3:  "customer_id",
	4:  "payment_method_id",
	5:  "default_flag",
	6:  "status",
	7:  "client_field_1",
	8:  "client_field_2",
	9:  "client_field_3",
	10: "remarks",
	11: "start_date",
	12: "stop_date",
	13: "next_charge_date",
	14: "end_month_flag",
	15: "pay_type",
	16: "event",
}

// Decode decodes WebhookEventSubscriptionDirectDebit from json.
func (s *WebhookEventSubscriptionDirectDebit) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebit to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "shop_id":
			if err := func() error {
				s.ShopID.Reset()
				if err := s.ShopID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shop_id\"")
			}
		case "subscription_id":
			if err := func() error {
				s.SubscriptionID.Reset()
				if err := s.SubscriptionID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subscription_id\"")
			}
		case "plan_id":
			if err := func() error {
				s.PlanID.Reset()
				if err := s.PlanID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"plan_id\"")
			}
		case "customer_id":
			if err := func() error {
				s.CustomerID.Reset()
				if err := s.CustomerID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"customer_id\"")
			}
		case "payment_method_id":
			if err := func() error {
				s.PaymentMethodID.Reset()
				if err := s.PaymentMethodID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"payment_method_id\"")
			}
		case "default_flag":
			if err := func() error {
				s.DefaultFlag.Reset()
				if err := s.DefaultFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"default_flag\"")
			}
		case "status":
			if err := func() error {
				s.Status.Reset()
				if err := s.Status.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"status\"")
			}
		case "client_field_1":
			if err := func() error {
				s.ClientField1.Reset()
				if err := s.ClientField1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_1\"")
			}
		case "client_field_2":
			if err := func() error {
				s.ClientField2.Reset()
				if err := s.ClientField2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_2\"")
			}
		case "client_field_3":
			if err := func() error {
				s.ClientField3.Reset()
				if err := s.ClientField3.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"client_field_3\"")
			}
		case "remarks":
			if err := func() error {
				s.Remarks.Reset()
				if err := s.Remarks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"remarks\"")
			}
		case "start_date":
			if err := func() error {
				s.StartDate.Reset()
				if err := s.StartDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start_date\"")
			}
		case "stop_date":
			if err := func() error {
				s.StopDate.Reset()
				if err := s.StopDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"stop_date\"")
			}
		case "next_charge_date":
			if err := func() error {
				s.NextChargeDate.Reset()
				if err := s.NextChargeDate.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"next_charge_date\"")
			}
		case "end_month_flag":
			if err := func() error {
				s.EndMonthFlag.Reset()
				if err := s.EndMonthFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end_month_flag\"")
			}
		case "pay_type":
			if err := func() error {
				s.PayType.Reset()
				if err := s.PayType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pay_type\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookEventSubscriptionDirectDebit")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookEventSubscriptionDirectDebit) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebit) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitDefaultFlag as json.
func (s WebhookEventSubscriptionDirectDebitDefaultFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionDirectDebitDefaultFlag from json.
func (s *WebhookEventSubscriptionDirectDebitDefaultFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebitDefaultFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionDirectDebitDefaultFlag(v) {
	case WebhookEventSubscriptionDirectDebitDefaultFlag0:
		*s = WebhookEventSubscriptionDirectDebitDefaultFlag0
	case WebhookEventSubscriptionDirectDebitDefaultFlag1:
		*s = WebhookEventSubscriptionDirectDebitDefaultFlag1
	default:
		*s = WebhookEventSubscriptionDirectDebitDefaultFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionDirectDebitDefaultFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebitDefaultFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitEndMonthFlag as json.
func (s WebhookEventSubscriptionDirectDebitEndMonthFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionDirectDebitEndMonthFlag from json.
func (s *WebhookEventSubscriptionDirectDebitEndMonthFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebitEndMonthFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionDirectDebitEndMonthFlag(v) {
	case WebhookEventSubscriptionDirectDebitEndMonthFlag0:
		*s = WebhookEventSubscriptionDirectDebitEndMonthFlag0
	case WebhookEventSubscriptionDirectDebitEndMonthFlag1:
		*s = WebhookEventSubscriptionDirectDebitEndMonthFlag1
	default:
		*s = WebhookEventSubscriptionDirectDebitEndMonthFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionDirectDebitEndMonthFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebitEndMonthFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitEvent as json.
func (s WebhookEventSubscriptionDirectDebitEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionDirectDebitEvent from json.
func (s *WebhookEventSubscriptionDirectDebitEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebitEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionDirectDebitEvent(v) {
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardExec
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardCapture
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardCancel
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardAuth
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardChange
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Authenticate
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure2Result
	case WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsCardSecure
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayExec
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCapture
	case WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsApplepayCancel
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExec
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCancel
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniComplete
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniCompleteStub
	case WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayExec
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCapture
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayCancel
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayChange
	case WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsPaypayComplete
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitExec
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCancel
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitChange
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitComplete
	case WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsDirectdebitCompleteStub
	case WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated:
		*s = WebhookEventSubscriptionDirectDebitEventCustomersPaymentMethodsUpdated
	case WebhookEventSubscriptionDirectDebitEventCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventCardRegist
	case WebhookEventSubscriptionDirectDebitEventCardUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventCardUpdate
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardRegist
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardDelete
	case WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionCardUpdate
	case WebhookEventSubscriptionDirectDebitEventRecurringCardBatch:
		*s = WebhookEventSubscriptionDirectDebitEventRecurringCardBatch
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitRegist
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitDelete
	case WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate:
		*s = WebhookEventSubscriptionDirectDebitEventSubscriptionDirectdebitUpdate
	case WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch:
		*s = WebhookEventSubscriptionDirectDebitEventRecurringDirectdebitBatch
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardRegist
	case WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch:
		*s = WebhookEventSubscriptionDirectDebitEventPaymentsBulkCardBatch
	case WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated:
		*s = WebhookEventSubscriptionDirectDebitEventContractsStatusCodeUpdated
	default:
		*s = WebhookEventSubscriptionDirectDebitEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionDirectDebitEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebitEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitPayType as json.
func (s WebhookEventSubscriptionDirectDebitPayType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionDirectDebitPayType from json.
func (s *WebhookEventSubscriptionDirectDebitPayType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebitPayType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionDirectDebitPayType(v) {
	case WebhookEventSubscriptionDirectDebitPayTypeCard:
		*s = WebhookEventSubscriptionDirectDebitPayTypeCard
	case WebhookEventSubscriptionDirectDebitPayTypeDirectdebit:
		*s = WebhookEventSubscriptionDirectDebitPayTypeDirectdebit
	default:
		*s = WebhookEventSubscriptionDirectDebitPayType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionDirectDebitPayType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebitPayType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookEventSubscriptionDirectDebitStatus as json.
func (s WebhookEventSubscriptionDirectDebitStatus) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookEventSubscriptionDirectDebitStatus from json.
func (s *WebhookEventSubscriptionDirectDebitStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookEventSubscriptionDirectDebitStatus to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookEventSubscriptionDirectDebitStatus(v) {
	case WebhookEventSubscriptionDirectDebitStatusACTIVE:
		*s = WebhookEventSubscriptionDirectDebitStatusACTIVE
	case WebhookEventSubscriptionDirectDebitStatusRUNNING:
		*s = WebhookEventSubscriptionDirectDebitStatusRUNNING
	case WebhookEventSubscriptionDirectDebitStatusCANCELED:
		*s = WebhookEventSubscriptionDirectDebitStatusCANCELED
	case WebhookEventSubscriptionDirectDebitStatusINCOMPLETE:
		*s = WebhookEventSubscriptionDirectDebitStatusINCOMPLETE
	default:
		*s = WebhookEventSubscriptionDirectDebitStatus(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookEventSubscriptionDirectDebitStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookEventSubscriptionDirectDebitStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Receive.Set {
			e.FieldStart("receive")
			s.Receive.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookResponse = [1]string{
	0: "receive",
}

// Decode decodes WebhookResponse from json.
func (s *WebhookResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "receive":
			if err := func() error {
				s.Receive.Reset()
				if err := s.Receive.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receive\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookResponseReceive as json.
func (s WebhookResponseReceive) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookResponseReceive from json.
func (s *WebhookResponseReceive) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookResponseReceive to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookResponseReceive(v) {
	case WebhookResponseReceive0:
		*s = WebhookResponseReceive0
	case WebhookResponseReceive1:
		*s = WebhookResponseReceive1
	default:
		*s = WebhookResponseReceive(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookResponseReceive) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookResponseReceive) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSetting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSetting) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSetting = [6]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
	4: "created",
	5: "updated",
}

// Decode decodes WebhookSetting from json.
func (s *WebhookSetting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSetting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSetting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingCreatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingCreatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		e.FieldStart("event")
		s.Event.Encode(e)
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingCreatingRequest = [4]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
}

// Decode decodes WebhookSettingCreatingRequest from json.
func (s *WebhookSettingCreatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingCreatingRequest to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			requiredBitSet[0] |= 1 << 2
			if err := func() error {
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingCreatingRequest")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000100,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(jsonFieldsNameOfWebhookSettingCreatingRequest) {
					name = jsonFieldsNameOfWebhookSettingCreatingRequest[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingCreatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingCreatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingCreatingRequestEvent as json.
func (s WebhookSettingCreatingRequestEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingCreatingRequestEvent from json.
func (s *WebhookSettingCreatingRequestEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingCreatingRequestEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingCreatingRequestEvent(v) {
	case WebhookSettingCreatingRequestEventPaymentsCardRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsCardRegist
	case WebhookSettingCreatingRequestEventPaymentsCardExec:
		*s = WebhookSettingCreatingRequestEventPaymentsCardExec
	case WebhookSettingCreatingRequestEventPaymentsCardCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsCardCapture
	case WebhookSettingCreatingRequestEventPaymentsCardCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsCardCancel
	case WebhookSettingCreatingRequestEventPaymentsCardAuth:
		*s = WebhookSettingCreatingRequestEventPaymentsCardAuth
	case WebhookSettingCreatingRequestEventPaymentsCardChange:
		*s = WebhookSettingCreatingRequestEventPaymentsCardChange
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure2Authenticate
	case WebhookSettingCreatingRequestEventPaymentsCardSecure2Result:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure2Result
	case WebhookSettingCreatingRequestEventPaymentsCardSecure:
		*s = WebhookSettingCreatingRequestEventPaymentsCardSecure
	case WebhookSettingCreatingRequestEventPaymentsApplepayRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayRegist
	case WebhookSettingCreatingRequestEventPaymentsApplepayExec:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayExec
	case WebhookSettingCreatingRequestEventPaymentsApplepayCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayCapture
	case WebhookSettingCreatingRequestEventPaymentsApplepayCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsApplepayCancel
	case WebhookSettingCreatingRequestEventPaymentsKonbiniRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniRegist
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExec:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniExec
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniCancel
	case WebhookSettingCreatingRequestEventPaymentsKonbiniComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniComplete
	case WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniCompleteStub
	case WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingCreatingRequestEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingCreatingRequestEventPaymentsPaypayRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayRegist
	case WebhookSettingCreatingRequestEventPaymentsPaypayExec:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayExec
	case WebhookSettingCreatingRequestEventPaymentsPaypayCapture:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayCapture
	case WebhookSettingCreatingRequestEventPaymentsPaypayCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayCancel
	case WebhookSettingCreatingRequestEventPaymentsPaypayChange:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayChange
	case WebhookSettingCreatingRequestEventPaymentsPaypayComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsPaypayComplete
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitRegist
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitExec:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitExec
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitCancel
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitChange:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitChange
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitComplete
	case WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingCreatingRequestEventPaymentsDirectdebitCompleteStub
	case WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingCreatingRequestEventCustomersPaymentMethodsUpdated
	case WebhookSettingCreatingRequestEventCardRegist:
		*s = WebhookSettingCreatingRequestEventCardRegist
	case WebhookSettingCreatingRequestEventCardUpdate:
		*s = WebhookSettingCreatingRequestEventCardUpdate
	case WebhookSettingCreatingRequestEventSubscriptionCardRegist:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardRegist
	case WebhookSettingCreatingRequestEventSubscriptionCardDelete:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardDelete
	case WebhookSettingCreatingRequestEventSubscriptionCardUpdate:
		*s = WebhookSettingCreatingRequestEventSubscriptionCardUpdate
	case WebhookSettingCreatingRequestEventRecurringCardBatch:
		*s = WebhookSettingCreatingRequestEventRecurringCardBatch
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitRegist
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitDelete
	case WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingCreatingRequestEventSubscriptionDirectdebitUpdate
	case WebhookSettingCreatingRequestEventRecurringDirectdebitBatch:
		*s = WebhookSettingCreatingRequestEventRecurringDirectdebitBatch
	case WebhookSettingCreatingRequestEventPaymentsBulkCardRegist:
		*s = WebhookSettingCreatingRequestEventPaymentsBulkCardRegist
	case WebhookSettingCreatingRequestEventPaymentsBulkCardBatch:
		*s = WebhookSettingCreatingRequestEventPaymentsBulkCardBatch
	case WebhookSettingCreatingRequestEventContractsStatusCodeUpdated:
		*s = WebhookSettingCreatingRequestEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingCreatingRequestEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingCreatingRequestEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingCreatingRequestEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingCreatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingCreatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingCreatingResponse = [6]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
	4: "created",
	5: "updated",
}

// Decode decodes WebhookSettingCreatingResponse from json.
func (s *WebhookSettingCreatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingCreatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingCreatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingCreatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingCreatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingCreatingResponseEvent as json.
func (s WebhookSettingCreatingResponseEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingCreatingResponseEvent from json.
func (s *WebhookSettingCreatingResponseEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingCreatingResponseEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingCreatingResponseEvent(v) {
	case WebhookSettingCreatingResponseEventPaymentsCardRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsCardRegist
	case WebhookSettingCreatingResponseEventPaymentsCardExec:
		*s = WebhookSettingCreatingResponseEventPaymentsCardExec
	case WebhookSettingCreatingResponseEventPaymentsCardCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsCardCapture
	case WebhookSettingCreatingResponseEventPaymentsCardCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsCardCancel
	case WebhookSettingCreatingResponseEventPaymentsCardAuth:
		*s = WebhookSettingCreatingResponseEventPaymentsCardAuth
	case WebhookSettingCreatingResponseEventPaymentsCardChange:
		*s = WebhookSettingCreatingResponseEventPaymentsCardChange
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure2Authenticate
	case WebhookSettingCreatingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure2Result
	case WebhookSettingCreatingResponseEventPaymentsCardSecure:
		*s = WebhookSettingCreatingResponseEventPaymentsCardSecure
	case WebhookSettingCreatingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayRegist
	case WebhookSettingCreatingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayExec
	case WebhookSettingCreatingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayCapture
	case WebhookSettingCreatingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsApplepayCancel
	case WebhookSettingCreatingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniRegist
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniExec
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniCancel
	case WebhookSettingCreatingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniComplete
	case WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniCompleteStub
	case WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingCreatingResponseEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingCreatingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayRegist
	case WebhookSettingCreatingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayExec
	case WebhookSettingCreatingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayCapture
	case WebhookSettingCreatingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayCancel
	case WebhookSettingCreatingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayChange
	case WebhookSettingCreatingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsPaypayComplete
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitRegist
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitExec
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitCancel
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitChange
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitComplete
	case WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingCreatingResponseEventPaymentsDirectdebitCompleteStub
	case WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingCreatingResponseEventCustomersPaymentMethodsUpdated
	case WebhookSettingCreatingResponseEventCardRegist:
		*s = WebhookSettingCreatingResponseEventCardRegist
	case WebhookSettingCreatingResponseEventCardUpdate:
		*s = WebhookSettingCreatingResponseEventCardUpdate
	case WebhookSettingCreatingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardRegist
	case WebhookSettingCreatingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardDelete
	case WebhookSettingCreatingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingCreatingResponseEventSubscriptionCardUpdate
	case WebhookSettingCreatingResponseEventRecurringCardBatch:
		*s = WebhookSettingCreatingResponseEventRecurringCardBatch
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitRegist
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitDelete
	case WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingCreatingResponseEventSubscriptionDirectdebitUpdate
	case WebhookSettingCreatingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingCreatingResponseEventRecurringDirectdebitBatch
	case WebhookSettingCreatingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingCreatingResponseEventPaymentsBulkCardRegist
	case WebhookSettingCreatingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingCreatingResponseEventPaymentsBulkCardBatch
	case WebhookSettingCreatingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingCreatingResponseEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingCreatingResponseEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingCreatingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingCreatingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingDeletingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingDeletingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.DeleteFlag.Set {
			e.FieldStart("delete_flag")
			s.DeleteFlag.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingDeletingResponse = [2]string{
	0: "id",
	1: "delete_flag",
}

// Decode decodes WebhookSettingDeletingResponse from json.
func (s *WebhookSettingDeletingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingDeletingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "delete_flag":
			if err := func() error {
				s.DeleteFlag.Reset()
				if err := s.DeleteFlag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"delete_flag\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingDeletingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingDeletingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingDeletingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingDeletingResponseDeleteFlag as json.
func (s WebhookSettingDeletingResponseDeleteFlag) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingDeletingResponseDeleteFlag from json.
func (s *WebhookSettingDeletingResponseDeleteFlag) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingDeletingResponseDeleteFlag to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingDeletingResponseDeleteFlag(v) {
	case WebhookSettingDeletingResponseDeleteFlag1:
		*s = WebhookSettingDeletingResponseDeleteFlag1
	case WebhookSettingDeletingResponseDeleteFlag0:
		*s = WebhookSettingDeletingResponseDeleteFlag0
	default:
		*s = WebhookSettingDeletingResponseDeleteFlag(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingDeletingResponseDeleteFlag) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingDeletingResponseDeleteFlag) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingEvent as json.
func (s WebhookSettingEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingEvent from json.
func (s *WebhookSettingEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingEvent(v) {
	case WebhookSettingEventPaymentsCardRegist:
		*s = WebhookSettingEventPaymentsCardRegist
	case WebhookSettingEventPaymentsCardExec:
		*s = WebhookSettingEventPaymentsCardExec
	case WebhookSettingEventPaymentsCardCapture:
		*s = WebhookSettingEventPaymentsCardCapture
	case WebhookSettingEventPaymentsCardCancel:
		*s = WebhookSettingEventPaymentsCardCancel
	case WebhookSettingEventPaymentsCardAuth:
		*s = WebhookSettingEventPaymentsCardAuth
	case WebhookSettingEventPaymentsCardChange:
		*s = WebhookSettingEventPaymentsCardChange
	case WebhookSettingEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingEventPaymentsCardSecure2Authenticate
	case WebhookSettingEventPaymentsCardSecure2Result:
		*s = WebhookSettingEventPaymentsCardSecure2Result
	case WebhookSettingEventPaymentsCardSecure:
		*s = WebhookSettingEventPaymentsCardSecure
	case WebhookSettingEventPaymentsApplepayRegist:
		*s = WebhookSettingEventPaymentsApplepayRegist
	case WebhookSettingEventPaymentsApplepayExec:
		*s = WebhookSettingEventPaymentsApplepayExec
	case WebhookSettingEventPaymentsApplepayCapture:
		*s = WebhookSettingEventPaymentsApplepayCapture
	case WebhookSettingEventPaymentsApplepayCancel:
		*s = WebhookSettingEventPaymentsApplepayCancel
	case WebhookSettingEventPaymentsKonbiniRegist:
		*s = WebhookSettingEventPaymentsKonbiniRegist
	case WebhookSettingEventPaymentsKonbiniExec:
		*s = WebhookSettingEventPaymentsKonbiniExec
	case WebhookSettingEventPaymentsKonbiniCancel:
		*s = WebhookSettingEventPaymentsKonbiniCancel
	case WebhookSettingEventPaymentsKonbiniComplete:
		*s = WebhookSettingEventPaymentsKonbiniComplete
	case WebhookSettingEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingEventPaymentsKonbiniCompleteStub
	case WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingEventPaymentsPaypayRegist:
		*s = WebhookSettingEventPaymentsPaypayRegist
	case WebhookSettingEventPaymentsPaypayExec:
		*s = WebhookSettingEventPaymentsPaypayExec
	case WebhookSettingEventPaymentsPaypayCapture:
		*s = WebhookSettingEventPaymentsPaypayCapture
	case WebhookSettingEventPaymentsPaypayCancel:
		*s = WebhookSettingEventPaymentsPaypayCancel
	case WebhookSettingEventPaymentsPaypayChange:
		*s = WebhookSettingEventPaymentsPaypayChange
	case WebhookSettingEventPaymentsPaypayComplete:
		*s = WebhookSettingEventPaymentsPaypayComplete
	case WebhookSettingEventPaymentsDirectdebitRegist:
		*s = WebhookSettingEventPaymentsDirectdebitRegist
	case WebhookSettingEventPaymentsDirectdebitExec:
		*s = WebhookSettingEventPaymentsDirectdebitExec
	case WebhookSettingEventPaymentsDirectdebitCancel:
		*s = WebhookSettingEventPaymentsDirectdebitCancel
	case WebhookSettingEventPaymentsDirectdebitChange:
		*s = WebhookSettingEventPaymentsDirectdebitChange
	case WebhookSettingEventPaymentsDirectdebitComplete:
		*s = WebhookSettingEventPaymentsDirectdebitComplete
	case WebhookSettingEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingEventPaymentsDirectdebitCompleteStub
	case WebhookSettingEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingEventCustomersPaymentMethodsUpdated
	case WebhookSettingEventCardRegist:
		*s = WebhookSettingEventCardRegist
	case WebhookSettingEventCardUpdate:
		*s = WebhookSettingEventCardUpdate
	case WebhookSettingEventSubscriptionCardRegist:
		*s = WebhookSettingEventSubscriptionCardRegist
	case WebhookSettingEventSubscriptionCardDelete:
		*s = WebhookSettingEventSubscriptionCardDelete
	case WebhookSettingEventSubscriptionCardUpdate:
		*s = WebhookSettingEventSubscriptionCardUpdate
	case WebhookSettingEventRecurringCardBatch:
		*s = WebhookSettingEventRecurringCardBatch
	case WebhookSettingEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingEventSubscriptionDirectdebitRegist
	case WebhookSettingEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingEventSubscriptionDirectdebitDelete
	case WebhookSettingEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingEventSubscriptionDirectdebitUpdate
	case WebhookSettingEventRecurringDirectdebitBatch:
		*s = WebhookSettingEventRecurringDirectdebitBatch
	case WebhookSettingEventPaymentsBulkCardRegist:
		*s = WebhookSettingEventPaymentsBulkCardRegist
	case WebhookSettingEventPaymentsBulkCardBatch:
		*s = WebhookSettingEventPaymentsBulkCardBatch
	case WebhookSettingEventContractsStatusCodeUpdated:
		*s = WebhookSettingEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingListRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingListRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.List != nil {
			e.FieldStart("list")
			e.ArrStart()
			for _, elem := range s.List {
				elem.Encode(e)
			}
			e.ArrEnd()
		}
	}
}

var jsonFieldsNameOfWebhookSettingListRetrievingResponse = [1]string{
	0: "list",
}

// Decode decodes WebhookSettingListRetrievingResponse from json.
func (s *WebhookSettingListRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingListRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "list":
			if err := func() error {
				s.List = make([]WebhookSetting, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem WebhookSetting
					if err := elem.Decode(d); err != nil {
						return err
					}
					s.List = append(s.List, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"list\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingListRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingListRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingListRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingRetrievingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingRetrievingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingRetrievingResponse = [6]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
	4: "created",
	5: "updated",
}

// Decode decodes WebhookSettingRetrievingResponse from json.
func (s *WebhookSettingRetrievingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingRetrievingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingRetrievingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingRetrievingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingRetrievingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingRetrievingResponseEvent as json.
func (s WebhookSettingRetrievingResponseEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingRetrievingResponseEvent from json.
func (s *WebhookSettingRetrievingResponseEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingRetrievingResponseEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingRetrievingResponseEvent(v) {
	case WebhookSettingRetrievingResponseEventPaymentsCardRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardRegist
	case WebhookSettingRetrievingResponseEventPaymentsCardExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardExec
	case WebhookSettingRetrievingResponseEventPaymentsCardCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardCapture
	case WebhookSettingRetrievingResponseEventPaymentsCardCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardCancel
	case WebhookSettingRetrievingResponseEventPaymentsCardAuth:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardAuth
	case WebhookSettingRetrievingResponseEventPaymentsCardChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardChange
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure2Authenticate
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure2Result
	case WebhookSettingRetrievingResponseEventPaymentsCardSecure:
		*s = WebhookSettingRetrievingResponseEventPaymentsCardSecure
	case WebhookSettingRetrievingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayRegist
	case WebhookSettingRetrievingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayExec
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayCapture
	case WebhookSettingRetrievingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsApplepayCancel
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniRegist
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniExec
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniCancel
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniComplete
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniCompleteStub
	case WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingRetrievingResponseEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingRetrievingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayRegist
	case WebhookSettingRetrievingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayExec
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayCapture
	case WebhookSettingRetrievingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayCancel
	case WebhookSettingRetrievingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayChange
	case WebhookSettingRetrievingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsPaypayComplete
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitRegist
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitExec
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitCancel
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitChange
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitComplete
	case WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingRetrievingResponseEventPaymentsDirectdebitCompleteStub
	case WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingRetrievingResponseEventCustomersPaymentMethodsUpdated
	case WebhookSettingRetrievingResponseEventCardRegist:
		*s = WebhookSettingRetrievingResponseEventCardRegist
	case WebhookSettingRetrievingResponseEventCardUpdate:
		*s = WebhookSettingRetrievingResponseEventCardUpdate
	case WebhookSettingRetrievingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardRegist
	case WebhookSettingRetrievingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardDelete
	case WebhookSettingRetrievingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingRetrievingResponseEventSubscriptionCardUpdate
	case WebhookSettingRetrievingResponseEventRecurringCardBatch:
		*s = WebhookSettingRetrievingResponseEventRecurringCardBatch
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitRegist
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitDelete
	case WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingRetrievingResponseEventSubscriptionDirectdebitUpdate
	case WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingRetrievingResponseEventRecurringDirectdebitBatch
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingRetrievingResponseEventPaymentsBulkCardRegist
	case WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingRetrievingResponseEventPaymentsBulkCardBatch
	case WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingRetrievingResponseEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingRetrievingResponseEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingRetrievingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingRetrievingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingUpdatingRequest) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingUpdatingRequest) encodeFields(e *jx.Encoder) {
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingUpdatingRequest = [3]string{
	0: "url",
	1: "event",
	2: "signature",
}

// Decode decodes WebhookSettingUpdatingRequest from json.
func (s *WebhookSettingUpdatingRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingUpdatingRequest to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingUpdatingRequest")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingUpdatingRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingUpdatingRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingUpdatingRequestEvent as json.
func (s WebhookSettingUpdatingRequestEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingUpdatingRequestEvent from json.
func (s *WebhookSettingUpdatingRequestEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingUpdatingRequestEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingUpdatingRequestEvent(v) {
	case WebhookSettingUpdatingRequestEventPaymentsCardRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardRegist
	case WebhookSettingUpdatingRequestEventPaymentsCardExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardExec
	case WebhookSettingUpdatingRequestEventPaymentsCardCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardCapture
	case WebhookSettingUpdatingRequestEventPaymentsCardCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardCancel
	case WebhookSettingUpdatingRequestEventPaymentsCardAuth:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardAuth
	case WebhookSettingUpdatingRequestEventPaymentsCardChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardChange
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure2Authenticate
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure2Result
	case WebhookSettingUpdatingRequestEventPaymentsCardSecure:
		*s = WebhookSettingUpdatingRequestEventPaymentsCardSecure
	case WebhookSettingUpdatingRequestEventPaymentsApplepayRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayRegist
	case WebhookSettingUpdatingRequestEventPaymentsApplepayExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayExec
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayCapture
	case WebhookSettingUpdatingRequestEventPaymentsApplepayCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsApplepayCancel
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniRegist
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniExec
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniCancel
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniComplete
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniCompleteStub
	case WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingUpdatingRequestEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingUpdatingRequestEventPaymentsPaypayRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayRegist
	case WebhookSettingUpdatingRequestEventPaymentsPaypayExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayExec
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCapture:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayCapture
	case WebhookSettingUpdatingRequestEventPaymentsPaypayCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayCancel
	case WebhookSettingUpdatingRequestEventPaymentsPaypayChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayChange
	case WebhookSettingUpdatingRequestEventPaymentsPaypayComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsPaypayComplete
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitRegist
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitExec
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitCancel
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitChange
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitComplete
	case WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingUpdatingRequestEventPaymentsDirectdebitCompleteStub
	case WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingUpdatingRequestEventCustomersPaymentMethodsUpdated
	case WebhookSettingUpdatingRequestEventCardRegist:
		*s = WebhookSettingUpdatingRequestEventCardRegist
	case WebhookSettingUpdatingRequestEventCardUpdate:
		*s = WebhookSettingUpdatingRequestEventCardUpdate
	case WebhookSettingUpdatingRequestEventSubscriptionCardRegist:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardRegist
	case WebhookSettingUpdatingRequestEventSubscriptionCardDelete:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardDelete
	case WebhookSettingUpdatingRequestEventSubscriptionCardUpdate:
		*s = WebhookSettingUpdatingRequestEventSubscriptionCardUpdate
	case WebhookSettingUpdatingRequestEventRecurringCardBatch:
		*s = WebhookSettingUpdatingRequestEventRecurringCardBatch
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitRegist
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitDelete
	case WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingUpdatingRequestEventSubscriptionDirectdebitUpdate
	case WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch:
		*s = WebhookSettingUpdatingRequestEventRecurringDirectdebitBatch
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist:
		*s = WebhookSettingUpdatingRequestEventPaymentsBulkCardRegist
	case WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch:
		*s = WebhookSettingUpdatingRequestEventPaymentsBulkCardBatch
	case WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated:
		*s = WebhookSettingUpdatingRequestEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingUpdatingRequestEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingUpdatingRequestEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingUpdatingRequestEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *WebhookSettingUpdatingResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *WebhookSettingUpdatingResponse) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.URL.Set {
			e.FieldStart("url")
			s.URL.Encode(e)
		}
	}
	{
		if s.Event.Set {
			e.FieldStart("event")
			s.Event.Encode(e)
		}
	}
	{
		if s.Signature.Set {
			e.FieldStart("signature")
			s.Signature.Encode(e)
		}
	}
	{
		if s.Created.Set {
			e.FieldStart("created")
			s.Created.Encode(e)
		}
	}
	{
		if s.Updated != nil {
			e.FieldStart("updated")
			s.Updated.Encode(e)
		}
	}
}

var jsonFieldsNameOfWebhookSettingUpdatingResponse = [6]string{
	0: "id",
	1: "url",
	2: "event",
	3: "signature",
	4: "created",
	5: "updated",
}

// Decode decodes WebhookSettingUpdatingResponse from json.
func (s *WebhookSettingUpdatingResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingUpdatingResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"url\"")
			}
		case "event":
			if err := func() error {
				s.Event.Reset()
				if err := s.Event.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"event\"")
			}
		case "signature":
			if err := func() error {
				s.Signature.Reset()
				if err := s.Signature.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"signature\"")
			}
		case "created":
			if err := func() error {
				s.Created.Reset()
				if err := s.Created.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"created\"")
			}
		case "updated":
			if err := func() error {
				s.Updated = nil
				var elem NilString
				if err := elem.Decode(d); err != nil {
					return err
				}
				s.Updated = &elem
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updated\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode WebhookSettingUpdatingResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *WebhookSettingUpdatingResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingUpdatingResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes WebhookSettingUpdatingResponseEvent as json.
func (s WebhookSettingUpdatingResponseEvent) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes WebhookSettingUpdatingResponseEvent from json.
func (s *WebhookSettingUpdatingResponseEvent) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode WebhookSettingUpdatingResponseEvent to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch WebhookSettingUpdatingResponseEvent(v) {
	case WebhookSettingUpdatingResponseEventPaymentsCardRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardRegist
	case WebhookSettingUpdatingResponseEventPaymentsCardExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardExec
	case WebhookSettingUpdatingResponseEventPaymentsCardCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardCapture
	case WebhookSettingUpdatingResponseEventPaymentsCardCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardCancel
	case WebhookSettingUpdatingResponseEventPaymentsCardAuth:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardAuth
	case WebhookSettingUpdatingResponseEventPaymentsCardChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardChange
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure2Authenticate
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure2Result
	case WebhookSettingUpdatingResponseEventPaymentsCardSecure:
		*s = WebhookSettingUpdatingResponseEventPaymentsCardSecure
	case WebhookSettingUpdatingResponseEventPaymentsApplepayRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayRegist
	case WebhookSettingUpdatingResponseEventPaymentsApplepayExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayExec
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayCapture
	case WebhookSettingUpdatingResponseEventPaymentsApplepayCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsApplepayCancel
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniRegist
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniExec
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniCancel
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniComplete
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniCompleteStub
	case WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch:
		*s = WebhookSettingUpdatingResponseEventPaymentsKonbiniExpiredUpdateBatch
	case WebhookSettingUpdatingResponseEventPaymentsPaypayRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayRegist
	case WebhookSettingUpdatingResponseEventPaymentsPaypayExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayExec
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCapture:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayCapture
	case WebhookSettingUpdatingResponseEventPaymentsPaypayCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayCancel
	case WebhookSettingUpdatingResponseEventPaymentsPaypayChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayChange
	case WebhookSettingUpdatingResponseEventPaymentsPaypayComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsPaypayComplete
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitRegist
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitExec
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitCancel
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitChange
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitComplete
	case WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub:
		*s = WebhookSettingUpdatingResponseEventPaymentsDirectdebitCompleteStub
	case WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated:
		*s = WebhookSettingUpdatingResponseEventCustomersPaymentMethodsUpdated
	case WebhookSettingUpdatingResponseEventCardRegist:
		*s = WebhookSettingUpdatingResponseEventCardRegist
	case WebhookSettingUpdatingResponseEventCardUpdate:
		*s = WebhookSettingUpdatingResponseEventCardUpdate
	case WebhookSettingUpdatingResponseEventSubscriptionCardRegist:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardRegist
	case WebhookSettingUpdatingResponseEventSubscriptionCardDelete:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardDelete
	case WebhookSettingUpdatingResponseEventSubscriptionCardUpdate:
		*s = WebhookSettingUpdatingResponseEventSubscriptionCardUpdate
	case WebhookSettingUpdatingResponseEventRecurringCardBatch:
		*s = WebhookSettingUpdatingResponseEventRecurringCardBatch
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitRegist
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitDelete
	case WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate:
		*s = WebhookSettingUpdatingResponseEventSubscriptionDirectdebitUpdate
	case WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch:
		*s = WebhookSettingUpdatingResponseEventRecurringDirectdebitBatch
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist:
		*s = WebhookSettingUpdatingResponseEventPaymentsBulkCardRegist
	case WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch:
		*s = WebhookSettingUpdatingResponseEventPaymentsBulkCardBatch
	case WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated:
		*s = WebhookSettingUpdatingResponseEventContractsStatusCodeUpdated
	default:
		*s = WebhookSettingUpdatingResponseEvent(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s WebhookSettingUpdatingResponseEvent) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *WebhookSettingUpdatingResponseEvent) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
