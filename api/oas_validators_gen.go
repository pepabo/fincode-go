// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *AccountDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.TradeType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "trade_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FeeRateTotal.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fee_rate_total",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApplyType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apply_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformFeeRate.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_fee_rate",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ApplyTypeForPlatformFee.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apply_type_for_platform_fee",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountDetailApplyType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AccountDetailApplyTypeForPlatformFee) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountDetailListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountDetailTradeType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 4:
		return nil
	case 5:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountListItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    32,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1000000,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountListItemStatusCode) Validate() error {
	switch s {
	case 3001:
		return nil
	case 3002:
		return nil
	case 3003:
		return nil
	case 3004:
		return nil
	case 3005:
		return nil
	case 3006:
		return nil
	case 3007:
		return nil
	case 3008:
		return nil
	case 3009:
		return nil
	case 3010:
		return nil
	case 3011:
		return nil
	case 3012:
		return nil
	case 3013:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountPaymentMethod) Validate() error {
	switch s {
	case "VM":
		return nil
	case "JA":
		return nil
	case "KONBINI":
		return nil
	case "PayPay":
		return nil
	case "ApplepayVM":
		return nil
	case "ApplepayJA":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AccountRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    32,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1000000,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositDestination.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_destination",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AccountRetrievingResponseDepositDestination) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecipientCorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecipientRepresntativeLastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_represntative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecipientRepresntativeFirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_represntative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    96,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AccountRetrievingResponseDepositDestinationAccountKind) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AuthorizePaymentOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AuthorizePaymentOKBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKJobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKPayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKTds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentOKTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *AuthorizePaymentReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Method.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s AuthorizePaymentReqMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentReqPayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s AuthorizePaymentReqPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK) Validate() error {
	switch s.Type {
	case CapturePaymentOK0CapturePaymentOK:
		if err := s.CapturePaymentOK0.Validate(); err != nil {
			return err
		}
		return nil
	case CapturePaymentOK1CapturePaymentOK:
		if err := s.CapturePaymentOK1.Validate(); err != nil {
			return err
		}
		return nil
	case CapturePaymentOK2CapturePaymentOK:
		if err := s.CapturePaymentOK2.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CapturePaymentOK0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentOK0Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CapturePaymentOK1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentOK1Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK1Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK1PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK1Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CapturePaymentOK2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CaptureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpdateDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StoreID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "store_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayResultCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCaptureID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_capture_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantUpdateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRevertID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRefundID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentOK2JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK2RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentOK2Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentReq) Validate() error {
	switch s.Type {
	case CapturePaymentReq0CapturePaymentReq:
		if err := s.CapturePaymentReq0.Validate(); err != nil {
			return err
		}
		return nil
	case CapturePaymentReq1CapturePaymentReq:
		if err := s.CapturePaymentReq1.Validate(); err != nil {
			return err
		}
		return nil
	case CapturePaymentReq2CapturePaymentReq:
		if err := s.CapturePaymentReq2.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CapturePaymentReq0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentReq0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentReq0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CapturePaymentReq0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CapturePaymentReq1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentReq1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CapturePaymentReq2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.CaptureDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CaptureDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CapturePaymentReq2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Card) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expire == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Expire.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if s.HolderName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.HolderName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CardBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardPaymentSessionJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CardRegistrationSessionCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.SuccessURL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SuccessURL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    256,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "success_url",
			Error: err,
		})
	}
	if err := func() error {
		if s.CancelURL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CancelURL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    256,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_url",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopServiceName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopServiceName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_service_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.ReceiverMail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ReceiverMail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "receiver_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.MailCustomerName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.MailCustomerName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    384,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mail_customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GuideMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guide_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompletionMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "completion_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopMailTemplateID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopMailTemplateID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    25,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_template_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.CustomerName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CustomerName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    384,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.TdsType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TdsType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccChange == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccChange.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_change",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccDate == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccDate.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccPwChange == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccPwChange.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_pw_change",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2NbPurchaseAccount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2NbPurchaseAccount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_nb_purchase_account",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PaymentAccAge == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PaymentAccAge.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_payment_acc_age",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ProvisionAttemptsDay == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ProvisionAttemptsDay.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_provision_attempts_day",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddressUsage == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddressUsage.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_address_usage",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipNameInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipNameInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_name_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2SuspiciousAccActivity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2SuspiciousAccActivity.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_suspicious_acc_activity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2TxnActivityDay == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2TxnActivityDay.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_day",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2TxnActivityYear == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2TxnActivityYear.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_year",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ThreeDsReqAuthData == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ThreeDsReqAuthData.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    2048,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_data",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ThreeDsReqAuthMethod == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ThreeDsReqAuthMethod.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_method",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2AddrMatch == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2AddrMatch.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_addr_match",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrCountry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrCountry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrState == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrState.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrCity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrCity.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrLine1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrLine1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrLine2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrLine2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrPostCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrPostCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    16,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrCountry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrCountry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrState == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrState.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrCity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrCity.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrPostCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrPostCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    16,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2DeliveryEmailAddress == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2DeliveryEmailAddress.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_email_address",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2HomePhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2HomePhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2HomePhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2HomePhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2MobilePhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2MobilePhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2MobilePhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2MobilePhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2WorkPhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2WorkPhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2WorkPhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2WorkPhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2DeliveryTimeframe == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2DeliveryTimeframe.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_timeframe",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PreOrderDate == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PreOrderDate.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PreOrderPurchaseInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PreOrderPurchaseInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_purchase_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ReorderItemsInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ReorderItemsInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_reorder_items_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2RecurringExpiry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2RecurringExpiry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_expiry",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2RecurringFrequency == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2RecurringFrequency.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_frequency",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardAmount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardAmount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_amount",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardCount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardCount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    2,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardCurr == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardCurr.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_curr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CardRegistrationSessionCreatingRequestCompletionMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestGuideMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2AddrMatch) Validate() error {
	switch s {
	case "Y":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2DeliveryTimeframe) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2PreOrderPurchaseInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2ReorderItemsInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2ShipInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2ShipNameInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2SuspiciousAccActivity) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2ThreeDsReqAuthMethod) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingRequestTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CardRegistrationSessionCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LinkURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "link_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SuccessURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "success_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServiceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_service_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GuideMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guide_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReceiverMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "receiver_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MailCustomerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mail_customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompletionMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "completion_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailTemplateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_template_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CardRegistrationSessionCreatingResponseCompletionMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingResponseGuideMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardRegistrationSessionCreatingResponseStatus) Validate() error {
	switch s {
	case "CREATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CardType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK) Validate() error {
	switch s.Type {
	case ChangeAmountOfPaymentOK0ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK0.Validate(); err != nil {
			return err
		}
		return nil
	case ChangeAmountOfPaymentOK1ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK1.Validate(); err != nil {
			return err
		}
		return nil
	case ChangeAmountOfPaymentOK2ChangeAmountOfPaymentOK:
		if err := s.ChangeAmountOfPaymentOK2.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *ChangeAmountOfPaymentOK0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentOK0Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ChangeAmountOfPaymentOK1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CaptureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpdateDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StoreID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "store_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayResultCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCaptureID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_capture_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantUpdateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRevertID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRefundID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentOK1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK1RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK1Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ChangeAmountOfPaymentOK2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentOK2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK2ResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentOK2Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentReq) Validate() error {
	switch s.Type {
	case ChangeAmountOfPaymentReq0ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq0.Validate(); err != nil {
			return err
		}
		return nil
	case ChangeAmountOfPaymentReq1ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq1.Validate(); err != nil {
			return err
		}
		return nil
	case ChangeAmountOfPaymentReq2ChangeAmountOfPaymentReq:
		if err := s.ChangeAmountOfPaymentReq2.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *ChangeAmountOfPaymentReq0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JobCode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentReq0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ChangeAmountOfPaymentReq0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ChangeAmountOfPaymentReq1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if s.UpdateDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UpdateDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentReq1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ChangeAmountOfPaymentReq2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ChangeAmountOfPaymentReq2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContentInfoV2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Content1Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_unit_price",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ContractsRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Examination {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AvailableStatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "available_status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SalesDepositStatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sales_deposit_status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StopCancelaltionMemo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "stop_cancelaltion_memo",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ObligationsNotice.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "obligations_notice",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user_shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RegisterMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "register_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.SharedCustomerFlag == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SharedCustomerFlag.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractDetail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_detail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractBankAccount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_bank_account",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractVirtualBank.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_virtual_bank",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ContractCardDestination {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_card_destination",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseAvailableStatusCode) Validate() error {
	switch s {
	case 201:
		return nil
	case 202:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContractsRetrievingResponseContractBankAccount) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    47,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseContractBankAccountAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContractsRetrievingResponseContractCardDestinationItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ContractCardInfoMasterID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           9999999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_card_info_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ExaminationMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Destination.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "destination",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DestinationType.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           3,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "destination_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseContractCardDestinationItemExaminationMasterID) Validate() error {
	switch s {
	case "vm":
		return nil
	case "jad":
		return nil
	case "applepay_vm":
		return nil
	case "applepay_jad":
		return nil
	case "konbini":
		return nil
	case "paypay":
		return nil
	case "directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContractsRetrievingResponseContractDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CorporateNumber == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CorporateNumber.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Hp == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Hp.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if s.Capital == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Capital.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           1,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if s.EstablishedAt == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.EstablishedAt.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    10,
						MinLengthSet: true,
						MaxLength:    10,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if s.YearlySales == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.YearlySales.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessDetails == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.BusinessDetails.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeBirthday == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeBirthday.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    0,
						MaxLengthSet: false,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeGender == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeGender.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{3}-\\d{4}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteExisting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_existing",
			Error: err,
		})
	}
	if err := func() error {
		if s.URL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.URL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if s.SiteCredential == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SiteCredential.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_credential",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameEn.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportMail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportMail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.UnitPrice == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UnitPrice.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentCategoryMasterID.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           9.999999999e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_category_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContentDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ContentDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpiretionDateOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ExpiretionDateOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiretion_date_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if s.UsageOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UsageOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "usage_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseContractDetailPayBy) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseContractDetailRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseContractDetailSiteExisting) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContractsRetrievingResponseContractVirtualBank) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    47,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseContractVirtualBankAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ContractsRetrievingResponseExaminationItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExaminationMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MemberCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "member_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ContractsRetrievingResponseExaminationItemExaminationMasterID) Validate() error {
	switch s {
	case "vm":
		return nil
	case "jad":
		return nil
	case "applepay_vm":
		return nil
	case "applepay_jad":
		return nil
	case "konbini":
		return nil
	case "paypay":
		return nil
	case "directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseExaminationItemStatusCode) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseSalesDepositStatusCode) Validate() error {
	switch s {
	case 501:
		return nil
	case 502:
		return nil
	case 503:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ContractsRetrievingResponseStatusCode) Validate() error {
	switch s {
	case "101":
		return nil
	case "102":
		return nil
	case "103":
		return nil
	case "105":
		return nil
	case "106":
		return nil
	case "107":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentBulkPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK) Validate() error {
	switch s.Type {
	case CreatePaymentOK0CreatePaymentOK:
		if err := s.CreatePaymentOK0.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentOK1CreatePaymentOK:
		if err := s.CreatePaymentOK1.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentOK2CreatePaymentOK:
		if err := s.CreatePaymentOK2.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentOK3CreatePaymentOK:
		if err := s.CreatePaymentOK3.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentOK4CreatePaymentOK:
		if err := s.CreatePaymentOK4.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CreatePaymentOK0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentOK0Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentOK1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentOK1Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK1Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK1PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK1Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentOK2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeFormat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_format",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelOverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeviceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderSerial.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_serial",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InvoiceID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invoice_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentOK2BarcodeFormat) Validate() error {
	switch s {
	case "jpg":
		return nil
	case "png":
		return nil
	case "bmp":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2CancelOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2KonbiniCode) Validate() error {
	switch s {
	case "00010":
		return nil
	case "00020":
		return nil
	case "00030":
		return nil
	case "00080":
		return nil
	case "00760":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2OverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2Result) Validate() error {
	switch s {
	case "000":
		return nil
	case "001":
		return nil
	case "002":
		return nil
	case "003":
		return nil
	case "004":
		return nil
	case "005":
		return nil
	case "006":
		return nil
	case "007":
		return nil
	case "008":
		return nil
	case "009":
		return nil
	case "010":
		return nil
	case "011":
		return nil
	case "012":
		return nil
	case "013":
		return nil
	case "900":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK2Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentOK3) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CaptureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpdateDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StoreID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "store_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayResultCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCaptureID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_capture_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantUpdateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRevertID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRefundID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentOK3JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK3PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK3RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK3Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentOK4) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentOK4PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK4ResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentOK4Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq) Validate() error {
	switch s.Type {
	case CreatePaymentReq0CreatePaymentReq:
		if err := s.CreatePaymentReq0.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentReq1CreatePaymentReq:
		if err := s.CreatePaymentReq1.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentReq2CreatePaymentReq:
		if err := s.CreatePaymentReq2.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentReq3CreatePaymentReq:
		if err := s.CreatePaymentReq3.Validate(); err != nil {
			return err
		}
		return nil
	case CreatePaymentReq4CreatePaymentReq:
		if err := s.CreatePaymentReq4.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CreatePaymentReq0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JobCode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentReq0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentReq1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JobCode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentReq1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentReq2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentReq2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentReq3) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JobCode.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentReq3JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreatePaymentReq3PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreatePaymentReq4) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    9,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreatePaymentReq4PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Customer) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_registration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DirectdebitRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit_registration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerCardCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    512,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Token)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "token",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.DefaultFlag.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardCreatingRequestDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expire == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Expire.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if s.HolderName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.HolderName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardCreatingResponseBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardCreatingResponseDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardCreatingResponseType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expire == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Expire.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if s.HolderName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.HolderName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardRetrievingResponseBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardRetrievingResponseDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardRetrievingResponseType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Token == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Token.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    512,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "token",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.HolderName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.HolderName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expire == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Expire.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardUpdatingRequestDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCardUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Expire == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Expire.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if s.HolderName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.HolderName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCardUpdatingResponseBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardUpdatingResponseDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCardUpdatingResponseType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    384,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    254,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_registration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DirectdebitRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit_registration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerCreatingResponseCardRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerCreatingResponseDirectdebitRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerDirectdebitRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerPaymentMethodCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.DefaultFlag.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURLOnFailure.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url_on_failure",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Directdebit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerPaymentMethodCreatingRequestCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    512,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Token)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "token",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccChange.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_change",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccDate.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccPwChange.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_pw_change",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2NbPurchaseAccount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_nb_purchase_account",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PaymentAccAge.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_payment_acc_age",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ProvisionAttemptsDay.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_provision_attempts_day",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddressUsage.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_address_usage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipNameInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_name_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2SuspiciousAccActivity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_suspicious_acc_activity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TxnActivityDay.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_day",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TxnActivityYear.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_year",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ThreeDsReqAuthData.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    2048,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_data",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ThreeDsReqAuthMethod.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2AddrMatch.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_addr_match",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2DeliveryEmailAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    254,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_email_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2HomePhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2HomePhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2MobilePhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2MobilePhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2WorkPhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2WorkPhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2DeliveryTimeframe.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_timeframe",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PreOrderDate.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PreOrderPurchaseInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_purchase_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ReorderItemsInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_reorder_items_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RecurringExpiry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_expiry",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RecurringFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardAmount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardCount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    2,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardCurr.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_curr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingRequestCardTds2AddrMatch) Validate() error {
	switch s {
	case "Y":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2DeliveryTimeframe) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2PreOrderPurchaseInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2ReorderItemsInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2ShipInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2ShipNameInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2SuspiciousAccActivity) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2ThreeDsReqAuthMethod) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestCardTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodCreatingRequestDirectdebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApplicationType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    7,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    45,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperApplication.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_application",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingRequestDirectdebitAccountType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingRequestDirectdebitApplicationType) Validate() error {
	switch s {
	case "PAPER":
		return nil
	case "ONLINE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodCreatingRequestDirectdebitPaperApplication) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PostalAccountNumber1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RequestFormID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "request_form_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingRequestPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURLAccessedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url_accessed_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURLOnFailure.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url_on_failure",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Directdebit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerPaymentMethodCreatingResponseCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{2}\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Brand == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Brand.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if s.TdsType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TdsType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Acs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "acs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingResponseCardBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseCardTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseCardTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseCardType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodCreatingResponseDirectdebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApplicationType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LastResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "last_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperApplication.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_application",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingResponseDirectdebitAccountType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseDirectdebitBankType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodCreatingResponseDirectdebitPaperApplication) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RequestFormID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "request_form_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperFailureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_failure_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodCreatingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodCreatingResponseRedirectURLAccessedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerPaymentMethodRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURLAccessedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url_accessed_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURLOnFailure.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url_on_failure",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Directdebit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerPaymentMethodRetrievingResponseCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{2}\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Brand == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Brand.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if s.TdsType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TdsType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Acs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "acs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodRetrievingResponseCardBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseCardTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseCardTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseCardType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodRetrievingResponseDirectdebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApplicationType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LastResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "last_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperApplication.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_application",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodRetrievingResponseDirectdebitAccountType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseDirectdebitBankType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerPaymentMethodRetrievingResponseDirectdebitPaperApplication) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RequestFormID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "request_form_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperFailureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_failure_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerPaymentMethodRetrievingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerPaymentMethodRetrievingResponseRedirectURLAccessedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_registration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DirectdebitRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit_registration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerRetrievingResponseCardRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerRetrievingResponseDirectdebitRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CustomerUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    384,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    254,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CustomerUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneCc.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PhoneNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCountry.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrState.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrCity.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AddrPostCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_registration",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DirectdebitRegistration.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit_registration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CustomerUpdatingResponseCardRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CustomerUpdatingResponseDirectdebitRegistration) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DepositStatusCode) Validate() error {
	switch s {
	case 3001:
		return nil
	case 3002:
		return nil
	case 3003:
		return nil
	case 3004:
		return nil
	case 3005:
		return nil
	case 3006:
		return nil
	case 3007:
		return nil
	case 3008:
		return nil
	case 3009:
		return nil
	case 3010:
		return nil
	case 3011:
		return nil
	case 3012:
		return nil
	case 3013:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DirectDebitApplicationType) Validate() error {
	switch s {
	case "PAPER":
		return nil
	case "ONLINE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DirectDebitLastResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationFileUploadingRequestMultipart) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationFileUploadingRequestMultipartType) Validate() error {
	switch s {
	case "DRIVER_LICENSE_FRONT":
		return nil
	case "DRIVER_LICENSE_BACK":
		return nil
	case "SEAL_REGISTRATION_FRONT":
		return nil
	case "RESIDENT_CARD_FRONT":
		return nil
	case "RESIDENT_CARD_BACK":
		return nil
	case "SPECIAL_PERMANENT_RESIDENT_FRONT":
		return nil
	case "SPECIAL_PERMANENT_RESIDENT_BACK":
		return nil
	case "CERTIFICATE_OF_RESIDENCE_FRONT":
		return nil
	case "MY_NUMBER_CARD_FRONT":
		return nil
	case "PRODUCT_IMAGE_1":
		return nil
	case "PRODUCT_IMAGE_2":
		return nil
	case "PRODUCT_IMAGE_3":
		return nil
	case "APP_IMAGE_TOP":
		return nil
	case "APP_IMAGE_ICON":
		return nil
	case "SALES_LICENSE_1":
		return nil
	case "SALES_LICENSE_2":
		return nil
	case "SALES_LICENSE_3":
		return nil
	case "COPY_OF_CORPORATE_REGISTRATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationFileUploadingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ExaminationFiles {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination_files",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationFileUploadingResponseExaminationFilesItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Filesize.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "filesize",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationFileUploadingResponseExaminationFilesItemType) Validate() error {
	switch s {
	case "DRIVER_LICENSE_FRONT":
		return nil
	case "DRIVER_LICENSE_BACK":
		return nil
	case "SEAL_REGISTRATION_FRONT":
		return nil
	case "RESIDENT_CARD_FRONT":
		return nil
	case "RESIDENT_CARD_BACK":
		return nil
	case "SPECIAL_PERMANENT_RESIDENT_FRONT":
		return nil
	case "SPECIAL_PERMANENT_RESIDENT_BACK":
		return nil
	case "CERTIFICATE_OF_RESIDENCE_FRONT":
		return nil
	case "MY_NUMBER_CARD_FRONT":
		return nil
	case "PRODUCT_IMAGE_1":
		return nil
	case "PRODUCT_IMAGE_2":
		return nil
	case "PRODUCT_IMAGE_3":
		return nil
	case "APP_IMAGE_TOP":
		return nil
	case "APP_IMAGE_ICON":
		return nil
	case "SALES_LICENSE_1":
		return nil
	case "SALES_LICENSE_2":
		return nil
	case "SALES_LICENSE_3":
		return nil
	case "COPY_OF_CORPORATE_REGISTRATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositCycleMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractDetail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_detail",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShopItemDetail {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_item_detail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractBankAccount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_bank_account",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractInputStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_input_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoRetrievingResponseContractBankAccount) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    47,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoRetrievingResponseContractBankAccountAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoRetrievingResponseContractDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CorporateNumber == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CorporateNumber.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Hp == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Hp.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if s.Capital == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Capital.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           1,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if s.EstablishedAt == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.EstablishedAt.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    10,
						MinLengthSet: true,
						MaxLength:    10,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if s.YearlySales == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.YearlySales.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessDetails == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.BusinessDetails.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeBirthday == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeBirthday.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    0,
						MaxLengthSet: false,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeGender == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeGender.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{3}-\\d{4}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteExisting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_existing",
			Error: err,
		})
	}
	if err := func() error {
		if s.URL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.URL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if s.SiteCredential == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SiteCredential.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_credential",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameEn.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportMail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportMail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.UnitPrice == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UnitPrice.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentCategoryMasterID.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           9.999999999e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_category_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContentDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ContentDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpiretionDateOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ExpiretionDateOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiretion_date_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if s.UsageOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UsageOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "usage_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoRetrievingResponseContractDetailPayBy) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoRetrievingResponseContractDetailRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoRetrievingResponseContractDetailSiteExisting) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoRetrievingResponseContractInputStatus) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoRetrievingResponseContractInputStatusStatusCode) Validate() error {
	switch s {
	case 301:
		return nil
	case 302:
		return nil
	case 303:
		return nil
	case 304:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoRetrievingResponseDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoRetrievingResponseShopItemDetailItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Content1Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    19,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoRetrievingResponseShopItemDetailItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoRetrievingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoRetrievingResponseStatusCode) Validate() error {
	switch s {
	case "101":
		return nil
	case "102":
		return nil
	case "103":
		return nil
	case "105":
		return nil
	case "106":
		return nil
	case "107":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.DepositCycleMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractDetail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_detail",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShopItemDetail {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_item_detail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractBankAccount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_bank_account",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoUpdatingRequestContractBankAccount) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    47,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingRequestContractBankAccountAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingRequestContractDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CorporateNumber == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CorporateNumber.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Hp == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Hp.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if s.Capital == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Capital.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           1,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if s.EstablishedAt == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.EstablishedAt.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    10,
						MinLengthSet: true,
						MaxLength:    10,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if s.YearlySales == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.YearlySales.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessDetails == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.BusinessDetails.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeBirthday == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeBirthday.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    0,
						MaxLengthSet: false,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeGender == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeGender.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{3}-\\d{4}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteExisting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_existing",
			Error: err,
		})
	}
	if err := func() error {
		if s.URL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.URL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if s.SiteCredential == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SiteCredential.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_credential",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameEn.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportMail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportMail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.UnitPrice == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UnitPrice.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentCategoryMasterID.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           9.999999999e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_category_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContentDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ContentDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpiretionDateOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ExpiretionDateOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiretion_date_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if s.UsageOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UsageOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "usage_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingRequestContractDetailPayBy) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingRequestContractDetailRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingRequestContractDetailSiteExisting) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingRequestDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingRequestShopItemDetailItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Content1Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    19,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingRequestShopItemDetailItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositCycleMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractDetail.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_detail",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ShopItemDetail {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_item_detail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractBankAccount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_bank_account",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractInputStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_input_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoUpdatingResponseContractBankAccount) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    47,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingResponseContractBankAccountAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingResponseContractDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.CorporateNumber == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CorporateNumber.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Hp == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Hp.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if s.Capital == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Capital.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           1,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if s.EstablishedAt == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.EstablishedAt.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    10,
						MinLengthSet: true,
						MaxLength:    10,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if s.YearlySales == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.YearlySales.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if s.BusinessDetails == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.BusinessDetails.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyPrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyPrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyAddressBuildingNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.CompanyTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CompanyTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeLastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeLastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeFirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeBirthday == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeBirthday.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    0,
						MaxLengthSet: false,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeGender == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeGender.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePostalCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePostalCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{3}-\\d{4}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefecture == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefecture.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativePrefectureKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativePrefectureKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    6,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipality == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressMunicipalityKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSection == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSection.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressSectionKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChrome == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChrome.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeAddressChromeKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.RepresentativeTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RepresentativeTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff1Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff1Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2LastNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2LastNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2FirstNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2FirstNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Tel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Tel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    11,
						MinLengthSet: true,
						MaxLength:    12,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{11,12}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.Staff2Mail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Staff2Mail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteExisting.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_existing",
			Error: err,
		})
	}
	if err := func() error {
		if s.URL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.URL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if s.SiteCredential == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SiteCredential.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_credential",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameEn.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportTel == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportTel.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if s.SupportMail == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SupportMail.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if s.UnitPrice == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UnitPrice.Get(); ok {
				if err := func() error {
					if err := (validate.Float{
						MinSet:        true,
						Min:           0,
						MaxSet:        true,
						Max:           2.147483647e+09,
						MinExclusive:  false,
						MaxExclusive:  false,
						MultipleOfSet: false,
						MultipleOf:    nil,
					}).Validate(float64(value)); err != nil {
						return errors.Wrap(err, "float")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentCategoryMasterID.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           9.999999999e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_category_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ContentDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ContentDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    5000,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpiretionDateOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ExpiretionDateOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expiretion_date_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if s.UsageOfPoint == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.UsageOfPoint.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    300,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "usage_of_point",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayBy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_by",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingResponseContractDetailPayBy) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingResponseContractDetailRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingResponseContractDetailSiteExisting) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingResponseContractInputStatus) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingResponseContractInputStatusStatusCode) Validate() error {
	switch s {
	case 301:
		return nil
	case 302:
		return nil
	case 303:
		return nil
	case 304:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingResponseDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoUpdatingResponseShopItemDetailItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Content1Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content1UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content1_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content2UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content2_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Content3UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content3_unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    19,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoUpdatingResponseShopItemDetailItemType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExaminationInfoUpdatingResponseStatusCode) Validate() error {
	switch s {
	case "101":
		return nil
	case "102":
		return nil
	case "103":
		return nil
	case "105":
		return nil
	case "106":
		return nil
	case "107":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2RetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankAccountInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_account_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositCycleInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2RetrievingResponseBankAccountInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    3,
			MinLengthSet: true,
			MaxLength:    3,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.BranchCode)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AccountKind.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2RetrievingResponseBankAccountInfoAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2RetrievingResponseContractInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RepresentativeLastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeLastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{3}-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeBirthday.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeGender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2RetrievingResponseContractInfoCorporateInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CorporateNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Hp.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Capital.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EstablishedAt.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    10,
					MinLengthSet: true,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.YearlySales.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessDetails.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2RetrievingResponseContractInfoRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2RetrievingResponseDepositCycleInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.DepositCycleMasterID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2RetrievingResponseDepositCycleInfoDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2RetrievingResponseShopInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameEn)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrepaidPointInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prepaid_point_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ProductContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "product_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "service_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DigitalContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "digital_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdditionalInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "additional_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2RetrievingResponseShopInfoAdditionalInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopSalesManagerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_sales_manager_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServoceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_servoce_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopHowToPay.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_how_to_pay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopChargeDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_charge_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopProductDeliveryTime.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_product_delivery_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopReturnGoodsHandingConditions.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_return_goods_handing_conditions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2RetrievingResponseShopInfoPrepaidPointInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.HowToUse.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "how_to_use",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AboutExpiration.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "about_expiration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2RetrievingResponseShopInfoSiteInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.URL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Credential.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "credential",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2RetrievingResponseStatusCode) Validate() error {
	switch s {
	case "101":
		return nil
	case "102":
		return nil
	case "103":
		return nil
	case "105":
		return nil
	case "106":
		return nil
	case "107":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ContractInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankAccountInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_account_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositCycleInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCategoryCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_category_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingRequestBankAccountInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    3,
			MinLengthSet: true,
			MaxLength:    3,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.BranchCode)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AccountKind.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingRequestBankAccountInfoAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingRequestContractInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RepresentativeLastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeLastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{3}-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeBirthday.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeGender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingRequestContractInfoCorporateInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CorporateNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Hp.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Capital.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EstablishedAt.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    10,
					MinLengthSet: true,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.YearlySales.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessDetails.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingRequestContractInfoRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingRequestDepositCycleInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.DepositCycleMasterID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingRequestDepositCycleInfoDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingRequestShopInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameEn)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrepaidPointInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prepaid_point_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ProductContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "product_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "service_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DigitalContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "digital_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdditionalInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "additional_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingRequestShopInfoAdditionalInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopSalesManagerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_sales_manager_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServoceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_servoce_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopHowToPay.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_how_to_pay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopChargeDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_charge_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopProductDeliveryTime.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_product_delivery_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopReturnGoodsHandingConditions.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_return_goods_handing_conditions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingRequestShopInfoPrepaidPointInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.HowToUse.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "how_to_use",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AboutExpiration.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "about_expiration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingRequestShopInfoSiteInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.URL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Credential.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "credential",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContractInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "contract_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankAccountInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_account_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositCycleInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponseBankAccountInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    3,
			MinLengthSet: true,
			MaxLength:    3,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.BranchCode)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.AccountKind.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountNumber)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    50,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccountName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingResponseBankAccountInfoAccountKind) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingResponseContractInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RepresentativeLastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeLastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeFirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{3}-\\d{4}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativePrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeBirthday.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{4}/\\d{2}/\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_birthday",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RepresentativeGender.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "representative_gender",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff1Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff1_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2LastNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_last_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2FirstNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_first_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2CompanyName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_company_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Belongs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_belongs",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Tel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    12,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{11,12}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Staff2Mail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        true,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "staff2_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CorporateInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponseContractInfoCorporateInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CorporateNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_number",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    150,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CorporateNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "corporate_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Hp.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "hp",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Capital.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capital",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EstablishedAt.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    10,
					MinLengthSet: true,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "established_at",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.YearlySales.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "yearly_sales",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BusinessDetails.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "business_details",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPostalCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    8,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_postal_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefecture.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyPrefectureKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    6,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_prefecture_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipality.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressMunicipalityKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_municipality_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSection.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressSectionKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_section_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChrome.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressChromeKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_chrome_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyAddressBuildingNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_address_building_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CompanyTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "company_tel",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingResponseContractInfoRepresentativeGender) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingResponseDepositCycleInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.DepositCycleMasterID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_cycle_master_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingResponseDepositCycleInfoDepositCycleMasterID) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExaminationInfoV2UpdatingResponseShopInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameKana)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    100,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.ShopNameEn)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_en",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SupportTel.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    15,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "support_tel",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UnitPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           2.147483647e+09,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    nil,
				}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "unit_price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SiteInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "site_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PrepaidPointInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "prepaid_point_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ContentDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "content_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ProductContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "product_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ServiceContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "service_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DigitalContentInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "digital_content_info",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AdditionalInfo.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "additional_info",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponseShopInfoAdditionalInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopSalesManagerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_sales_manager_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServoceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_servoce_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopHowToPay.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_how_to_pay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopChargeDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_charge_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopProductDeliveryTime.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_product_delivery_time",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopReturnGoodsHandingConditions.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_return_goods_handing_conditions",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponseShopInfoPrepaidPointInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.HowToUse.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "how_to_use",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AboutExpiration.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "about_expiration",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ExaminationInfoV2UpdatingResponseShopInfoSiteInfo) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.URL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    300,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Credential.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "credential",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExaminationInfoV2UpdatingResponseStatusCode) Validate() error {
	switch s {
	case "101":
		return nil
	case "102":
		return nil
	case "103":
		return nil
	case "105":
		return nil
	case "106":
		return nil
	case "107":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentAfter3DSecureOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentAfter3DSecureOKBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKJobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKPayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKTds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentAfter3DSecureOKTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentAfter3DSecureReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentAfter3DSecureReqPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK) Validate() error {
	switch s.Type {
	case ExecutePaymentOK0ExecutePaymentOK:
		if err := s.ExecutePaymentOK0.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentOK1ExecutePaymentOK:
		if err := s.ExecutePaymentOK1.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentOK2ExecutePaymentOK:
		if err := s.ExecutePaymentOK2.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentOK3ExecutePaymentOK:
		if err := s.ExecutePaymentOK3.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentOK4ExecutePaymentOK:
		if err := s.ExecutePaymentOK4.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *ExecutePaymentOK0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentOK0Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentOK1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentOK1Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK1Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK1PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK1Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentOK2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeFormat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_format",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelOverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeviceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderSerial.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_serial",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InvoiceID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invoice_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentOK2BarcodeFormat) Validate() error {
	switch s {
	case "jpg":
		return nil
	case "png":
		return nil
	case "bmp":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2CancelOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2KonbiniCode) Validate() error {
	switch s {
	case "00010":
		return nil
	case "00020":
		return nil
	case "00030":
		return nil
	case "00080":
		return nil
	case "00760":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2OverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2Result) Validate() error {
	switch s {
	case "000":
		return nil
	case "001":
		return nil
	case "002":
		return nil
	case "003":
		return nil
	case "004":
		return nil
	case "005":
		return nil
	case "006":
		return nil
	case "007":
		return nil
	case "008":
		return nil
	case "009":
		return nil
	case "010":
		return nil
	case "011":
		return nil
	case "012":
		return nil
	case "013":
		return nil
	case "900":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK2Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentOK3) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CaptureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpdateDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StoreID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "store_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayResultCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCaptureID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_capture_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantUpdateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRevertID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRefundID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentOK3JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK3PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK3RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK3Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentOK4) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentOK4PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK4ResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentOK4Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq) Validate() error {
	switch s.Type {
	case ExecutePaymentReq0ExecutePaymentReq:
		if err := s.ExecutePaymentReq0.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentReq1ExecutePaymentReq:
		if err := s.ExecutePaymentReq1.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentReq2ExecutePaymentReq:
		if err := s.ExecutePaymentReq2.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentReq3ExecutePaymentReq:
		if err := s.ExecutePaymentReq3.Validate(); err != nil {
			return err
		}
		return nil
	case ExecutePaymentReq4ExecutePaymentReq:
		if err := s.ExecutePaymentReq4.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *ExecutePaymentReq0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Token.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    512,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "token",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccChange.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_change",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccDate.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ChAccPwChange.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_pw_change",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2NbPurchaseAccount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_nb_purchase_account",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PaymentAccAge.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_payment_acc_age",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ProvisionAttemptsDay.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_provision_attempts_day",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddressUsage.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_address_usage",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipNameInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_name_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2SuspiciousAccActivity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_suspicious_acc_activity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TxnActivityDay.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_day",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TxnActivityYear.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    3,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_year",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ThreeDsReqAuthData.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    2048,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_data",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ThreeDsReqAuthMethod.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2AddrMatch.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_addr_match",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrCountry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrState.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrCity.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrLine3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipAddrPostCode.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    16,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ShipInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2DeliveryEmailAddress.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    254,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_email_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2HomePhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2HomePhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2MobilePhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2MobilePhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2WorkPhoneCc.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2WorkPhoneNo.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2DeliveryTimeframe.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_timeframe",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PreOrderDate.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_date",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2PreOrderPurchaseInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_purchase_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2ReorderItemsInd.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_reorder_items_ind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RecurringExpiry.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    8,
								MinLengthSet: true,
								MaxLength:    8,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_expiry",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RecurringFrequency.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_frequency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardAmount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    15,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardCount.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    2,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2GiftCardCurr.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    3,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_curr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentReq0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2AddrMatch) Validate() error {
	switch s {
	case "Y":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2DeliveryTimeframe) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2PreOrderPurchaseInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2ReorderItemsInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2ShipInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2ShipNameInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2SuspiciousAccActivity) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq0Tds2ThreeDsReqAuthMethod) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentReq1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentReq1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentReq2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.DeviceName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.WinWidth)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.WinHeight)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PixelRatio)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pixel_ratio",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.WinSizeType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_size_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentReq2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq2WinSizeType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentReq3) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.RedirectURL == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RedirectURL.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    256,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if s.RedirectType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.RedirectType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UserAgent.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user_agent",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentReq3PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ExecutePaymentReq3RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ExecutePaymentReq4) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    60,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CustomerID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ExecutePaymentReq4PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *FincodeAPIError) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *FincodeAPIErrorResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Errors {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "errors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GenerateBarcodeOfPaymentOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeFormat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_format",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelOverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeviceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderSerial.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_serial",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InvoiceID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invoice_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GenerateBarcodeOfPaymentOKBarcodeFormat) Validate() error {
	switch s {
	case "jpg":
		return nil
	case "png":
		return nil
	case "bmp":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKCancelOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKKonbiniCode) Validate() error {
	switch s {
	case "00010":
		return nil
	case "00020":
		return nil
	case "00030":
		return nil
	case "00080":
		return nil
	case "00760":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKResult) Validate() error {
	switch s {
	case "000":
		return nil
	case "001":
		return nil
	case "002":
		return nil
	case "003":
		return nil
	case "004":
		return nil
	case "005":
		return nil
	case "006":
		return nil
	case "007":
		return nil
	case "008":
		return nil
	case "009":
		return nil
	case "010":
		return nil
	case "011":
		return nil
	case "012":
		return nil
	case "013":
		return nil
	case "900":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentOKStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GenerateBarcodeOfPaymentReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    30,
			MinLengthSet: true,
			MaxLength:    30,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.AccessID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.DeviceName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.WinWidth)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.WinHeight)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    5,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PixelRatio)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pixel_ratio",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.WinSizeType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_size_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GenerateBarcodeOfPaymentReqPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GenerateBarcodeOfPaymentReqWinSizeType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTContractsExaminationsRequestMultipart) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EnableImmediateUse.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enable_immediate_use",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTContractsExaminationsRequestMultipartEnableImmediateUse) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTContractsExaminationsResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EnableImmediateUse.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enable_immediate_use",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTContractsExaminationsResponseEnableImmediateUse) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTJoinTenantsRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    254,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    12,
			MinLengthSet: true,
			MaxLength:    254,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Password)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "password",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    25,
			MinLengthSet: true,
			MaxLength:    25,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.TenantURLID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tenant_url_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *POSTJoinTenantsResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopNameKana == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopNameKana.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    40,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.PlatformName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.PlatformName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.SharedCustomerFlag == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SharedCustomerFlag.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.CustomerGroupID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CustomerGroupID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.SendMailAddress == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.SendMailAddress.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    255,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopMailAddress == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopMailAddress.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    255,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if s.LogKeepDays == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.LogKeepDays.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if s.APIVersion == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.APIVersion.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if s.APIKeyDisplayFlag == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.APIKeyDisplayFlag.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTJoinTenantsResponseAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTJoinTenantsResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTJoinTenantsResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTProviderReserveRequestMultipart) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Provider == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Provider {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTProviderReserveRequestMultipartProviderItem) Validate() error {
	switch s {
	case "PAYSLE":
		return nil
	case "PAYPAY":
		return nil
	case "APPLE_PAY_UC":
		return nil
	case "APPLE_PAY_JCB":
		return nil
	case "DIRECT_DEBIT":
		return nil
	case "VIRTUAL_ACCOUNT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTProviderReserveResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ReservationList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reservation_list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *POSTProviderReserveResponseReservationListItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ReservationID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           21474836479,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reservation_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Provider.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTProviderReserveResponseReservationListItemProvider) Validate() error {
	switch s {
	case "PAYSLE":
		return nil
	case "PAYPAY":
		return nil
	case "APPLE_PAY_UC":
		return nil
	case "APPLE_PAY_JCB":
		return nil
	case "DIRECT_DEBIT":
		return nil
	case "VIRTUAL_ACCOUNT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *POSTTenantEntriesRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    254,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Email)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    12,
			MinLengthSet: true,
			MaxLength:    254,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Password)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "password",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    384,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Name)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    25,
			MinLengthSet: true,
			MaxLength:    25,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.TenantURLID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tenant_url_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *POSTTenantEntriesResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.UserData.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "user_data",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessToken.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    112,
					MinLengthSet: true,
					MaxLength:    112,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_token",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *POSTTenantEntriesResponseUserData) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    24,
					MinLengthSet: true,
					MaxLength:    24,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RoleID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           0,
					MaxSet:        true,
					Max:           2147483647,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "role_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TwoFactorAuthStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "two_factor_auth_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MailAuthStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mail_auth_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PasswordLockStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "password_lock_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InviteStatus.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invite_status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s POSTTenantEntriesResponseUserDataAccountStatus) Validate() error {
	switch s {
	case "00":
		return nil
	case "01":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTTenantEntriesResponseUserDataInviteStatus) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTTenantEntriesResponseUserDataMailAuthStatus) Validate() error {
	switch s {
	case "00":
		return nil
	case "01":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTTenantEntriesResponseUserDataPasswordLockStatus) Validate() error {
	switch s {
	case "00":
		return nil
	case "01":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTTenantEntriesResponseUserDataTwoFactorAuthStatus) Validate() error {
	switch s {
	case "00":
		return nil
	case "01":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s POSTTenantEntriesResponseUserDataType) Validate() error {
	switch s {
	case "01":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentBulk) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FileName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PaymentBulkCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FileName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentBulkCreatingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentBulkCreatingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentBulkCreatingResponseStatus) Validate() error {
	switch s {
	case "CHECKED":
		return nil
	case "SUCCEEDED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentBulkDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentBulkDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentBulkDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentBulkDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ItemCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ItemCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    7,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.TransactionID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TransactionID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    28,
						MinLengthSet: true,
						MaxLength:    28,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.Approve == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Approve.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if s.Forward == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Forward.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentBulkDetailJobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentBulkDetailListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.ErrorDetail {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_detail",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentBulkDetailMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentBulkDetailPayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentBulkErrorDetail) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Errors {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "errors",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PaymentBulkListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentBulkPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentBulkStatus) Validate() error {
	switch s {
	case "CHECKED":
		return nil
	case "SUCCEEDED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentMethod) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURLAccessedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url_accessed_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReturnURLOnFailure.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "return_url_on_failure",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Directdebit.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "directdebit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PaymentMethodCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^\\d{2}\\d{2}$"],
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Brand == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Brand.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if s.TdsType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TdsType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2Type == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2Type.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Acs.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    1,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "acs",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentMethodCardBrand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodCardTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodCardTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodCardType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentMethodDirectdebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApplicationType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LastResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "last_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber1.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PostalAccountNumber2.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "postal_account_number_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperApplication.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_application",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentMethodDirectdebitAccountType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodDirectdebitBankType) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentMethodDirectdebitPaperApplication) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RequestFormID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "request_form_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaperFailureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paper_failure_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentMethodPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodRedirectURLAccessedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentMethodStatus) Validate() error {
	switch s {
	case "INACTIVATED":
		return nil
	case "AWAITING_CUSTOMER_ACTION":
		return nil
	case "ACTIVATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Transaction.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Konbini.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Paypay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SuccessURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "success_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServiceName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_service_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GuideMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guide_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReceiverMail.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    254,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "receiver_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MailCustomerName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    384,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mail_customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ThanksMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "thanks_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailTemplateID.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    25,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_template_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PaymentSessionCreatingRequestCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccChange == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccChange.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_change",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccDate == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccDate.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ChAccPwChange == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ChAccPwChange.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ch_acc_pw_change",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2NbPurchaseAccount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2NbPurchaseAccount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_nb_purchase_account",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PaymentAccAge == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PaymentAccAge.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_payment_acc_age",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ProvisionAttemptsDay == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ProvisionAttemptsDay.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_provision_attempts_day",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddressUsage == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddressUsage.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_address_usage",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipNameInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipNameInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_name_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2SuspiciousAccActivity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2SuspiciousAccActivity.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_suspicious_acc_activity",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2TxnActivityDay == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2TxnActivityDay.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_day",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2TxnActivityYear == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2TxnActivityYear.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    3,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_txn_activity_year",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ThreeDsReqAuthData == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ThreeDsReqAuthData.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    2048,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_data",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ThreeDsReqAuthMethod == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ThreeDsReqAuthMethod.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_three_ds_req_auth_method",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2AddrMatch == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2AddrMatch.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_addr_match",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrCountry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrCountry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrState == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrState.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrCity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrCity.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrLine1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrLine1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrLine2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrLine2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2BillAddrLine3.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2BillAddrPostCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2BillAddrPostCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    16,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_bill_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrCountry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrCountry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_country",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrState == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrState.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_state",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrCity == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrCity.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_city",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrLine3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrLine3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_line_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipAddrPostCode == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipAddrPostCode.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    16,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_addr_post_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ShipInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ShipInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ship_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2DeliveryEmailAddress == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2DeliveryEmailAddress.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    254,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_email_address",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2HomePhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2HomePhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2HomePhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2HomePhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_home_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2MobilePhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2MobilePhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2MobilePhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2MobilePhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_mobile_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2WorkPhoneCc == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2WorkPhoneCc.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_cc",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2WorkPhoneNo == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2WorkPhoneNo.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_work_phone_no",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2DeliveryTimeframe == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2DeliveryTimeframe.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_delivery_timeframe",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PreOrderDate == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PreOrderDate.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_date",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2PreOrderPurchaseInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2PreOrderPurchaseInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_pre_order_purchase_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2ReorderItemsInd == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2ReorderItemsInd.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_reorder_items_ind",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2RecurringExpiry == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2RecurringExpiry.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    8,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_expiry",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2RecurringFrequency == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2RecurringFrequency.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_recurring_frequency",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardAmount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardAmount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    15,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_amount",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardCount == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardCount.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    2,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_count",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tds2GiftCardCurr == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Tds2GiftCardCurr.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    3,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_gift_card_curr",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingRequestCardJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2AddrMatch) Validate() error {
	switch s {
	case "Y":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2DeliveryTimeframe) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2PreOrderPurchaseInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2ReorderItemsInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2ShipInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2ShipNameInd) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2SuspiciousAccActivity) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2ThreeDsReqAuthMethod) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestCardTdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestGuideMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingRequestKonbini) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.KonbiniReceptionMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_reception_mail_send_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingRequestKonbiniKonbiniReceptionMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingRequestPaypay) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingRequestPaypayJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingRequestThanksMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingRequestTransaction) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    9,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingRequestTransactionPayTypeItem) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LinkURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "link_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SuccessURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "success_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopServiceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_service_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.GuideMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guide_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ReceiverMail.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "receiver_mail",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MailCustomerName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mail_customer_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ThanksMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "thanks_mail_send_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailTemplateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_template_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Transaction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Card.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Konbini.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Paypay.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PaymentSessionCreatingResponseCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdTenantName.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "td_tenant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingResponseGuideMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingResponseKonbini) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.KonbiniReceptionURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_reception_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniReceptionMailSendFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_reception_mail_send_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingResponseKonbiniKonbiniReceptionMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingResponsePaypay) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingResponsePaypayJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingResponseStatus) Validate() error {
	switch s {
	case "CREATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PaymentSessionCreatingResponseThanksMailSendFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PaymentSessionCreatingResponseTransaction) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PayType {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PaymentSessionCreatingResponseTransactionPayTypeItem) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Plan) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    400,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UsedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "used_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlanCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    0,
			MinLengthSet: false,
			MaxLength:    200,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PlanName)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Description == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Description.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    400,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    7,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Amount)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanCreatingRequestIntervalCount) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "6":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanCreatingRequestIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlanCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    400,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UsedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "used_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanCreatingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanCreatingResponseIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanCreatingResponseIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanCreatingResponseUsedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlanDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    400,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UsedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "used_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanDeletingResponseIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanDeletingResponseIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanDeletingResponseUsedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlanListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlanRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    400,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UsedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "used_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanRetrievingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanRetrievingResponseIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanRetrievingResponseIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanRetrievingResponseUsedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlanUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if s.Description == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Description.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    400,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanUpdatingRequestIntervalCount) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "6":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanUpdatingRequestIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlanUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Description.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    400,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UsedFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "used_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlanUpdatingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanUpdatingResponseIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanUpdatingResponseIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanUpdatingResponseUsedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlanUsedFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlatformAccountListItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           100000,
					MaxSet:        true,
					Max:           999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformAccountListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformAccountRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1000000,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DepositDestination.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "deposit_destination",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformAccountRetrievingResponseDepositDestination) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.RecipientCorporateName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    150,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_corporate_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecipientRepresntativeLastName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_represntative_last_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RecipientRepresntativeFirstName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "recipient_represntative_first_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    96,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountKind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountNumber.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_number",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    208,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlatformAccountRetrievingResponseDepositDestinationAccountKind) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlatformAccountSummary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SummaryID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10000000,
					MaxSet:        true,
					Max:           99999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "summary_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccountID.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           100000,
					MaxSet:        true,
					Max:           999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "account_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TenantShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tenant_shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.TenantShopName == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TenantShopName.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tenant_shop_name",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.TenantAccountProcessIDList {
			if err := func() error {
				if err := (validate.String{
					MinLength:    32,
					MinLengthSet: true,
					MaxLength:    32,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(elem)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tenant_account_process_id_list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformAccountSummaryListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformRateConfig) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformRate.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WebRegistrationFee.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "web_registration_fee",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayContentCategoryType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_content_category_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlatformRateConfigID) Validate() error {
	switch s {
	case "vm":
		return nil
	case "jad":
		return nil
	case "applepay_vm":
		return nil
	case "applepay_jad":
		return nil
	case "konbini":
		return nil
	case "paypay":
		return nil
	case "directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlatformRateConfigPaypayContentCategoryType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlatformShopListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PlatformShopRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedCustomerFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlatformRateList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SendMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogKeepDays.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIVersion.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIKeyDisplayFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlatformShopRetrievingResponseAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlatformShopRetrievingResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlatformShopRetrievingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlatformShopUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.ExaminationMasterID.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination_master_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlatformShopUpdatingRequestExaminationMasterID) Validate() error {
	switch s {
	case "vm":
		return nil
	case "jad":
		return nil
	case "applepay_vm":
		return nil
	case "applepay_jad":
		return nil
	case "konbini":
		return nil
	case "paypay":
		return nil
	case "directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PlatformShopUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedCustomerFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlatformRateList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SendMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogKeepDays.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIVersion.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIKeyDisplayFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PlatformShopUpdatingResponseAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlatformShopUpdatingResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PlatformShopUpdatingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *R3DSAuthorizingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Param.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    2000,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "param",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *R3DSAuthorizingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ChallengeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "challenge_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TransResult.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_trans_result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TransResultReason.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_trans_result_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s R3DSAuthorizingResponseTds2TransResult) Validate() error {
	switch s {
	case "Y":
		return nil
	case "A":
		return nil
	case "C":
		return nil
	case "N":
		return nil
	case "U":
		return nil
	case "R":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s R3DSAuthorizingResponseTds2TransResultReason) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	case "08":
		return nil
	case "09":
		return nil
	case "11":
		return nil
	case "12":
		return nil
	case "13":
		return nil
	case "14":
		return nil
	case "15":
		return nil
	case "16":
		return nil
	case "17":
		return nil
	case "18":
		return nil
	case "19":
		return nil
	case "20":
		return nil
	case "21":
		return nil
	case "22":
		return nil
	case "23":
		return nil
	case "24":
		return nil
	case "25":
		return nil
	case "26":
		return nil
	case "80...99":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *R3DSConfirmingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Tds2TransResult.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_trans_result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2TransResultReason.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_trans_result_reason",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s R3DSConfirmingResponseTds2TransResult) Validate() error {
	switch s {
	case "Y":
		return nil
	case "A":
		return nil
	case "C":
		return nil
	case "N":
		return nil
	case "U":
		return nil
	case "R":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s R3DSConfirmingResponseTds2TransResultReason) Validate() error {
	switch s {
	case "01":
		return nil
	case "02":
		return nil
	case "03":
		return nil
	case "04":
		return nil
	case "05":
		return nil
	case "06":
		return nil
	case "07":
		return nil
	case "08":
		return nil
	case "09":
		return nil
	case "11":
		return nil
	case "12":
		return nil
	case "13":
		return nil
	case "14":
		return nil
	case "15":
		return nil
	case "16":
		return nil
	case "17":
		return nil
	case "18":
		return nil
	case "19":
		return nil
	case "20":
		return nil
	case "21":
		return nil
	case "22":
		return nil
	case "23":
		return nil
	case "24":
		return nil
	case "25":
		return nil
	case "26":
		return nil
	case "80...99":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrieveAccountDetailListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveAccountListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveCustomerListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    384,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Email.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    254,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "email",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveCustomerPaymentMethodListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrieveCustomerPaymentMethodListQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrieveCustomerPaymentMethodQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrieveCustomerPaymentMethodQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentBulkDetailListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentBulkDetailListQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentBulkDetailListQueryStatus) Validate() error {
	switch s {
	case "CHECKED":
		return nil
	case "SUCCEEDED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentBulkListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FileName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentBulkListQueryDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentBulkListQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentBulkListQueryStatus) Validate() error {
	switch s {
	case "CHECKING":
		return nil
	case "CHECKED":
		return nil
	case "RUNNING":
		return nil
	case "COMPLETED":
		return nil
	case "ERROR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK) Validate() error {
	switch s.Type {
	case RetrievePaymentOK0RetrievePaymentOK:
		if err := s.RetrievePaymentOK0.Validate(); err != nil {
			return err
		}
		return nil
	case RetrievePaymentOK1RetrievePaymentOK:
		if err := s.RetrievePaymentOK1.Validate(); err != nil {
			return err
		}
		return nil
	case RetrievePaymentOK2RetrievePaymentOK:
		if err := s.RetrievePaymentOK2.Validate(); err != nil {
			return err
		}
		return nil
	case RetrievePaymentOK3RetrievePaymentOK:
		if err := s.RetrievePaymentOK3.Validate(); err != nil {
			return err
		}
		return nil
	case RetrievePaymentOK4RetrievePaymentOK:
		if err := s.RetrievePaymentOK4.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *RetrievePaymentOK0) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TdsType.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Type.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := value.Validate(); err != nil {
								return err
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2RetURL.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    256,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_ret_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tds2Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tds2_status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentOK0Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0JobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK0TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentOK1) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Brand.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "brand",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Expire.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    4,
								MinLengthSet: true,
								MaxLength:    4,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^\\d{2}\\d{2}$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.HolderName.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "holder_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoHash.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_hash",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayTimes.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_times",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Forward.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Issuer.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "issuer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TransactionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    28,
					MinLengthSet: true,
					MaxLength:    28,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Approve.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    7,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "item_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentOK1Brand) Validate() error {
	switch s {
	case "VISA":
		return nil
	case "MASTER":
		return nil
	case "JCB":
		return nil
	case "AMEX":
		return nil
	case "DINERS":
		return nil
	case "DISCOVER":
		return nil
	case "":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK1JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK1Method) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK1PayTimes) Validate() error {
	switch s {
	case "3":
		return nil
	case "5":
		return nil
	case "6":
		return nil
	case "10":
		return nil
	case "12":
		return nil
	case "15":
		return nil
	case "18":
		return nil
	case "20":
		return nil
	case "24":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK1PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK1Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentOK2) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeFormat.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_format",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BarcodeHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "barcode_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelOverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeviceName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "device_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinWidth.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_width",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.WinHeight.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    5,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "win_height",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Result.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderSerial.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_serial",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InvoiceID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invoice_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentOK2BarcodeFormat) Validate() error {
	switch s {
	case "jpg":
		return nil
	case "png":
		return nil
	case "bmp":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2CancelOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2KonbiniCode) Validate() error {
	switch s {
	case "00010":
		return nil
	case "00020":
		return nil
	case "00030":
		return nil
	case "00080":
		return nil
	case "00760":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2OverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2Result) Validate() error {
	switch s {
	case "000":
		return nil
	case "001":
		return nil
	case "002":
		return nil
	case "003":
		return nil
	case "004":
		return nil
	case "005":
		return nil
	case "006":
		return nil
	case "007":
		return nil
	case "008":
		return nil
	case "009":
		return nil
	case "010":
		return nil
	case "011":
		return nil
	case "012":
		return nil
	case "013":
		return nil
	case "900":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK2Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentOK3) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectURL.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_url",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RedirectType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirect_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CaptureDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "capture_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpdateDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "update_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelDescription.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_description",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StoreID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    18,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "store_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CodeID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaypayResultCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    256,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantCaptureID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_capture_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantUpdateID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRevertID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MerchantRefundID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    64,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentOK3JobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK3PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK3RedirectType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK3Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentOK4) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    4,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BankName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bank_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    3,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BranchName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "branch_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentOK4PayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK4ResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePaymentOK4Status) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePaymentQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePaymentQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePlanListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrievePlanListQueryDeleteFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrievePlanListQueryIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrievePlatformAccountListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrievePlatformAccountSummaryListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrievePlatformShopListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveSubscriptionListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrieveSubscriptionListQueryIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrieveSubscriptionListQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s RetrieveSubscriptionListQueryStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrieveSubscriptionResultListOK) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveSubscriptionResultListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s RetrieveSubscriptionResultListQueryPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RetrieveTenantShopListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *RetrieveWebhookSettingListQuery) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Page.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "page",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Limit.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           100,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "limit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Shop) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedCustomerFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlatformRateList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SendMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogKeepDays.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIVersion.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIKeyDisplayFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ShopAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ShopSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ShopShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Subscription) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTotalAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_total_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SubscriptionCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    25,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.PlanID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    1,
			MinLengthSet: true,
			MaxLength:    60,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.CustomerID)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionCreatingRequestEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionCreatingRequestPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTotalAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_total_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionCreatingResponseEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionCreatingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionCreatingResponseStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionResult) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNo.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalPattern.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_pattern",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.IntervalCount.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "interval_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    9,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionResultIntervalCount) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 3:
		return nil
	case 6:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionResultIntervalPattern) Validate() error {
	switch s {
	case "month":
		return nil
	case "year":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionResultPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionResultStatus) Validate() error {
	switch s {
	case "CHECKED":
		return nil
	case "SUCCEEDED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTotalAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_total_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionRetrievingResponseEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionRetrievingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionRetrievingResponseStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionUnsubscribingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTotalAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_total_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionUnsubscribingResponseEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionUnsubscribingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionUnsubscribingResponseStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.PayType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionUpdatingRequestEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionUpdatingRequestPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubscriptionUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    200,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTax.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InitialTotalAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        true,
					Max:           9999999,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "initial_total_amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.Remarks == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Remarks.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    9,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubscriptionUpdatingResponseEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionUpdatingResponsePayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubscriptionUpdatingResponseStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TdTenantName) Validate() error {
	alias := (string)(s)
	if err := (validate.String{
		MinLength:    0,
		MinLengthSet: false,
		MaxLength:    25,
		MaxLengthSet: true,
		Email:        false,
		Hostname:     false,
		Regex:        nil,
	}).Validate(string(alias)); err != nil {
		return errors.Wrap(err, "string")
	}
	return nil
}

func (s Tds2Status) Validate() error {
	switch s {
	case "AUTHENTICATING":
		return nil
	case "CHALLENGE":
		return nil
	case "ACTIVATED":
		return nil
	case "AUTHENTICATED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s Tds2Type) Validate() error {
	switch s {
	case "2":
		return nil
	case "3":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TdsType) Validate() error {
	switch s {
	case "0":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TenantShopListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *TenantShopRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedCustomerFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlatformRateList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SendMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogKeepDays.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIVersion.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIKeyDisplayFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TenantShopRetrievingResponseAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopRetrievingResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopRetrievingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TenantShopUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ExaminationMasterID.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "examination_master_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.PaypayContentCategoryType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.PaypayContentCategoryType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "paypay_content_category_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.APIKeyDisplayFlag == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.APIKeyDisplayFlag.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TenantShopUpdatingRequestAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopUpdatingRequestExaminationMasterID) Validate() error {
	switch s {
	case "vm":
		return nil
	case "jad":
		return nil
	case "applepay_vm":
		return nil
	case "applepay_jad":
		return nil
	case "konbini":
		return nil
	case "paypay":
		return nil
	case "directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopUpdatingRequestPaypayContentCategoryType) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TenantShopUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopNameKana.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_name_kana",
			Error: err,
		})
	}
	if err := func() error {
		if s.ShopType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ShopType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlatformName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SharedCustomerFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shared_customer_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerGroupID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.PlatformRateList {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "platform_rate_list",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SendMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "send_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ShopMailAddress.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    255,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_mail_address",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogKeepDays.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    4,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "log_keep_days",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIVersion.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    8,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_version",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.APIKeyDisplayFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "api_key_display_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s TenantShopUpdatingResponseAPIKeyDisplayFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopUpdatingResponseSharedCustomerFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s TenantShopUpdatingResponseShopType) Validate() error {
	switch s {
	case "platform":
		return nil
	case "tenant":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.CustomerGroupID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CustomerGroupID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    13,
						MinLengthSet: true,
						MaxLength:    13,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_group_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardNoDisplay.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    16,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_no_display",
			Error: err,
		})
	}
	if err := func() error {
		if s.ExpireDisplay == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ExpireDisplay.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    4,
						MinLengthSet: true,
						MaxLength:    4,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^\\d{2}\\d{2}$"],
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "expire_display",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ProcessType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "process_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if s.Forward == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Forward.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventCardDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCardProcessType) Validate() error {
	switch s {
	case "I":
		return nil
	case "U":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventContract) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Body {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "body",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *WebhookEventContractBodyItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Acquirer.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "acquirer",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.StatusCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status_code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventContractBodyItemAcquirer) Validate() error {
	switch s {
	case "UC":
		return nil
	case "TFC":
		return nil
	case "JCB/AMEX":
		return nil
	case "DINERS":
		return nil
	case "APPLE PAY UC":
		return nil
	case "APPLE PAY JCB/AMEX":
		return nil
	case "PAYSLE":
		return nil
	case "PAYPAY":
		return nil
	case "DIRECT DEBIT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventContractBodyItemStatusCode) Validate() error {
	switch s {
	case "701":
		return nil
	case "702":
		return nil
	case "703":
		return nil
	case "704":
		return nil
	case "705":
		return nil
	case "706":
		return nil
	case "707":
		return nil
	case "708":
		return nil
	case "709":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventContractEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventCustomerPaymentMethod) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if s.ApplicationType == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ApplicationType.Get(); ok {
				if err := func() error {
					if err := value.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "application_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventCustomerPaymentMethodApplicationType) Validate() error {
	switch s {
	case "PAPER":
		return nil
	case "ONLINE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCustomerPaymentMethodEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCustomerPaymentMethodPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventCustomerPaymentMethodStatus) Validate() error {
	switch s {
	case "INACTIVATED":
		return nil
	case "AWAITING_CUSTOMER_ACTION":
		return nil
	case "ACTIVATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentApplePay) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Currency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "currency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.Forward == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Forward.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if s.TransactionID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TransactionID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    28,
						MinLengthSet: true,
						MaxLength:    28,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.Approve == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Approve.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentApplePayCurrency) Validate() error {
	switch s {
	case "JPY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentApplePayEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentApplePayJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentApplePayMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentApplePayPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentApplePayStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentBulkBatchCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BulkPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bulk_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FileName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SucceededCount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "succeeded_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FailedCount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "failed_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TotalCount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentBulkBatchCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentBulkBatchCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentBulkBatchCardStatus) Validate() error {
	switch s {
	case "CHECKING":
		return nil
	case "CHECKED":
		return nil
	case "RUNNING":
		return nil
	case "COMPLETED":
		return nil
	case "ERROR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentBulkRegistCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BulkPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bulk_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.FileName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    100,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "file_name",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.RegistTotalCount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "regist_total_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorTotalCount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_total_count",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentBulkRegistCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentBulkRegistCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentBulkRegistCardStatus) Validate() error {
	switch s {
	case "CHECKING":
		return nil
	case "CHECKED":
		return nil
	case "RUNNING":
		return nil
	case "COMPLETED":
		return nil
	case "ERROR":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Method.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "method",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Currency.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "currency",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BulkPaymentID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bulk_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.Forward == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Forward.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "forward",
			Error: err,
		})
	}
	if err := func() error {
		if s.TransactionID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.TransactionID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    28,
						MinLengthSet: true,
						MaxLength:    28,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "transaction_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.Approve == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.Approve.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    7,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "approve",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentCardCurrency) Validate() error {
	switch s {
	case "JPY":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentCardJobCode) Validate() error {
	switch s {
	case "CHECK":
		return nil
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentCardMethod) Validate() error {
	switch s {
	case "1":
		return nil
	case "2":
		return nil
	case "5":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentCardStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentDirectDebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ResultCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "result_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    9,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentDirectDebitEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentDirectDebitPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentDirectDebitResultCode) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	case "2":
		return nil
	case "3":
		return nil
	case "4":
		return nil
	case "8":
		return nil
	case "9":
		return nil
	case "E":
		return nil
	case "N":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentDirectDebitStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentKonbini) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CancelOverpaymentFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cancel_overpayment_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.KonbiniCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "konbini_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderSerial.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    18,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_serial",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.InvoiceID.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    20,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "invoice_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentKonbiniCancelOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentKonbiniEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentKonbiniKonbiniCode) Validate() error {
	switch s {
	case "00010":
		return nil
	case "00020":
		return nil
	case "00030":
		return nil
	case "00080":
		return nil
	case "00760":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentKonbiniOverpaymentFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentKonbiniPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentKonbiniStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventPaymentPayPay) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.OrderID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.AccessID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    30,
					MinLengthSet: true,
					MaxLength:    30,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "access_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JobCode.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "job_code",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField1 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField1.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField2 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField2.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if s.ClientField3 == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.ClientField3.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Amount.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "amount",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tax.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    7,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tax",
			Error: err,
		})
	}
	if err := func() error {
		if s.OrderDescription == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.OrderDescription.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    100,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "order_description",
			Error: err,
		})
	}
	if err := func() error {
		if s.CodeID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.CodeID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.PaymentID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.PaymentID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.MerchantPaymentID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.MerchantPaymentID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_payment_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.MerchantUpdateID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.MerchantUpdateID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_update_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.MerchantRevertID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.MerchantRevertID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_revert_id",
			Error: err,
		})
	}
	if err := func() error {
		if s.MerchantRefundID == nil {
			return nil // optional
		}
		if err := func() error {
			if value, ok := s.MerchantRefundID.Get(); ok {
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    64,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(value)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return err
				}
			}
			return nil
		}(); err != nil {
			return errors.Wrap(err, "pointer")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "merchant_refund_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ErrorCode.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    11,
					MinLengthSet: true,
					MaxLength:    11,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error_code",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventPaymentPayPayEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentPayPayJobCode) Validate() error {
	switch s {
	case "AUTH":
		return nil
	case "CAPTURE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentPayPayPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Konbini":
		return nil
	case "Paypay":
		return nil
	case "Applepay":
		return nil
	case "Directdebit":
		return nil
	case "Virtualaccount":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventPaymentPayPayStatus) Validate() error {
	switch s {
	case "UNPROCESSED":
		return nil
	case "CHECKED":
		return nil
	case "AUTHORIZED":
		return nil
	case "AWAITING_CUSTOMER_PAYMENT":
		return nil
	case "AWAITING_PAYMENT_APPROVAL":
		return nil
	case "CAPTURED":
		return nil
	case "CANCELED":
		return nil
	case "EXPIRED":
		return nil
	case "AUTHENTICATED":
		return nil
	case "FAILED":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventRecurringBatchCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Succeeded.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "succeeded",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Failed.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "failed",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Total.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventRecurringBatchCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventRecurringBatchCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventRecurringBatchDirectDebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Succeeded.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "succeeded",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Failed.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "failed",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Total.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    10,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "total",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventRecurringBatchDirectDebitEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventRecurringBatchDirectDebitPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventSubscriptionCard) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CardID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "card_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultCardFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_card_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventSubscriptionCardDefaultCardFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionCardEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionCardEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionCardPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionCardStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookEventSubscriptionDirectDebit) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ShopID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    13,
					MinLengthSet: true,
					MaxLength:    13,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "shop_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SubscriptionID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "subscription_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PlanID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "plan_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CustomerID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customer_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PaymentMethodID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    25,
					MinLengthSet: true,
					MaxLength:    25,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "payment_method_id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DefaultFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "default_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField1.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_1",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField2.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_2",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ClientField3.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    100,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "client_field_3",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Remarks.Get(); ok {
			if err := func() error {
				if value == nil {
					return nil // null
				}
				if err := func() error {
					if value, ok := value.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    1,
								MinLengthSet: true,
								MaxLength:    9,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return errors.Wrap(err, "pointer")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "remarks",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.EndMonthFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "end_month_flag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PayType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pay_type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookEventSubscriptionDirectDebitDefaultFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionDirectDebitEndMonthFlag) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionDirectDebitEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionDirectDebitPayType) Validate() error {
	switch s {
	case "Card":
		return nil
	case "Directdebit":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookEventSubscriptionDirectDebitStatus) Validate() error {
	switch s {
	case "ACTIVE":
		return nil
	case "RUNNING":
		return nil
	case "CANCELED":
		return nil
	case "INCOMPLETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Receive.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "receive",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookResponseReceive) Validate() error {
	switch s {
	case "0":
		return nil
	case "1":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSetting) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *WebhookSettingCreatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Event.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingCreatingRequestEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSettingCreatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingCreatingResponseEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSettingDeletingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.DeleteFlag.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "delete_flag",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingDeletingResponseDeleteFlag) Validate() error {
	switch s {
	case "1":
		return nil
	case "0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s WebhookSettingEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSettingListRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.List {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "list",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *WebhookSettingRetrievingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingRetrievingResponseEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSettingUpdatingRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingUpdatingRequestEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *WebhookSettingUpdatingResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ID.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    50,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "id",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Event.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "event",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Signature.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    60,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "signature",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s WebhookSettingUpdatingResponseEvent) Validate() error {
	switch s {
	case "payments.card.regist":
		return nil
	case "payments.card.exec":
		return nil
	case "payments.card.capture":
		return nil
	case "payments.card.cancel":
		return nil
	case "payments.card.auth":
		return nil
	case "payments.card.change":
		return nil
	case "payments.card.secure2.authenticate":
		return nil
	case "payments.card.secure2.result":
		return nil
	case "payments.card.secure":
		return nil
	case "payments.applepay.regist":
		return nil
	case "payments.applepay.exec":
		return nil
	case "payments.applepay.capture":
		return nil
	case "payments.applepay.cancel":
		return nil
	case "payments.konbini.regist":
		return nil
	case "payments.konbini.exec":
		return nil
	case "payments.konbini.cancel":
		return nil
	case "payments.konbini.complete":
		return nil
	case "payments.konbini.complete.stub":
		return nil
	case "payments.konbini.expired.update.batch":
		return nil
	case "payments.paypay.regist":
		return nil
	case "payments.paypay.exec":
		return nil
	case "payments.paypay.capture":
		return nil
	case "payments.paypay.cancel":
		return nil
	case "payments.paypay.change":
		return nil
	case "payments.paypay.complete":
		return nil
	case "payments.directdebit.regist":
		return nil
	case "payments.directdebit.exec":
		return nil
	case "payments.directdebit.cancel":
		return nil
	case "payments.directdebit.change":
		return nil
	case "payments.directdebit.complete":
		return nil
	case "payments.directdebit.complete.stub":
		return nil
	case "customers.payment_methods.updated":
		return nil
	case "card.regist":
		return nil
	case "card.update":
		return nil
	case "subscription.card.regist":
		return nil
	case "subscription.card.delete":
		return nil
	case "subscription.card.update":
		return nil
	case "recurring.card.batch":
		return nil
	case "subscription.directdebit.regist":
		return nil
	case "subscription.directdebit.delete":
		return nil
	case "subscription.directdebit.update":
		return nil
	case "recurring.directdebit.batch":
		return nil
	case "payments.bulk.card.regist":
		return nil
	case "payments.bulk.card.batch":
		return nil
	case "contracts.status_code.updated":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
